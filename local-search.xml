<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vocabulary 13</title>
    <link href="/2024/04/01/Vocabulary-13/"/>
    <url>/2024/04/01/Vocabulary-13/</url>
    
    <content type="html"><![CDATA[<ol><li><p>economical&#x2F;ˌiː.kəˈnɑː.mɪ.kəl&#x2F;</p><p>经济的；省钱的；节约的</p><p>There’s increasing demand for cars that are more economical on fuel.</p><p>人们对更省油的汽车的需求不断增加。</p><p>What’s the most economical way of heating this building?</p><p>给这座楼供暖，怎样做才是最经济的方法？</p><p>I had to buy a new washing machine as it would not have been economical to get it repaired.</p></li><li><p>economic&#x2F;iː.kəˈnɑː.mɪk&#x2F;</p><p>经济的；经济上的</p><p>The country has been in a very poor economic state ever since the decline of its two major industries.</p><p>自从这个国家的两大支柱产业衰退后，其经济一直萎靡不振。</p><p>The government’s economic policies have led us into the worst recession in years.</p><p>政府的经济政策使我们遭遇了多年来最为严重的经济衰退。</p></li><li><p>snowball&#x2F;ˈsnoʊ.bɑːl&#x2F;</p><p>雪球</p></li><li><p>anthem&#x2F;ˈæn.θəm&#x2F;</p><p>national anthem 国歌</p><p>国歌;（团体组织的）颂歌，赞歌</p><p>The national anthems of the teams are played at the beginning of international football matches.</p><p>在重大国际足球赛开赛时，演奏各参赛球队的国歌。</p><p>John Lennon’s “Imagine” has become the anthem of peace-lovers all over the world.</p><p>约翰•列侬的《想象》已成为全世界和平爱好者的颂歌。</p></li><li><p>scarf&#x2F;skɑːrf&#x2F;</p><p>a knitted&#x2F;woollen&#x2F;silk scarf</p><p>针织／羊毛／丝绸围巾</p><p>He was wearing a hat and scarf against the cold.</p></li><li><p>knitted&#x2F;ˈnɪt̬.ɪd&#x2F;</p><p>编织的</p><p>a knitted jumper</p><p>编织的套衫</p><p>hand-knitted gloves</p><p>手工织的手套</p></li><li><p>mitten&#x2F;ˈmɪt̬.ən&#x2F;</p><p>连指手套</p><p>sheepskin mittens</p><p>羊皮连指手套<br>woollen mittens</p><p>羊毛连指手套</p></li><li><p>shovel&#x2F;ˈʃʌv.əl&#x2F;</p><p>铲起；用铲子移动（或移开）</p><p>Would you give me a hand shovelling the snow away from the garage&#x2F;ɡəˈrɑːʒ&#x2F; door?</p><p>你能帮我把车库门前的雪铲走吗？</p></li><li><p>ballet&#x2F;bælˈeɪ&#x2F;</p><p>芭蕾舞;芭蕾舞剧</p><p>a ballet dancer</p><p>芭蕾舞女演员</p><p>By the age of 15 he had already composed his first ballet.</p><p>他 15 岁就写出了第一首芭蕾舞曲。</p></li><li><p>contestant&#x2F;kənˈtes.t̬ənt&#x2F;</p><p>参赛选手；竞争者</p><p>In tonight’s quiz, our contestants have come from all over the country.</p><p>参加今晚知识竞赛的选手们来自全国各地。</p><p>争夺者；竞争者</p><p>Two main candidates are emerging as contestants for the presidency.</p><p>两位主要候选人最终脱颖而出成为总统职位的有力竞争者。</p></li><li><p>presidency&#x2F;ˈprez.ɪ.dən.si&#x2F;</p><p>总统职务（或任期）</p><p>He has announced that he is running for the presidency.</p><p>他已宣布参加总统竞选。</p><p>She won the presidency by a wide margin.</p><p>她以高额票数当选总统。</p></li><li><p>canoeing&#x2F;kəˈnuː.ɪŋ&#x2F;</p><p>划独木舟</p><p>They died in a canoeing accident.</p><p>他们在一次划独木舟事故中丧生。</p><p>In the summer I take my kids boating, rafting, and canoeing.</p><p>在夏天，我会带我的孩子们划船、漂流和划独木舟。</p></li><li><p>repellent&#x2F;rɪˈpel.ənt&#x2F;</p><p>驱虫剂</p><p>insect&#x2F;mosquito repellent</p><p>驱虫／蚊剂</p><p>令人厌恶的</p><p>repellent behaviour&#x2F;beliefs</p><p>令人厌恶的行为／信条</p><p>I find any cruelty to children utterly repellent.</p><p>我觉得任何针对孩子的残暴行为都是极其可憎的。</p></li><li><p>utterly&#x2F;ˈʌ.t̬ɚ.li&#x2F;</p><p>完全地，极度地</p><p>What an utterly stupid thing to do!</p><p>多么愚蠢的事情！</p><p>She was utterly devastated&#x2F;ˈdev.ə.steɪ.t̬ɪd&#x2F; when her husband died.</p><p>当她的丈夫去世时，她完全奔溃了。</p></li><li><p>petunia&#x2F;pəˈtuː.njə&#x2F;</p><p>矮牵牛（一种花园植物）</p></li><li><p>tulip&#x2F;ˈtuː.lɪp&#x2F;</p><p>郁金香；郁金香花</p></li><li><p>recess&#x2F;ˈrɪː.ses&#x2F;</p><p>（议会）休会期</p><p>The Supreme Court is in recess until October but could still consider the review request and respond at any time.</p><p>课间休息</p><p>She never talked to teachers, never made friends, never played at recess.</p></li><li><p>zipper&#x2F;ˈzɪp.ɚ&#x2F;</p><p>拉链，拉锁</p><p>to pull a zipper up&#x2F;down</p><p>拉上／拉开拉链</p><p>I can’t open my bag - the zipper is stuck.</p><p>我的包打不开——拉链卡住了。</p></li><li><p>research</p><p>&#x2F;ˈriː.sɝːtʃ&#x2F; 研究；调查；探索</p><p>scientific&#x2F;medical research</p><p>科学／医学研究</p><p>They are carrying out&#x2F;conducting&#x2F;doing some fascinating research into&#x2F;on the language of dolphins.</p><p>他们正在对海豚的语言展开／进行／做一些很有趣的研究。</p><p>His researches in the field of disease prevention produced unexpected results.</p><p>他在疾病预防领域的研究取得了意想不到的成果。</p><p>&#x2F;rɪˈsɝːtʃ&#x2F; 研究；调查；探索</p><p>She’s researching into possible cures for AIDS.</p><p>她正在对一些可能治愈艾滋病的疗法进行研究。</p><p>Journalists were frantically&#x2F;ˈfræn.t̬ɪ.kəl.i&#x2F; researching the new prime minister’s background, family, and interests.</p><p>记者们在疯狂地调查新首相的背景、家庭和爱好等。</p></li><li><p>frantically&#x2F;ˈfræn.t̬ɪ.kəl.i&#x2F;</p><p>紧张忙乱地</p><p>I’ve been working frantically all week to get it finished on time.</p><p>我整个星期都在紧张工作，以期能够按时完成。</p><p>I got home to find Lara frantically searching for her keys.</p><p>我回到家，发现拉腊正在急急火火地找她的钥匙。</p><p>发狂似地，情绪失控地</p><p>As the helicopter flew overhead, they waved frantically, trying to attract its attention.</p><p>当直升机从他们头顶飞过时，他们拼命挥手，想要引起它的注意。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 12</title>
    <link href="/2024/04/01/Vocabulary-12/"/>
    <url>/2024/04/01/Vocabulary-12/</url>
    
    <content type="html"><![CDATA[<ol><li><p>vegetarianism&#x2F;ˌvedʒ.əˈter.i.ə.nɪ.zəm&#x2F;</p><p>素食主义</p><p>Vegetarianism is becoming more popular among young people.</p><p>素食主义在年轻人中越来越流行。</p><p>Some religions promote vegetarianism, considering it wrong to consume animals.</p><p>一些宗教提倡素食主义，认为食用动物是错误的。</p></li><li><p>vegetarian</p><p>素食者，素食主义者</p><p>Of the four million people who have become vegetarians in this country, nearly two thirds are women.</p><p>在英国已有的 400 万素食主义者中，将近 2&#x2F;3 是女性。</p><p>素食的；素的</p><p>vegetarian cooking&#x2F;food 素食烹饪／食品</p><p>a vegetarian dish&#x2F;meal 素菜／素餐</p><p>a vegetarian restaurant 素食餐馆</p></li><li><p>popular&#x2F;ˈpɑː.pjə.lɚ&#x2F;</p><p>受大众喜爱的，受欢迎的</p><p>She’s the most popular teacher in school.</p><p>她是学校里最受欢迎的老师。</p><p>That song was popular with people from my father’s generation.</p><p>那首歌在我爸爸那一代人中很流行。</p><p>Walking is a popular form of exercise in Britain.</p><p>在英国，步行是很流行的运动方式。</p><p>How popular is Madonna among&#x2F;with teenagers?</p><p>麦当娜在青少年中有多受欢迎？</p><p>普及的，大众的</p><p>popular music&#x2F;entertainment&#x2F;culture</p><p>流行音乐／大众化娱乐／通俗文化</p><p>The popular myth is that air travel is more dangerous than travel by car or bus.</p><p>一个普遍的错误之说是乘飞机比开车和乘公共汽车都要危险。</p></li><li><p>carnival&#x2F;ˈkɑːr.nə.vəl&#x2F;</p><p>狂欢节；嘉年华会</p><p>a Caribbean&#x2F;ˌker.ɪˈbiː.ən&#x2F; carnival</p><p>加勒比海狂欢节</p><p>There’s a real carnival atmosphere in the streets.</p><p>街上真是一派狂欢节的气氛。</p></li><li><p>Caribbean&#x2F;ˌker.ɪˈbiː.ən&#x2F;</p><p>加勒比海地区的；加勒比海地区人的</p><p>Caribbean food</p><p>加勒比海食物</p><p>the Caribbean</p><p>加勒比海</p><p>The hurricane is centred over the eastern Caribbean.</p><p>飓风中心在东加勒比海。</p></li><li><p>paper</p><p>纸<br>a piece&#x2F;sheet of paper</p><p>一张纸</p><p>Dictionaries are usually printed on thin paper.</p><p>字典通常用薄纸印刷。</p><p>a paper bag</p><p>纸袋</p><p>This card is printed on recycled paper.</p><p>这张卡片是用再生纸印的。</p><p>Get the idea down on paper before you forget it.</p><p>把想法写在纸上以免忘了。</p><p>She works on paper because she hates computers.</p><p>她在纸上写东西，因为她不喜欢用电脑。</p><p>报纸</p><p>The photo was on the front page of all the papers.</p><p>这张照片上了各家报纸的头版。</p><p>证件</p><p>The border guards stopped me and asked to see my papers.</p><p>边防卫兵拦住我要看我的证件。</p><p>考卷</p><p>Candidates must answer two questions from each paper.</p><p>应试者必须回答每张考卷上的两个问题。</p><p>The geography paper is not till next week.</p><p>地理试卷下周才能印好。</p><p>课程论文</p><p>Mr Jones thought my history paper was terrific&#x2F;təˈrɪf.ɪk&#x2F;.</p><p>琼斯先生认为我的历史课程论文写得好极了。</p><p>For homework I want you to write a paper on endangered species.</p><p>我想让你们写一篇关于濒危物种的文章作为作业。</p></li><li><p>cottage&#x2F;ˈkɑː.t̬ɪdʒ&#x2F;</p><p>（通常指乡村中的）小屋，村舍</p><p>They live in an idyllic&#x2F;aɪˈdɪl.ɪk&#x2F; country&#x2F;thatched cottage, with roses around the door.</p><p>他们住在田园诗般的乡村小屋／茅舍，门前玫瑰环绕。</p><p>We rented a little beach cottage on the North Caroline coast.</p><p>我们在北卡罗莱纳州海岸租下了一间小小的海滨农舍。</p></li><li><p>upstairs</p><p>往楼上（地）；在楼上（地）</p><p>an upstairs landing&#x2F;window</p><p>楼上的平台／窗户</p><p>He heard glass breaking and ran upstairs to see what had caused it.</p><p>听到玻璃破碎的声音，她跑上楼去看是怎么回事。</p></li><li><p>downstairs&#x2F;ˌdaʊnˈsterz&#x2F;</p><p>朝楼下，在楼下（尤指底层）</p><p>I went downstairs to answer the phone.</p><p>我下楼去接电话。</p><p>楼下，尤指底楼</p><p>We finished painting upstairs yesterday, but the downstairs still needs some work.</p><p>我们昨天把楼上粉刷完了，但是楼下还没有完工。</p><p>The downstairs was a mess.</p><p>楼下乱七八糟的。</p></li><li><p>asleep</p><p>睡着的</p><p>I’m surprised to see you awake - ten minutes ago you were sound asleep.</p><p>真奇怪，你怎么醒了——10 分钟前你还睡得很香呢。</p><p>I’ve only just got up and I’m still half asleep.</p><p>我刚起床，还没完全醒呢。</p><p>fall asleep</p><p>I fell asleep as soon as my head hit the pillow.</p><p>我头一沾枕头就睡着了。</p></li><li><p>firework</p><p>烟花</p><p>a firework display</p><p>焰火表演</p><p>When it gets dark we’ll set off (&#x3D; light) the fireworks.</p><p>天一黑下来我们就放烟花。</p><p>What time do the fireworks start?</p><p>什么时候开始燃放焰火？</p></li><li><p>awake</p><p>醒着的</p><p>“Is Oliver awake yet?” “Yes, he’s wide (&#x3D; completely) awake and running around his bedroom.”</p><p>“奥利弗醒了吗？”“是的，他完全醒了，正在卧室里乱跑呢。”</p><p>I find it so difficult to stay awake during history lessons.</p><p>我觉得上历史课不打瞌睡太难了。</p><p>I drink a lot of coffee to keep me awake.</p><p>我喝了很多咖啡以保持头脑清醒。</p><p>She used to lie awake at night worrying about how to pay the bills.</p><p>她过去常常夜里躺在床上睡不着觉，发愁怎样付账单。</p><p>（使）醒来；唤醒</p><p>I awoke at seven o’clock.</p><p>我在 7 点钟醒了。</p><p>（使）领悟，（使）醒悟，（使）意识到;（被）唤起</p><p>The chance meeting awoke the old passion between them.</p><p>这次邂逅使他们旧情复燃。</p><p>Young people need to awake to the risks involved in casual sex.</p><p>年轻人应该意识到，随意的性关系会带来很多危险。</p></li><li><p>novelist</p><p>小说家</p><p>She’s more of a poet than a novelist.</p><p>I would class her among the top ten American novelists.</p></li><li><p>class</p><p>班；班级</p><p>Which class are you in this year?</p><p>今年你在哪个班？</p><p>She gave the whole class extra homework for a week.</p><p>她给全班额外布置了一星期的家庭作业。</p><p>My class was rather noisy this morning.</p><p>我的班里今天早上很吵。</p><p>（一节）课；课堂</p><p>My last class ends at four o’clock.</p><p>我最后一堂课 4 点结束。</p><p>I missed my aerobics class yesterday.</p><p>我昨天没去上有氧健身操课。</p><p>Classes have been cancelled today because of a staff meeting.</p><p>因为有全体教工会议，今天的课取消了。</p><p>社会等级；阶级；阶层</p><p>The Labour Party has lost a lot of support among the working class.</p><p>工党失去了工人阶级中许多人的支持。</p><p>She belongs to the rich American upper class.</p><p>她属于富裕的美国上层阶级。</p><p>We live in a middle class neighbourhood.</p><p>我们住在一个中产阶级居住区。</p><p>She comes from an upper middle class background.</p><p>她出身于中上层阶级家庭。</p><p>He was a member of the ruling classes.</p><p>他是统治阶级中的一员。</p><p>She’s studying the class structure of Japan.</p><p>她在研究日本的阶级结构。</p><p>（货物、服务或人的）等级，类别，级别</p><p>Whenever I travel by train, I always travel first class.</p><p>我每次乘火车旅行都坐头等车厢。</p><p>first&#x2F;second class mail</p><p>一类／二类邮件</p><p>a business&#x2F;economy class ticket</p><p>商务舱／经济舱的机票</p><p>When it comes to mathematics, he’s in a different class to his peers.</p><p>说到数学，他和他的同龄人不在一个级别上。</p><p>把…归类；把…分级</p><p>I’m 17, but I’m still classed as a child when I travel by bus.</p><p>我 17 岁了，可是乘公共汽车时仍然被视为儿童。</p><p>I would class her amongthe top ten American novelists.</p><p>我会将她列为美国最好的 10 位小说家之一。</p></li><li><p>historical&#x2F;hɪˈstɔːr.ɪ.kəl&#x2F;</p><p>Many important historical documents were destroyed when the library was bombed.</p><p>图书馆遭轰炸时很多重要的历史文献都毁于一旦。</p><p>She specializes in historical novels set in 18th-century England.</p><p>她专门创作以 18 世纪英格兰为背景的历史小说。</p></li><li><p>historian&#x2F;hɪˈstɔːr.i.ən&#x2F;</p><p>历史学家</p><p>This is the acclaimed historian John Taylor’s first sortie&#x2F;ˈsɔːr.t̬i&#x2F; into fiction.</p></li><li><p>acclaimed</p><p>受称赞的，受拥戴的</p><p>“Dinner Party”, based on the critically acclaimed novel by Bill Davies, was made into a film last year.</p><p>《晚宴》改编自比尔·戴维斯（Bill Davies）广受好评的小说，于去年被拍成电影。</p></li><li><p>eminent</p><p>显赫的；卓越的；著名的</p><p>an eminent historian</p><p>声名显赫的历史学家</p></li><li><p>historic</p><p>历史上著名（或重要）的，有历史意义的</p><p>historic buildings</p><p>有历史意义的建筑</p><p>a historic day&#x2F;moment</p><p>具有历史意义的日子／时刻</p></li><li><p>blouse&#x2F;blaʊs&#x2F;</p><p>女式衬衫</p><p>a white silk blouse</p><p>女式白色丝绸衬衫</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 11</title>
    <link href="/2024/03/28/Vocabulary-11/"/>
    <url>/2024/03/28/Vocabulary-11/</url>
    
    <content type="html"><![CDATA[<ol><li><p>cause</p><p>Ron’s carelessness <strong>caused</strong> the accident.</p><p>The sad movie <strong>caused</strong> me <strong>to</strong> cry.</p><p>What was the <strong>cause</strong> of the explosion?</p><p>The concert was terrific―I had no <strong>cause</strong> for complaint.</p><p>The flood <strong>caused damage to</strong> dozens of homes, and many people were left homeless.</p></li><li><p>precursor</p><p>先驱；前体</p><p>The discovery of ancient tools in the archaeological&#x2F;ˌɑːr.ki.əˈlɑː.dʒɪ.kəl&#x2F; site served as a precursor to understanding the region’s early human history.</p><p>在考古遗址中发现的古代工具是了解该地区早期人类历史的先驱。</p><p>Biological research has often been a precursor to medical breakthroughs.</p><p>生物学研究往往是医学突破的先驱。</p></li><li><p>intrusive&#x2F;ɪnˈtruː.sɪv&#x2F; 侵入性的</p><p>His intrusive questions about my personal life made me uncomfortable during the conversation.</p></li><li><p>intrusion 侵入；侵扰</p><p>They complained about excessive government intrusion into their legitimate&#x2F;ləˈdʒɪt̬.ə.mət&#x2F; activities.</p><p>他们抱怨政府过多地侵扰他们的合法活动。</p></li><li><p>mustache &#x2F;ˈmʌsˌtæʃ&#x2F; 胡子</p></li><li><p>tech bubble 科技泡沫</p></li><li><p>devour&#x2F;dɪˈvaʊ.ɚ&#x2F;</p><p>狼吞虎咽，吞食</p><p>The young cubs hungrily devoured the deer.</p><p>幼狮们贪婪地吞食着鹿肉。</p><p>吞噬，毁灭</p></li><li><p>arbitrary&#x2F;ˈɑːr.bə.trer.i&#x2F;</p><p>任意的；随机的；随心所欲的</p><p>The teacher’s decision to give an arbitrary deadline for the project submission caused confusion among the students.</p><p>arbitrary decision-making</p><p>随意决策</p><p>Did you have a reason for choosing your destination or was it arbitrary?</p><p>你根据什么选择目的地？还是随意选定的？</p><p>专断的；武断的</p><p>an arbitrary ruler</p><p>专制的统治者</p></li><li><p>adulation&#x2F;ˌæd.jʊˈleɪ.ʃən&#x2F;</p><p>奉承</p><p>As a born performer, she loves the excitement and she loves the adulation.</p><p>她是个天生的表演家，喜欢刺激，爱听吹捧。</p><p>The actor was uncomfortable with the adulation he received from his fans, as he preferred a more low-key approach to fame.</p><p>这位演员对粉丝的奉承感到不舒服，因为他更喜欢低调的成名方式。</p><p>Her constant adulation from colleagues made her uneasy, as she believed in earning recognition through hard work rather than excessive praise.</p></li><li><p>fanatical &#x2F;fəˈnætɪkl&#x2F;</p><p>狂热的</p><p>He was a fanatical supporter of his favorite sports team, never missing a single game and always wearing their colors.</p></li><li><p>idealistic&#x2F;ˌaɪ.diː.əˈlɪs.tɪk&#x2F;</p><p>When I was young and idealistic I believed it was possible to change the world.</p><p>我年轻时是个理想主义者，我相信改变世界是可能的。</p><p>She supports a number of idealistic causes.</p><p>她支持许多理想主义的事业。</p><p>idealist 理想主义者</p><p>idealism 理想主义</p><p>She never lost her youthful idealism and campaigned for just causes all her life.</p><p>她从未丧失过年轻时的理想主义，终生都在为正义事业而奋斗。</p></li><li><p>resume</p><p>Missile attacks on the capital resumed at dawn.</p><p>对首都的导弹袭击在黎明又重新开始了。</p><p>Normal services will be resumed in the spring.</p><p>春天将恢复正常服务。</p><p>He stopped to take a sip of water and then resumed speaking.</p><p>他停下来呷了一口水，然后继续发言。</p><p>The talks are due to resume today.</p><p>会谈预定今天继续进行。</p><p>Please resume your seats, as the performance will continue in two minutes.</p><p>请大家回到自己的座位上去，两分钟后演出继续。</p><p>She gave us a brief résumé of the project so far.</p><p>她向我们简要介绍了目前工程的进展情况。</p><p>She sent her résumé to 50 companies, but didn’t even get an interview.</p><p>她向 50 家公司投了简历，但是连一次面试的机会都没有得到。</p></li><li><p>anonymous</p><p>The money was donated by an anonymous benefactor.</p><p>这笔钱来自一位不愿透露姓名的捐赠者。</p><p>Police said an anonymous caller warned that a bomb was about to go off.</p><p>警方说有人打来匿名电话，警告一枚炸弹即将爆炸。</p><p>An attempt to implant an embryo using an egg from an anonymous woman donor was unsuccessful.</p><p>用一位匿名女性捐献的卵子来植入胚胎的尝试未获成功。</p><p>He received an anonymous letter threatening to disclose details of his affair if he didn’t pay the money.</p><p>他收到一封匿名信，威胁说如果他不付钱，就把他的风流韵事都抖搂出来。</p><p>For reasons of personal safety, the informant wishes to remain anonymous.</p><p>为了自身安全，举报人不希望透露姓名。</p></li><li><p>informant</p><p>a police&#x2F;secret informant</p><p>警方／秘密线人</p><p>Our survey is based on information from over 200 informants.</p><p>我们的调查以两百多人提供的信息为基础。</p></li><li><p>exploit</p><p>We need to make sure that we exploit our resources as fully as possible.</p><p>我们需要确保尽可能充分利用资源。</p><p>Laws exist to stop companies exploiting their employees.</p><p>法律规定禁止公司剥削其员工。</p></li><li><p>independent</p><p>an independent enquiry&#x2F;organization</p><p>独立调查／机构</p><p>They all made the same comment, quite independent of each other (&#x3D; without deciding together to do so).</p><p>他们都不约而同作出了相同的评论。</p><p>Belize became fully independent from Britain in 1981.</p><p>伯利兹于 1981 年脱离英国完全独立。</p><p>Grandma’s very independent and does all her own shopping and cooking.</p><p>I’ve always been financially independent.</p><p>在经济上我一直自食其力。</p></li><li><p>draw&#x2F;drɑː&#x2F;</p><p>Jonathan can draw very well.</p><p>乔纳森的画画得相当棒。</p><p>The children drew pictures of their families.</p><p>孩子们画了自己的家人。</p><p>Draw a line at the bottom of the page.</p><p>在本页的底部画一条线。</p><p>He’s an excellent speaker who always draws a crowd.</p><p>他很擅长演讲，总能吸引大批的听众。</p><p>Could I draw your attention to item number three on the agenda?</p><p>我可以请你看一看议程的第 3 项内容吗？</p><p>draw sb’s eye(s)</p><p>Her eyes were immediately drawn to the tall blond man standing at the bar.</p><p>她的注意力立即被吧台旁站着的一位高个头的金发男子吸引住了。</p><p>Her speech last night in the Senate drew an angry response.</p><p>昨晚她在参议院的讲话引起了人们的愤怒。</p><p>draw a conclusion</p><p>I’d seen them together so often, I drew the logical conclusion that they were husband and wife.</p><p>我常看见他们在一起，所以认为他们是夫妻。</p></li><li><p>bottom&#x2F;ˈbɑː.t̬əm&#x2F;</p><p>He stood at the bottom of the stairs and called up to me.</p><p>他站在楼梯的最下面抬头叫我。</p><p>Extra information will be found at the bottom of the page.</p><p>补充信息见这一页的最下面。</p><p>The ship had sunk to the bottom of the sea&#x2F;the sea bottom.<br>船已经沉到了海底。</p><p>At school, Einstein was (at the) bottom of his class.</p><p>上学时，爱因斯坦是班上最后一名。</p><p>The manager of the hotel started at the bottom 30 years ago, as a porter.</p><p>宾馆的经理是 30 年前从最底层的搬运工开始做起的。</p><p>The rich usually get richer, while the people at the bottom stay there.</p><p>通常情况是富人越来越富，社会底层的人却原地不动。</p></li><li><p>compulsive(ly)</p><p>难以抑制的；强迫性的；强制性的</p><p>a compulsive liar&#x2F;thief&#x2F;eater</p><p>撒谎成性的人／惯偷／饮食无节制的人</p><p>compulsive gambling</p><p>嗜赌成性</p><p>a compulsive eating disorder</p><p>强迫性饮食失调症</p><p>（电影、戏、体育项目、书等）引人入胜的，欲罢不能的</p><p>I always find programmes about hospitals compulsive viewing.</p><p>我一向觉得有关医院的电视节目很好看。</p><p>Her latest book is compulsive reading.</p><p>她的新书让人难以释卷。</p><p>She exercises&#x2F;cleans&#x2F;works compulsively.</p><p>她有运动强迫症／有洁癖／是工作狂。</p></li><li><p>modularity</p><p>A system lacks modularity when a tweak to one of its components affects the functioning of others.</p><p>如果对系统的一个部件的调整影响到其他部件的功能，那么这个系统就缺乏模块化。</p><p>The modularity of this design means you can buy a second battery and put that in to keep your doorbell functional while the other charges.</p><p>这种模块化设计意味着你可以购买第二块电池，在另一块电池充电时，把它放进去以继续使用门铃。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 10</title>
    <link href="/2024/03/28/Vocabulary-10/"/>
    <url>/2024/03/28/Vocabulary-10/</url>
    
    <content type="html"><![CDATA[<ol><li><p>subconscious</p><p>潜意识，下意识</p><p>The memory was buried deep within my subconscious.</p><p>那段记忆深深埋藏在我的潜意识里。</p><p>潜意识的，下意识的</p><p>subconscious thoughts&#x2F;fears 下意识的想法／恐惧</p><p>Such memories exist only on&#x2F;at the subconscious level.</p><p>这些记忆只存在于潜意识层次。</p><p>Our subconscious mind registers things which our conscious mind is not aware of.</p><p>我们的潜意识会记录意识中并未注意到的东西。</p></li><li><p>lunch break 午休</p></li><li><p>signpost</p><p>路标</p><p>The signpost said “London 18 miles”.</p><p>路标上写着“伦敦 18 英里”。</p><p>征兆、预兆</p><p>This upturn in the country’s economy is a splendid signpost to the future.</p><p>该国经济的好转预示着光明的前景。</p></li><li><p>scrawny&#x2F;ˈskrɑː.ni&#x2F;</p><p>骨瘦如柴</p><p>He came home after three months at college looking terribly scrawny.</p><p>他在大学里呆了 3 个月后回到家里，样子瘦得可怕。</p></li><li><p>cassette &#x2F;kəˈset&#x2F;</p><p>盒式磁带</p><p>a video cassette</p><p>录像带</p><p>an audio cassette</p><p>录音带</p></li><li><p>compensate</p><p>赔偿；补偿；</p><p>Victims of the crash will be compensated for their injuries.</p><p>车祸的受害者会得到伤害赔偿。</p><p>弥补</p><p>Nothing will ever compensate for his lost childhood.</p><p>什么也不能弥补他失去的童年。</p><p>His enthusiasm more than compensates for his lack of experience.</p><p>他的热情大大弥补了经验的不足。</p><p>I took her swimming to compensate for having missed out on the cinema.</p><p>为弥补她错过了电影，我带她去游泳。</p><p>We were late and I was driving fast to compensate.</p><p>我们迟到了，所以我开快车来赶时间。</p></li><li><p>compensation</p><p>She received £40,000 in compensation for a lost eye.</p><p>她得到 4 万英镑，作为对失去一只眼睛的赔偿。</p><p>You should claim&#x2F;seek compensation.</p><p>你应该要求赔偿。</p><p>a compensation claim</p><p>索赔要求</p><p>I have to spend three months of the year away from home - but there are compensations like the chance to meet new people.</p><p>我一年必得有 3 个月的时间出门在外——但也有好处，比如有机会认识人。</p><p>Free food was no compensation for a very boring evening.</p><p>免费食物并不能弥补晚会的乏味无聊。</p></li><li><p>acquire</p><p>收购；获得</p><p>He acquired the firm in 2008.</p><p>他于 2008 年收购了这家公司。</p><p>I was wearing a newly&#x2F;recently acquired jacket.</p><p>我穿着一件新买的夹克衫。</p><p>I seem to have acquired (&#x3D; have got although I don’t know how) two copies of this book.</p><p>这本书我好像买重了。</p><p>He has acquired a reputation for being difficult to work with.</p><p>据说很难跟他共事</p></li><li><p>acquisition&#x2F;ˌæk.wəˈzɪʃ.ən&#x2F;</p><p>The acquisition of huge amounts of data has helped our research enormously.</p><p>获得的大量数据对我们的研究有莫大的帮助。</p><p>Language acquisition (&#x3D; learning a language without being taught) starts at a very young age.</p><p>语言习得始于幼年。</p></li><li><p>escape&#x2F;ɪˈskeɪp&#x2F;</p><p>转义；逃脱，避免</p><p>If you want to single quote or double quotes in a literal string, you need to use the backslash to escape it.</p><p>Two prisoners have escaped.</p><p>A lion has escaped from its cage.</p><p>She was lucky to escape serious injury.</p></li><li><p>trust</p><p>If you keep on telling lies, no one will trust you.</p><p>I would <strong>trust</strong> Nathan <strong>with</strong> my life.</p><p>Do you <strong>trust in</strong> God?</p><p>Since Sam has lied to me, I <strong>have</strong> no <strong>trust in</strong> him.</p><p>Our relations with this country are based on <strong>mutual trust</strong>.</p><p>It was the <strong>lack of trust</strong> that broke up Ken and Juliet’s marriage.</p></li><li><p>two-timer</p><p>时间管理大师</p><p>I had never thought of Susan as a two-timer until I saw the evidence.<br>He’s two-timing you.</p><p>他背着你脚踏两只船。</p></li><li><p>alphabetical &#x2F;ˌæl.fəˈbet̬.ɪ.kəl&#x2F;</p><p>按字母排序的</p><p>The names are published in alphabetical order.</p><p>an alphabetical lists.</p><p>His books are neatly arranged in alphabetical order.</p></li><li><p>built-in</p><p>内嵌的；嵌入式的</p><p>built-in storage</p><p>嵌入式储物间</p><p>UK All the rooms have built-in cupboards&#x2F;wardrobes.</p><p>所有的房间都安装了嵌入式壁橱／衣橱。</p><p>内在的；固有的</p><p>an built-in advantage&#x2F;problem</p><p>内在的优势／固有的问题</p></li><li><p>portability</p><p>便携、手提、轻巧的特点</p><p>The advantage of the smaller model is its greater portability.</p><p>较小型号的优势在于其更大的便携性。</p><p>Campers like food pouches for their portability and long shelf lives.</p><p>露营者喜欢食品袋的便携性和较长的保质期。</p><p>可随带性，可转移性</p><p>There is a need for pension portability, to enable workers to take whatever pension credits they earn from job to job.</p><p>养老金的可转移性是很有必要的，这样工人在换工作的时候能够带走他们已经获得的养老金积分。</p><p>Health-savings accounts have been touted for their portability from job to job.</p><p>健康储蓄账户的一大卖点是可以随工作转移。</p></li><li><p>tout&#x2F;taʊt&#x2F;</p><p>（尤指为了提高销售额、知名度或推动发展）给…做广告，宣传，赞扬，吹捧</p><p>The minister has been touting these ideas for some time.</p><p>教育部长一段时间以来一直在宣传这些理念。</p><p>He is being widely touted as the next leader of the party.</p><p>到处都在宣传他是党的下一任领袖。</p><p>A local car dealership was touting its services&#x2F;wares on the radio.</p><p>一家地方汽车特许经销商正在当地电台作宣传。</p></li><li><p>wares （在市场上或街边出售的）商品，货物</p><p>Some displayed their wares on stalls, while others had just spread them out on the pavement.</p><p>有的人把货物摆放在货摊上，有的人干脆就铺开摊在人行道上。</p></li><li><p>stall</p><p>货摊，摊位</p><p>In the village market, the stalls are piled high with local vegetables.</p><p>村子集市的摊位上高高地堆着当地产的蔬菜。</p></li><li><p>pouch &#x2F;paʊtʃ&#x2F;</p><p>小袋;一小袋东西</p><p>All our electric shavers are supplied with a free travel pouch.</p><p>我们的电动剃须刀都免费提供一个旅行套。</p><p>Food sealed in foil pouches lasts for a long time.</p><p>密封在箔纸袋中的食物可以放很长时间。</p></li><li><p>portable</p><p>轻便的，便携的；手提的</p><p>a portable radio&#x2F;phone&#x2F;computer</p><p>便携式收音机／移动电话／手提电脑</p><p>（在换工作或地点之后）可转移的</p><p>They offer portable pensions, carried by employees from job to job.</p><p>他们提供可转移养老金，可随着雇员们换工作而转移。</p><p>Your phone number is portable if you decide to move to a different home or office.</p><p>如果你决定要搬家或换办公室的话，你的电话号码是可转移的。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 09</title>
    <link href="/2024/03/28/Vocabulary-09/"/>
    <url>/2024/03/28/Vocabulary-09/</url>
    
    <content type="html"><![CDATA[<ol><li><p>roommate</p><p>室友</p><p>Jean was my roommate during our first year at college.</p><p>琼和我大学一年级时是室友。</p><p>Ethan’s moving out next month, so we’re looking for another roommate to share our apartment.</p><p>伊森下个月就要搬出去了，所以我们正在另找一位合租者住进来。</p></li><li><p>prominence</p><p>突出</p><p>Most of the papers give prominence to the same story this morning.</p><p>今天早上大多数报纸都在显著位置刊登了同一条新闻。</p><p>It’s the first time that a lawyer of such prominence has been given the freedom to air his views on TV.</p><p>一位如此著名的律师获准在电视上自由地发表观点，这是第一次。</p></li><li><p>prominent</p><p>突出的、杰出的</p><p>a prominent Democrat&#x2F;ˈdem.ə.kræt&#x2F;</p><p>民主党的重要人物</p><p>a prominent member of the Saudi royal family</p><p>沙特阿拉伯王室的重要成员</p><p>The government should be playing a more prominent role in promoting human rights.</p><p>政府应该在促进人权方面发挥更重要的作用。</p></li><li><p>miscellaneous &#x2F;ˌmɪs.əlˈeɪ.ni.əs&#x2F;</p><p>混杂的；各种各样的</p><p>miscellaneous household items</p><p>各种各样的家庭用品</p></li><li><p>trial</p><p>trial proceedings</p><p>审判程序</p><p>Trial by jury is a fundamental right.</p><p>由陪审团审判是一项基本权利。</p><p>It was a very complicated trial that went on for months.</p><p>该审判非常复杂，历时数月。</p><p>She’s going on&#x2F;standing trial for fraud.</p><p>她将因诈骗而受审。</p><p>They’re doing clinical trials on a new drug.</p><p>他们正在对一种新药进行临床试验。</p><p>They’ve employed her for a six-month trial (period).</p><p>他们录用了她，试用期为 6 个月。</p><p>You can have the equipment on a trial basis, and if you don’t like it you can give it back.</p><p>你可以采用试用方式购买设备，如果不喜欢可以退货。</p><p>We will trial the new drug in several hospitals.</p><p>我们将在几家医院试用这种新药。</p></li><li><p>strenuously&#x2F;ˈstren.ju.əs.li&#x2F;</p><p>in a way that uses a lot of physical or mental effort</p><p>He pulled a muscle in his leg by working out too strenuously.</p><p>他在健身时太用力，拉伤了腿部肌肉。</p><p>She threw herself strenuously into her work.</p><p>她拼命地投入到工作中。</p><p>in a way that shows strong feelings or great energy or force</p><p>He strenuously denies all the allegations against him.</p><p>他极力地否认对他的所有指控。</p><p>Most local residents strenuously object to the building proposals.</p><p>大部分当地的住户都极力反对这些建楼方案。</p></li><li><p>external&#x2F;ɪkˈstɝː.nəl&#x2F;</p><p>the external walls of the house</p><p>房屋的外墙</p><p>Female kangaroos carry their young in pouches that are external to their bodies.</p><p>雌袋鼠把幼崽放在体外的育儿袋中。</p><p>This cream is for external use only (&#x3D; it must not be put inside the body).</p><p>这种药膏仅限外用。</p><p>In later years, his paintings began to show a number of external influences (&#x3D; influences coming from other people).</p><p>他晚年的画作开始表现出很多受其他画家影响的痕迹。</p><p>Most news magazines have a section devoted to external affairs (&#x3D; foreign news).</p><p>大多数新闻杂志都设有国外新闻专栏。</p><p>You shouldn’t judge people by their external appearances (&#x3D; what they appear to be like).</p><p>不应该以貌取人。</p></li><li><p>withdrawal&#x2F;wɪðˈdrɑː.əl&#x2F;</p><p>The bank became suspicious after several large withdrawals were made from his account in a single week.</p><p>他的账户仅在一周之内就有数笔大额提现，这让银行产生了怀疑。</p><p>The commander-in-chief was given 36 hours to secure a withdrawal of his troops from the combat zone.</p><p>要求总司令在 36 小时内将其军队从交战区撤出。</p></li><li><p>poor</p><p>Most of the world’s poorest countries are in Africa.</p><p>世界上最穷的国家多数在非洲。</p><p>He came from a poor immigrant family.</p><p>他来自一个贫穷的移民家庭。</p><p>be poor in sth</p><p>Unfortunately, Iceland is poor in natural resources.</p><p>遗憾的是，冰岛自然资源贫乏。</p><p>a poor harvest</p><p>歉收</p><p>Last year’s exam results were fairly poor.</p><p>去年的考试成绩相当差。</p><p>I was always very poor at maths at school.</p><p>我上学时数学一直很差。</p><p>Dad had been in poor health for several years.</p><p>爸爸几年来健康状况一直很差。</p><p>At last month’s meeting, attendance was poor.</p><p>上个月的会议出席率很低。</p><p>That cold sounds terrible, you poor thing!</p><p>感冒似乎很严重，你这个可怜的家伙！</p><p>Look at that dog - the poor thing only has three legs.</p><p>看那条狗——可怜的家伙只有 3 条腿。</p></li><li><p>proof</p><p>Do they have any proof that it was Hampson who stole the goods?</p><p>他们有什么证据证明是汉普森偷了货物？</p><p>I have a suspicion that he’s having an affair, though I don’t have any concrete (&#x3D; definite) proof.</p><p>我怀疑他有婚外情，不过我没有确凿的证据。</p><p>If anyone needs proof of Andrew Davies’ genius as a writer, this novel is it.</p><p>如果有人需要证据证明安德鲁•戴维斯是天才作家，这本小说就是。</p><p>Keep your receipt as proof of purchase.</p><p>保留收据作为购物证明。</p><p>-proof</p><p>a bullet-proof vest<br>防弹背心<br>a water-proof&#x2F;wind-proof jacket<br>防水／挡风夹克衫<br>frost-proof pots for the garden<br>花园里用的防冻花盆</p></li><li><p>conversation</p><p>She had a strange conversation with the man who moved in upstairs.</p><p>她跟搬到楼上的那个家伙进行了一次奇怪的交谈。</p><p>It’s impossible to hold&#x2F;carry on a conversation with all this noise going on!</p><p>周围这么吵根本无法谈话！</p><p>I struck up an interesting conversation with your uncle.</p><p>我跟你叔叔挺有兴趣地攀谈起来。</p><p>Because of television, many people have lost the art of conversation (&#x3D; talking to each other).</p><p>由于电视的缘故，许多人变得不善于与他人交谈了。</p><p>Whenever I’m in a social situation with my boss, we seem to run out of conversation after two minutes!</p><p>每次在社交场合跟老板在一起，两分钟过后我们好像就无话可说了。</p></li><li><p>temper</p><p>He’s got a really bad temper.</p><p>他的脾气真坏。</p><p>The children behaved so badly that I lost my temper.</p><p>孩子们太不懂规矩了，我不由得发了火。</p><p>I found it hard to keep my temper with so many things going wrong.</p><p>这么多的事情弄得一团糟，我很难不发脾气。</p><p>He appears to be a man of calm and even temper.</p><p>他看起来是一个脾气温和、平静的男人。</p><p>My enthusiasm for the venture was tempered by my knowledge of the hard work that would be involved.</p><p>当我了解到完成这个风险项目所要做的工作时，我的热情多少消退了一些。</p><p>I learned to temper my criticism.</p><p>我学会了批评别人时语气要缓和些。</p></li><li><p>stimulus</p><p>Foreign investment has been a stimulus to the industry.</p><p>外国投资促进了该产业的发展。</p><p>The book will provide a stimulus to research in this very important area.</p><p>这本书将会对这一重要领域的研究起促进作用。</p></li><li><p>misreport</p><p>to make known information that is not completely true or correct</p><p>The magazine misreported its sales figures in order to boost advertising revenue.</p><p>这家杂志为增加广告收入虚报了销售数字。</p></li><li><p>tandem&#x2F;ˈtæn.dəm&#x2F; bikes 双人自行车</p></li><li><p>wag tail （狗）摇尾巴</p></li><li><p>desktop lamp 台灯</p></li><li><p>pragmatism&#x2F;ˈpræɡ.mə.tɪ.zəm&#x2F;</p><p>实用主义;务实思想</p><p>The council has operated much more effectively since pragmatism replaced political dogma.</p><p>实用主义取代政治教条后，市政会的工作更有效了。</p><p>pragmatic</p><p>讲究实际的，重实效的；实用主义的</p><p>In business, the pragmatic approach to problems is often more successful than an idealistic one.</p><p>在商业活动中，解决问题用实际的方法往往比空想更有成效。</p><p>pragmatist&#x2F;ˈpræɡ.mə.tɪst&#x2F;</p><p>务实者;实用主义者</p><p>She rose to power by being a political pragmatist who took advantage of every opportunity.</p><p>她是一名政治上的务实者，不放过每个机会，因此才能上台。</p><p>Americans have a reputation for being political pragmatists, not ideologues.</p><p>众所周知，在政治上，美国人是实用主义者，而不是思想理论家。</p></li><li><p>meager arrows (-&gt;)</p><p>fat arrows (&#x3D;&gt;)</p></li><li><p>indiscriminate&#x2F;ˌɪndɪˈskrɪmɪnət&#x2F; | indiscriminately&#x2F;ˌɪn.dɪˈskrɪm.ə.nət.li&#x2F;</p><p>（尤指带来不良后果的）不加思考地，未加计划地，任意地</p><p>an indiscriminate terrorist attack on civilians</p><p>对平民肆意的恐怖袭击</p><p>The indiscriminate use of fertilizers can cause long-term problems.</p><p>滥用化肥可能导致长期的问题。</p><p>They fired indiscriminately into the crowd.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 08</title>
    <link href="/2024/03/28/Vocabulary-08/"/>
    <url>/2024/03/28/Vocabulary-08/</url>
    
    <content type="html"><![CDATA[<ol><li><p>plumber</p><p>管道工</p><p>When is the plumber coming to repair the burst pipe?</p><p>管道工什么时候来修理破裂的水管？</p><p>We’ll have to get a plumber in to look at that water tank.</p></li><li><p>jewelry</p><p>珠宝</p><p>a jewellery box</p><p>首饰盒</p></li><li><p>Internet celebrity&#x2F;səˈleb.rə.t̬i&#x2F; cyberstar 网红</p></li><li><p>sensation [senˈseɪʃn]</p><p>a burning sensation</p><p>灼烧的感觉</p><p>I had no sensation of pain whatsoever.</p><p>我没有任何痛苦的感觉。</p><p>The disease causes a loss of sensation in the fingers.</p><p>这种病会使手指失去知觉。</p><p>I had the odd sensation (that) someone was following me.</p><p>我有一种奇怪的感觉，觉得有人在跟踪我。</p><p>I can remember the first time I went sailing - it was a wonderful sensation.</p><p>我还记得第一次航海的时候——那种感觉真是太棒了。</p><p>Their affair caused a sensation.</p><p>他们的暧昧关系引起了轰动。</p><p>The books have been a publishing sensation on both sides of the Atlantic.</p><p>这些书在大西洋两岸的出版界都引起了轰动。</p><p>The show was <em>an overnight sensation</em> (&#x3D; was very successful immediately).</p><p>演出_一夜成名_。</p></li><li><p>recruiter</p><p>招聘人员</p><p>He worked as a military recruiter in Texas.</p><p>他在德克萨斯州担任征兵工作。</p><p>Recruiters target colleges and military bases in the region.</p><p>招聘人员针对该地区的大学和军事基地进行招聘。</p></li><li><p>cover letter 求职信</p></li><li><p>sexual orientation 性取向</p></li><li><p>visionary</p><p>a visionary author</p><p>有远见的作者</p><p>visionary thinking</p><p>前瞻性思维</p></li><li><p>ketchup</p><p>西红柿酱</p><p>Do you want some ketchup with your burger?</p><p>你的汉堡包要加些西红柿酱吗？</p></li><li><p>crispy or grilled 脆的还是烤的</p><p>grilled shrimp 烤虾</p></li><li><p>cosmetics</p><p>化妆品</p><p>We sell a wide range of cosmetics and <em>toiletries</em>&#x2F;ˈtɔɪ.lə.triz&#x2F; at a very reasonable price.</p><p>我们出售各种各样的化妆品和_洗漱用品_，价格公道。</p></li><li><p>lipstick 口红</p></li><li><p>mediocre&#x2F;ˌmiːdɪˈəʊkə&#x2F;</p><p>普通的，平庸的，不够好的</p><p>The film’s plot is predictable and the acting is mediocre.</p><p>这部影片的情节都能猜得到，演员的演技也不够好。</p><p>Parents don’t want their children going to mediocre schools.</p><p>家长不想让自己的孩子去上普普通通的学校。</p></li><li><p>autopilot</p><p>辅助驾驶</p><p>The plane was on autopilot when it crashed.</p><p>飞机坠毁时处于自动驾驶仪操作状态。</p></li><li><p>short-term and long-term</p><p>长期和短期</p><p>The Government has been implementing short-term and long-term economic plans for the development of the country.</p><p>政府正在实施短期和长期国家经济发展计划。</p></li><li><p>misrepresent</p><p>She accused her opponents of deliberately misrepresenting her as an extremist&#x2F;ɪkˈstriː.mɪst&#x2F;.</p><p>她指责对手故意诬陷她是极端分子。</p><p>I’ve grown used to my views being misrepresented in the press.</p><p>我已经对新闻界歪曲我的观点习以为常了。</p></li><li><p>hype</p><p>炒作</p><p>media hype 媒体炒作</p><p>There’s been a lot of hype around&#x2F;surrounding his latest film.</p><p>围绕他的最新影片进行了大规模的宣传。</p><p>I’ve been put off reading the book by all the hype.</p><p>所有的宣传炒作让我对这本书产生了反感。</p><p>It’s being hyped as the musical event of the year.</p><p>它正被炒作成年度音乐盛事。</p></li><li><p>conglomerate&#x2F;kənˈɡlɑː.mɚ.ət&#x2F;</p><p>联合大企业，企业集团</p><p>a property conglomerate with interests in property, hotels, restaurants and internet services.</p><p>一家房地产集团，业务涉及房地产、酒店、餐馆和互联网服务</p></li><li><p>multinational technology conglomerate 跨国科技集团</p></li><li><p>tycoon&#x2F;taɪˈkuːn&#x2F;</p><p>a business&#x2F;property&#x2F;shipping tycoon</p><p>商业／地产业／船业巨头</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 07</title>
    <link href="/2024/03/26/Vocabulary-07/"/>
    <url>/2024/03/26/Vocabulary-07/</url>
    
    <content type="html"><![CDATA[<ol><li><p>cognizant&#x2F;ˈkɑːɡ.nɪ.zənt&#x2F;</p><p>understanding or realizing something</p><p>We should be cognizant of the fact that every complaint is not a justified complaint.</p><p>我们应该认识到并非每一桩投诉都是合理的。</p></li><li><p>disease&#x2F;dɪˈziːz&#x2F;</p><p>病，疾病</p><p>a contagious&#x2F;kənˈteɪ.dʒəs&#x2F;&#x2F;infectious disease</p><p>传染病</p><p>a common&#x2F;rare&#x2F;incurable&#x2F;fatal disease</p><p>常见病／罕见疾病／绝症／致命疾病</p><p>They reported a sudden outbreak of the disease in the south of the country.</p><p>他们报告说该国南部地区突然爆发了这种疾病。</p><p>The first symptom of the disease is a very high temperature.</p><p>这种病的最初症状是高烧。</p><p>She has caught&#x2F;contracted (&#x3D; begun to have) a lung disease&#x2F;disease of the lungs.</p><p>她患上了肺病。</p><p>Starvation and disease have killed thousands of refugees&#x2F;ˌref.jʊˈdʒiː&#x2F;.</p><p>饥饿和疾病夺去了数千名难民的生命。</p><p>（人或社会的）恶疾，弊病</p><p>The real disease affecting the country is inflation.</p><p>影响该国的真正恶疾是通货膨胀。</p></li><li><p>contagious&#x2F;kənˈteɪ.dʒəs&#x2F;</p><p>（疾病）接触性传染的</p><p>The infection is highly contagious, so don’t let anyone else use your towel.</p><p>这种传染病极易传染，所以不要让别人用你的毛巾。</p><p>（人）患传染病的，带传染源的</p><p>Keep him out of school until he’s not contagious anymore.</p><p>在他不再传染前，别让他上学了。</p><p>（情感）具有感染力的，蔓延的</p><p>Fear is contagious.</p><p>恐惧是会传染的。</p></li><li><p>conscious&#x2F;ˈkɑːn.ʃəs&#x2F;</p><p>意识到；察觉到；感觉到</p><p>My tooth doesn’t exactly hurt, but I’m conscious of it all the time.</p><p>牙齿并不疼，可是我总觉得不舒服。</p><p>I think she’s very conscious of being the only person in the office who didn’t have a university education.</p><p>我想她对于自己是办公室里唯一没有受过大学教育的人这一点很敏感。</p><p>He gradually became conscious (of the fact) that everyone else was wearing a suit.</p><p>他渐渐意识到别的人都穿着西服。</p><p>有意识的；神志清醒的；有知觉的</p><p>He’s still conscious but he’s very badly injured.</p><p>他神志还清醒，但伤得很重。</p></li><li><p>fatal&#x2F;ˈfeɪ.t̬əl&#x2F;</p><p>致命的</p><p>This illness is fatal in almost all cases.</p><p>这种病几乎是不治之症。</p><p>the fatal shooting of an unarmed 15-year-old</p><p>对手无寸铁的 15 岁少年的致命枪击</p><p>灾难性的；毁灭性的</p><p>He made the fatal mistake&#x2F;error of believing what they told him.</p><p>他听信了他们的话，犯了致命的错误。</p></li><li><p>agility&#x2F;əˈdʒɪl.ə.t̬i&#x2F;</p><p>（身体）敏捷，灵活<br>He has the agility of a mountain goat.</p><p>他像山羊一样敏捷。</p><p>The acrobats&#x2F;ˈæk.rə.bæt&#x2F; display jawdropping&#x2F;ˈdʒɑːˌdrɑː.pɪŋ&#x2F; feats of strength, agility, and control.</p><p>杂技演员技艺展示了令人瞠目结舌的力量、敏捷性和控制力。</p><p>机敏，机灵，敏锐</p><p>This job requires considerable mental agility.</p><p>这项工作需要相当好的思维敏捷性。</p><p>We underestimate the agility of a child’s mind.</p><p>我们低估了孩子思维的敏捷性。</p><p>Business agility means a company is always in a position to take account of market changes.</p><p>商业上的敏捷意味着一个公司总是能够考虑到市场的变化。</p><p>Constant change is the new dynamic of the global economy, and makes agility even more necessary than ever.</p><p>不断的改变是全球经济的新动力，这使得灵活性比以往任何时候都更加必要。</p></li><li><p>feat&#x2F;fiːt&#x2F;</p><p>技艺；功绩；业绩；英勇事迹</p><p>The Eiffel Tower is a remarkable feat of engineering.</p><p>埃菲尔铁塔是工程技术上的一大非凡业绩。</p><p>She performed remarkable feats of organization for the company.</p><p>她为公司所做的组织工作业绩斐然。</p></li><li><p>applicability&#x2F;ˌæ.plɪk.əˈbɪl.ə.t̬i&#x2F; 适用性</p><p>applicable&#x2F;əˈplɪk.ə.bəl&#x2F;</p><p>生效的；适合的，适用的</p><p>This part of the law is only applicable to companies employing more than five people.</p><p>该法律这一部分条款仅适用于有 5 名以上雇员的公司。</p><p>The new qualifications are applicable to all European countries.</p><p>新的限定性条件适用于所有欧洲国家。</p></li><li><p>delegate</p><p>（尤指会议的）代表&#x2F;ˈdel.ə.ɡət&#x2F;</p><p>Delegates have voted in favour of the motion.</p><p>代表们对这项动议投了赞成票。</p><p>Each union elects several delegates to the annual conference.</p><p>每个工会选出数名代表参加年度大会。</p><p>委托&#x2F;ˈdel.ə.ɡeɪt&#x2F;</p><p>As a boss you have to delegate (responsibilities to your staff).</p><p>你作为老板必须要分派工作。</p><p>Authority to make financial decisions has been delegated to a special committee.</p><p>财政决策权已经交给一个特别委员会了。</p></li><li><p>transparently</p><p>透明地；显然地</p><p>What she said was transparently untrue.</p></li><li><p>notoriously &#x2F;noʊˈtɔːr.i.əs.li&#x2F;</p><p>臭名昭著地，声名狼藉地</p><p>The game is notoriously difficult to play.</p><p>这款游戏是出名地难玩。</p><p>He was involved in crime - most notoriously, a series of armed robberies.</p><p>他参与了犯罪活动——其中包括一系列武装抢劫案，这让他声名狼藉。</p></li><li><p>parental&#x2F;pəˈren.t̬əl&#x2F;</p><p>父母的</p><p>parental advice&#x2F;influence</p><p>父母的忠告／影响</p><p>The government repeatedly stressed its support for parental choice in the selection of a child’s school.</p><p>政府一再强调其支持父母在孩子择校问题上的选择。</p></li><li><p>immutable</p><p>永恒的；不可改变的</p><p>Some people regard grammar as an immutable set of rules.</p><p>有些人认为语法是一套不可更改的规则。</p></li><li><p>snippet&#x2F;ˈsnɪp.ɪt&#x2F;</p><p>一条，一则（新闻、消息或谈话）</p><p>I heard an interesting snippet on the radio this morning.</p><p>今天早上我从广播里听到了一则有趣的新闻。</p><p>I love listening to snippets of conversation in restaurants.</p><p>我喜欢在饭店里听一些谈话的片断。</p></li><li><p>simplicity 简单性</p><p>The advantage of the plan is its simplicity.</p><p>这项计划的优点是简单易行。</p><p>I prefer the second option - its advantages are simplicity and cheapness.</p></li><li><p>robustness&#x2F;roʊˈbʌst.nəs&#x2F;</p><p>健壮性</p><p>Doctors were amazed by his physical robustness.</p><p>医生们对他身体的强壮程度惊讶不已。</p><p>The robustness of the furniture makes it suitable for a playroom.</p><p>这件家具结实耐用，适合放在游戏室里。</p><p>She stressed the robustness of the Swiss banking system.</p><p>她强调了瑞士银行系统的稳健性。</p></li><li><p>misunderstand</p><p>If you think that these transport problems can be solved by building more roads, you completely misunderstand the nature of the problem.</p><p>如果你认为这些交通问题可以通过修更多的路来解决，你就完全曲解了问题的本质。</p><p>I told him I’d meet him here, but perhaps he misunderstood and went straight to the restaurant.</p><p>我告诉他我在这儿等他，但可能他理解错了，直接去了饭馆。</p></li><li><p>misunderstanding 误解</p><p>There must be some misunderstanding. I never asked for these chairs to be delivered.</p><p>一定是搞错了，我从来没有请人送这些椅子。</p><p>His ridiculous comments showed a complete misunderstanding of the situation.</p><p>他荒谬的评论显示他完全误解了形势。</p></li><li><p>maximize</p><p>Some airlines have cancelled less popular routes in an effort to maximize profits.</p><p>一些航空公司取消了不太受欢迎的航线以使利润最大化。</p></li><li><p>minimize</p><p>使降到最低限度；使减到最少</p><p>We must minimize the risk of infection.</p><p>我们必须将感染的风险降到最低。</p><p>Environmentalists are doing everything within their power to minimize the impact of the oil spill.</p><p>环境保护主义者正竭尽所能把石油外溢造成的影响减少到最低限度。</p><p>对…轻描淡写，有意淡化</p><p>She accused politicians of minimizing the suffering of thousands of people.</p><p>她指责政府对成千上万人的疾苦轻描淡写。</p><p>It’s important to focus on your strengths and to minimize your weaknesses.</p><p>扬长避短是很重要的。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 06</title>
    <link href="/2024/03/26/Vocabulary-06/"/>
    <url>/2024/03/26/Vocabulary-06/</url>
    
    <content type="html"><![CDATA[<ol><li><p>elderly | aged | senior</p><p>elderly relatives&#x2F;parents</p><p>年迈的亲戚／父母</p><p>The city is building new housing for the elderly.</p><p>这座城市正在为老年人修建新的住房。</p><p>She has two rather aged aunts.</p><p>她有两位年迈的姑姑。</p><p>The hospital was built to meet the needs of the aged.</p><p>这所医院是为了满足老年人的需要而建立的。</p><p>The more senior students are given some extra responsibilities.</p><p>年纪大一些的学生负起了更多的责任。</p></li><li><p>divorced</p><p>离婚的，离异的</p><p>They got divorced after only six months of marriage.</p><p>他们结婚 6 个月就离婚了。</p><p>Sometimes politicians seem to be divorced from reality.</p><p>有时候政治家似乎有些脱离现实。</p></li><li><p>reality</p><p>The reality of the situation is that unless we find some new funding soon, the youth centre will have to close.</p><p>现实情况是，如果我们不能马上再筹到一些资金，青少年中心就得关门。</p><p>He escaped from reality by going to the cinema every afternoon.</p><p>他每天下午都去电影院看电影，借此来逃避现实。</p><p>He seemed very young, but he was in reality (&#x3D; in fact) older than all of us.</p><p>他看上去很年轻，可实际上他比我们所有人年龄都大。</p><p>The book confronts the harsh social and political realities of the world today.</p><p>这本书直面当今世界残酷的社会和政治现实。</p><p>Her childhood ambition became a reality (&#x3D; happened in fact) when she was made a judge.</p><p>她被任命为法官，儿时的抱负终于成为了现实。</p></li><li><p>disgraced&#x2F;dɪsˈɡreɪst&#x2F;</p><p>a disgraced politician</p><p>一个不光彩的政治家</p><p>Any athlete caught cheating would be so disgraced, it wouldn’t be worth it.</p><p>任何被抓到作弊的运动员都会丢脸，不值得以身试法。</p></li><li><p>distinguished</p><p>杰出的，突出的，卓越的</p><p>a distinguished writer&#x2F;director&#x2F;politician</p><p>杰出的作家／导演／政治家</p><p>a distinguished career</p><p>非凡的职业生涯</p><p>（尤指长者）气度不凡的，高雅的，睿智的</p><p>I think grey hair on a man can look very distinguished.</p><p>我觉得灰白的头发能使男人看起来很睿智。</p></li><li><p>politician&#x2F;ˌpɑː.ləˈtɪʃ.ən&#x2F;</p><p>a distinguished&#x2F;disgraced politician</p><p>著名／失势的政治家</p></li><li><p>harsh</p><p>令人不快的；严酷的;（无端地）严厉的</p><p>harsh criticism</p><p>严厉的批评</p><p>The children had had a harsh upbringing.</p><p>孩子们的家教很严。</p><p>We thought the punishment was rather harsh for such a minor offence.</p><p>我们认为对这样的小错，这种惩罚太严酷了。</p><p>“There is no alternative,” she said in a harsh voice.</p><p>“没有选择的余地。”她用生硬的口气说道。</p><p>He said some harsh words about his brother.</p><p>他说了他兄弟一些难听的话。</p><p>too strong, bright, loud, etc.</p><p>harsh chemicals&#x2F;lighting</p><p>过于刺激的化学品／刺眼的光线</p></li><li><p>divorce</p><p>离婚</p><p>The last I heard they were getting a divorce.</p><p>上次我听说他们正在办理离婚手续。</p><p>Divorce is on the increase.</p><p>离婚呈上升趋势。</p><p>Ellie wants a divorce.</p><p>埃莉想离婚。</p><p>What are the chances of a marriage ending in divorce?</p><p>一桩婚姻以离婚而告终的几率有多大？</p><p>分离，分隔</p><p>Why is there such a divorce between the arts and the sciences in this country’s schools?</p><p>为什么在这个国家学校把艺术和科学完全割裂开来呢？</p><p>（与…）离婚</p><p>She’s divorcing her husband.</p><p>她正在和丈夫闹离婚。</p><p>割裂，分割（主题）</p><p>How can you divorce the issues of environmental protection and overpopulation?</p><p>你怎能把环境保护和人口过剩这两个议题割裂开来呢？</p></li><li><p>separate</p><p>各自的；单独的，不同的</p><p>The art department and the music department are in two separate buildings.</p><p>艺术系和音乐系在两座不同的大楼中。</p><p>I try to keep meat separate from other food in the fridge.</p><p>我尽量把肉同冰箱里的其他食物分开放。</p><p>I have my public life and my private life, and as far as possible I try to keep them separate.</p><p>我有自己的公众生活和私人生活，并尽可能使两者分开。</p><p>Three youths have been shot and killed in separate incidents this month.</p><p>这个月有 3 名年轻人在不同的事件中被枪杀。</p><p>（使）分离；（使）分开</p><p>The north and south of the country are separated by a mountain range.</p><p>这个国家的南北两部分被一条山脉隔开。</p><p>You can get a special device for separating egg whites from yolks.</p><p>你可以买一种把蛋白与蛋黄分开的专用器具。</p><p>The top and bottom sections are quite difficult to separate.</p><p>顶部和底部很难分开。</p><p>（使）分开；（使）分散</p><p>At school they always tried to separate Jane and me because we were troublemakers.</p><p>在学校里，他们总是设法把简和我分开，因为我们是捣蛋鬼。</p><p>Somehow, in the rush to get out of the building, I got separated from my mother.</p><p>急急忙忙冲出大楼的时候，不知怎么的，我和妈妈走散了。</p><p>Perhaps we should separate now and meet up later.</p><p>或许我们现在应该分开，晚些时候再见面。</p><p>分开考虑；认为（两者）不相关</p><p>You can’t separate morality from politics.</p><p>你不能把道德与政治分开考虑。</p><p>（夫妻）分居</p><p>My parents separated when I was six and divorced a couple of years later.</p><p>我 6 岁的时候父母分居，几年之后他们便离婚了。</p></li><li><p>cohabit&#x2F;koʊˈhæb.ɪt&#x2F;</p><p>（尤指未婚男女）同居</p><p>About 23 percent of men and women aged 25 to 34 told researchers they had previously cohabited with a partner without leading to marriage.</p><p>年龄在 25 至 34 岁之间的男女约有 23%的人告诉研究者，他们有过同居而最终没有结婚的经历。</p><p>cohabiting couples</p><p>同居伴侣</p></li><li><p>earn</p><p>挣（钱）；挣得；赚得</p><p>I earn $80,000 a year.</p><p>我一年挣 8 万美元。</p><p>How much do you earn, if you don’t mind me asking?</p><p>如果你不介意的话，能告诉我你挣多少钱吗？</p><p>You can’t expect to earn a living (&#x3D; be paid enough money to live on) from your painting.</p><p>你不能指望靠画画来维持生计。</p><p>Coffee exports earn Brazil many millions of dollars a year.</p><p>咖啡出口每年给巴西带来的收入达数百万美元。</p><p>应获得</p><p>It’s been a tough six months and I feel I’ve earned a few weeks off.</p><p>这半年可真是够辛苦的，我觉得我也该休息几周了。</p></li><li><p>break up | split up</p><p>Jenny and George have broken up.</p><p>珍妮和乔治已经分手了。</p><p>She split up with her boyfriend last week.</p><p>她上星期和男朋友分手了。</p></li><li><p>overpopulation</p><p>人口过多，人口过剩</p><p>Overpopulation is one of the country’s most pressing social problems.</p><p>人口过剩是该国最紧迫的社会问题之一。</p><p>People are dying because of overpopulation, poverty, and disease.</p><p>人们正在因为人口过剩、贫穷和疾病而死去。</p></li><li><p>poverty&#x2F;ˈpɑː.vɚ.t̬i&#x2F;</p><p>贫困，贫穷</p><p>Two million people in the city live in abject poverty.</p><p>这个城市有两百万人生活在赤贫中。</p><p>He emigrated to Australia to escape the grinding poverty of his birthplace.</p><p>他为了逃避出生地极为贫困的生活移民到了澳大利亚。</p><p>Helping to alleviate poverty in developing countries also helps to reduce environmental destruction.</p><p>帮助缓解发展中国家的贫困也有助于减少对环境的破坏。</p><p>There is a disappointing poverty of creativity in their work.</p><p>他们的工作缺乏创造性，令人失望。</p></li><li><p>abject&#x2F;ˈæb.dʒekt&#x2F;</p><p>They live in abject poverty.</p><p>他们过着赤贫的生活。</p><p>卑躬屈膝的；下贱的</p><p>an abject apology</p><p>低声下气的道歉</p><p>He is almost abject in his respect for his boss.</p><p>他对老板毕恭毕敬，近乎低三下四。</p></li><li><p>pressing | urgent</p><p>紧迫的，迫切的</p><p>a pressing need for housing</p><p>对住房的迫切需求</p><p>a pressing issue</p><p>紧迫的问题</p><p>The most pressing question is what do we do next?</p><p>最迫切的问题是接下来我们要做什么？</p><p>He’s got to sign that paper - will you tell him it’s urgent?</p><p>他务必要签署那份文件——请你告诉他这很紧急，好吗?</p><p>The most urgent thing in a fire is to make sure everyone is out of the building.</p><p>失火时最紧要的事是确保所有人都撤离大楼。</p><p>Many people are in urgent need of food and water.</p><p>很多人亟需食物和水。</p></li><li><p>environmental&#x2F;ɪnˌvaɪ.rənˈmen.t̬əl&#x2F;</p><p>People are becoming far more aware of environmental issues.</p><p>现在人们对环境问题的关注程度正明显提高。</p></li><li><p>yolk&#x2F;joʊk&#x2F;</p><p>蛋黄</p><p>I like eggs lightly cooked so that the yolk is still runny.</p><p>我喜欢煮得嫩些的鸡蛋，这样蛋黄还是溏心的。</p><p>Separate the yolks from the whites.</p><p>将蛋黄从蛋清中分离出来。</p></li><li><p>runny</p><p>水分过多的；稀的</p><p>The sauce looked runny so I added some more flour.</p><p>调味汁看上去太稀，所以我又加了些面粉。</p><p>（通常因为生病而）流鼻涕的</p><p>I’ve got a runny nose.</p><p>我今天老流鼻涕。</p></li><li><p>aware</p><p>意识到的；明白的；知道的</p><p>I wasn’t even aware that he was ill.</p><p>我都不知道他生病了。</p><p>Were you aware of the risks at the time?</p><p>你当时意识到危险了吗？</p><p>She was well (&#x3D; very) aware that he was married.</p><p>她很清楚他已结婚了。</p><p>I suddenly became aware of (&#x3D; started to notice) him looking at me.</p><p>我突然意识到他在看着我。</p><p>有…意识的</p><p>to be ecologically&#x2F;politically aware</p><p>有生态保护／政治意识</p><p>sexually aware</p><p>有性意识的</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 05</title>
    <link href="/2024/03/26/Vocabulary-05/"/>
    <url>/2024/03/26/Vocabulary-05/</url>
    
    <content type="html"><![CDATA[<ol><li><p>aim</p><p>目标，目的；意图</p><p>My main aim in life is to be a good husband and father.</p><p>我人生的主要目标是做一个好丈夫和好爸爸。</p><p>Our short-term aim is to deal with our current financial difficulties, but our long-term aim is to improve the company’s profitability.</p><p>我们的短期目标是解决当前的财政困难，但长远目标是提高公司的盈利水平。</p><p>The leaflet has been produced with the aim of increasing public awareness of the disease.</p><p>印发该传单的目的是为了提高公众对这种疾病的认识。</p><p>瞄准，对准</p><p>He fired six shots at the target, but his aim was terrible, and he missed all of them.</p><p>他朝靶子打了 6 枪，但是准头太差，一枪也没中靶。</p><p>She raised her gun, took aim and fired.</p><p>她举起了枪，瞄准开火。</p><p>打算，计划；想要</p><p>I aim to be a millionaire by the time I’m 35.</p><p>我打算到 35 岁时成为百万富翁。</p><p>We are aiming for a 50 percent share of the German market.</p><p>我们意图获取德国市场 50%的份额。</p><p>（使）瞄准，（使）对准</p><p>Aim (the arrow) a little above the target.</p><p>（将箭）瞄准目标稍高一些的地方。</p><p>Aim at the yellow circle.</p><p>瞄准黄圈。</p><p>There are hundreds of nuclear missiles aimed at the main cities.</p><p>数百枚核导弹瞄准了各主要城市。</p><p>Let’s aim for Coventry first, and then we’ll have a look at the map.</p><p>我们先往考文垂方向开，然后再看地图。</p></li><li><p>leaflet&#x2F;ˈliː.flət&#x2F;</p><p>传单，活页;（单页）广告</p><p>Demonstrators handed out leaflets to passers-by.</p><p>示威者向路人发放传单。</p><p>A leaflet about the new bus services came through the door today.</p><p>今天从门缝塞进来一张介绍公交车新增服务的广告。</p><p>散发，发放（传单或广告）</p><p>They leafleted the area two weeks before the event.</p><p>活动开始前两周他们就在该地区散发了广告。</p></li><li><p>positive&#x2F;ˈpɑː.zə.t̬ɪv&#x2F;</p><p>建设性的；积极的；怀有希望的</p><p>a positive attitude</p><p>乐观的态度</p><p>On a more positive note, we’re seeing signs that the housing market is picking up.</p><p>更乐观地说，我们看到了房地产市场正在好转的迹象。</p><p>The past ten years have seen some very positive developments in East-West relations.</p><p>在过去的 10 年中东西方关系有了一些非常积极的发展。</p><p>There was a very positive response to our new design - people seemed very pleased with it.</p><p>我们的新设计得到了非常积极的回应——看来人们对该产品非常满意。</p><p>有把握的，确信的，肯定的</p><p>Are you positive (that) you saw me switch the iron off?</p><p>你肯定你看到我关掉了熨斗的开关吗？</p><p>“Are you sure it’s okay for me to use your mother’s car?” “Positive.”</p><p>“你肯定我可以开你母亲的车？”“完全肯定。”</p><p>（医学检测）呈阳性的</p><p>a positive pregnancy test</p><p>呈阳性的妊娠检测</p><p>He’s HIV positive.</p><p>他艾滋病检测呈阳性。</p><p>She tested positive for hepatitis&#x2F;ˌhep.əˈtaɪ.t̬əs&#x2F;.</p><p>她肝炎检测呈阳性。</p><p>（数或量）正的</p><p>Two is a positive number.<br>2 是正数。</p><p>血液阳性的</p><p>My blood type is O positive.</p><p>我的血型是 O 型 Rh 因子呈阳性。</p></li><li><p>negative&#x2F;ˈneɡ.ə.t̬ɪv&#x2F;</p><p>否定的；拒绝的</p><p>We received a negative answer to our request.</p><p>我们的请求遭到了拒绝。</p><p>（句子或短语）否定的，否定式的</p><p>“I’ve never seen him in my life” is a negative sentence.</p><p>“我一生从未见过他”是个否定句。</p><p>“Don’t” and “do not” are negative forms of “do”.</p><p>don’t 和 do not 是 do 的否定形式。</p><p>负面的，消极的</p><p>a negative attitude</p><p>You’re so negative about everything!</p><p>坏的；有害的</p><p>The warm winter has had a very negative effect&#x2F;impact on the ski industry.</p><p>温暖的冬天对滑雪业有非常负面的影响。</p><p>（医学检验）结果为阴性的，结果为否定的</p><p>a negative pregnancy test</p><p>呈阴性的妊娠化验结果</p><p>The results of his HIV test were negative.</p><p>他的艾滋病病毒测试结果为阴性。</p><p>（数量）小于零的，负的</p><p>negative numbers</p><p>负数</p><p>血液阴性的</p><p>Her blood type is O negative.</p><p>她的血型是 O 型阴性。</p></li><li><p>affirmative&#x2F;əˈfɝː.mə.t̬ɪv&#x2F;</p><p>肯定的；同意的</p><p>an affirmative answer&#x2F;response</p><p>肯定的回答／答复</p><p>肯定词；肯定语</p><p>She asked the question expecting an affirmative.</p><p>她问这个问题是希望得到肯定的答复。</p><p>He replied in the affirmative.</p><p>他回答说是。</p><p>“Were you in New York on 3 March?” “Affirmative.” (&#x3D; “Yes.”)</p><p>“3 月 3 号你在纽约吗？”“是的。”</p></li><li><p>attitude</p><p>It’s often very difficult to change people’s attitudes.</p><p>人们对事情的看法通常很难改变。</p><p>She takes the attitude that children should be allowed to learn at their own pace.</p><p>在儿童学习步调快慢的问题上，她的态度是应顺其自然。</p><p>He has a very bad attitude towards work.</p><p>他的工作态度极差。</p><p>He seems to have undergone a change of attitude recently, and has become much more cooperative.</p><p>他的态度近来好像转变了，变得合作多了。</p></li><li><p>cooperative | uncooperative</p><p>I asked them to turn down their music, but they’re not being very cooperative.</p><p>我叫他们不要把音乐声放得这么大，可是他们不肯合作。</p><p>I thought he was rude and uncooperative.</p><p>我发现他这人粗鲁，不愿与人合作。</p></li><li><p>obliging&#x2F;əˈblaɪ.dʒɪŋ&#x2F; | disobliging | obligingly</p><p>willing or eager to help</p><p>He found an obliging doctor who gave him the drugs he needed.</p><p>他找到一位热心的医生，这位医生给了他所需要的药物。</p><p>Her dad obligingly drove her to the party.</p><p>她爸爸热心地开车送她去参加聚会。</p></li><li><p>bargain&#x2F;ˈbɑːr.ɡɪn&#x2F;</p><p>便宜货，廉价品</p><p>This coat was half-price - a real bargain.</p><p>这件大衣是半价买的——真便宜。</p><p>The airline regularly offers last-minute bookings at bargain prices.</p><p>航空公司定期提供最后时刻的低价订票服务。</p><p>The sales had started and the bargain hunters were out in force.</p><p>减价销售开始了，那些到处搜寻便宜货的人便倾巢出动。</p><p>协议；交易</p><p>“I’ll clean the kitchen if you clean the car.” “OK, it’s a bargain.”</p><p>“如果你洗车我就打扫厨房。”“好，就这么定了！”</p><p>The management and employees eventually struck&#x2F;made a bargain.</p><p>劳资双方最终达成了协议。</p><p>讨价还价（如价格，工资或工作条件等）</p><p>Unions bargain with employers for better rates of pay each year.</p><p>为了争取更高的薪酬，工会每年都要与资方进行谈判。</p></li><li><p>overhear&#x2F;ˌoʊ.vɚˈhɪr&#x2F;</p><p>无意中听到，偶然听到</p><p>I overheard a very funny conversation on the bus this morning.</p><p>今天早上我坐公共汽车时，无意中听到一段好笑的谈话。</p><p>He overheard his daughter telling her doll not to be so naughty.</p><p>他碰巧听到女儿对她的毛绒玩具说别那么淘气。</p><p>We overheard them say that they didn’t really like the food.</p><p>我们无意中听到他们说他们其实并不喜欢那些饭菜。</p></li><li><p>naughty&#x2F;ˈnɑː.t̬i&#x2F;</p><p>（儿童）淘气的，调皮的，不听话的</p><p>Now that’s naughty - don’t throw food on the floor!</p><p>真淘气——你不能把食物扔在地上！</p><p>Our boss treats us all like naughty children.</p><p>我们的老板把我们当成调皮的小学生来对待。</p></li><li><p>boxing&#x2F;ˈbɑːk.sɪŋ&#x2F;</p><p>拳击运动</p><p>Many doctors believe that boxing is too dangerous and should be banned.</p><p>许多医生认为拳击运动太危险，应该禁止。</p><p>He’s a former world heavyweight boxing champion.</p><p>他是一位前世界重量级拳王。</p></li><li><p>bother&#x2F;ˈbɑː.ðɚ&#x2F;</p><p>He hasn’t even bothered to write.</p><p>他甚至根本就没动笔。</p><p>You could have phoned us but you just didn’t bother.</p><p>你本可以给我们打电话的，可你就是懒得打。</p><p>Don’t bother making the bed - I’ll do it later.</p><p>不用麻烦你铺床——回头我来铺。</p><p>You’d have found it if you’d bothered looking&#x2F;to look.</p><p>如果你去找的话你早就找到了。</p><p>You won’t get any credit for doing it, so why bother?</p><p>你做这事不会受到任何赞扬的，为什么还要做呢？</p><p>使担心，使焦急；使烦恼</p><p>Does it bother you that he’s out so much of the time?</p><p>他出去了那么长时间，你不担心吗？</p><p>Living on my own has never bothered me.</p><p>独自生活从来没有让我感到担心。</p><p>I don’t care if he doesn’t come - it doesn’t bother me.</p><p>如果他不来我也不在乎——我无所谓。</p><p>It bothers me that he doesn’t seem to notice.</p><p>让我感到烦恼的是，他似乎没有注意到什么。</p><p>烦扰，打扰</p><p>Don’t bother your father when he’s working.</p><p>你父亲工作时不要打扰他。</p><p>I’m sorry to bother you, but could you help me lift this suitcase?</p><p>对不起打扰你了，你能帮我提一下这个行李箱吗？</p><p>I didn’t want to bother her with work matters on her day off.</p><p>我不想在她休假时还拿工作上的事烦她。</p><p>The noise was beginning to bother us, so we left.</p><p>噪音开始干扰我们，于是我们就离开了。</p><p>She threatened to call the police if he didn’t stop bothering her.</p><p>她威胁说如果他继续纠缠她，她就报警。</p><p>麻烦，烦恼；问题</p><p>I can take you there - it’s really no bother.</p><p>我可以带你去——一点都不麻烦。</p><p>Some people don’t get married because they don’t want the bother (&#x3D; they don’t want to make the effort that is necessary).、</p><p>有些人不结婚，因为他们不想找麻烦。</p></li><li><p>jeans&#x2F;dʒiːnz&#x2F;</p><p>jeans and a T-shirt</p><p>牛仔裤和 T 恤衫</p><p>I never wear jeans to work.</p><p>我从不穿牛仔裤上班。</p></li><li><p>sunglasses&#x2F;ˈsʌnˌɡlæs.ɪz&#x2F;</p><p>a pair of sunglasses</p><p>一副墨镜</p></li><li><p>clothes&#x2F;kloʊðz&#x2F;</p><p>衣服，衣物</p><p>She usually wears casual clothes.</p><p>她通常穿着很随意。</p><p>I’m just putting my clothes on.</p><p>我正打算把衣服穿上。</p><p>Take your clothes off and get in the bath.</p><p>脱下衣服进浴缸。</p><p>designer clothes</p><p>名牌服装</p><p>a clothes shop</p><p>服装店</p></li><li><p>pair</p><p>一对，一双</p><p>a pair of shoes&#x2F;gloves</p><p>一双鞋／一副手套</p><p>a pair of scissors&#x2F;glasses</p><p>一把剪刀／一副眼镜</p><p>I can’t find a matching pair of socks.</p><p>我找不到两只成对的袜子。</p><p>He packed two pairs of trousers and four shirts.</p><p>他把两条裤子和四件衬衣放进包里。</p><p>I’d like you to do this exercise in pairs (&#x3D; in groups of two).</p><p>我希望你们两人一组来做这个练习。</p><p>一对（配偶或合作伙伴）</p><p>They seem a very happy pair.</p><p>他们像是很幸福的一对。</p><p>a breeding pair</p><p>进行繁殖的一对</p><p>a mated pair of swans</p><p>一对天鹅</p><p>与…配对</p><p>Famous paintings have been paired with poems by Sandburg, Angelou, and others.</p><p>著名的油画作品与桑德伯格和安杰洛等人的诗配成对。</p></li><li><p>mate</p><p>an animal’s sexual partner</p><p>Peacocks use their beautiful tails to attract mates.</p><p>孔雀用美丽的尾巴来吸引配偶。</p><p>（使）交配</p><p>Tigers mate repeatedly over a period of several days.</p><p>老虎在几天里多次交配。</p><p>Mating a horse with a donkey produces a mule.</p><p>马和驴交配后生出骡子。</p></li><li><p>couple</p><p>The doctor said my leg should be better in a couple of days.</p><p>医生说我的腿过两天就会好转。</p><p>A couple of people objected to the proposal, but the vast majority approved of it.</p><p>有几个人反对该提议，但绝大多数人赞同。</p><p>We’ll have to wait another couple of hours for the paint to dry.</p><p>我们还得再等几个小时油漆才干。</p><p>Many economists expect unemployment to fall over the next couple of months.</p><p>许多经济学家预测在未来的几个月失业率将会下降。</p><p>I’m sorry I didn’t call you, but I’ve been very busy over the past couple of weeks.</p><p>很抱歉我没打电话给你，这几个星期我实在是太忙了。</p><p>a married couple</p><p>一对夫妻</p><p>An elderly couple lives next door.</p><p>一对老夫妻住在隔壁。</p><p>Should the government do more to help young couples buy their own homes?</p><p>政府应该更多地帮助年轻夫妇购买他们自己的住房吗？</p><p>连接；结合</p><p>The sleeping car and restaurant car were coupled together.</p><p>卧铺车厢和餐车挂在一起。</p><p>High inflation coupled with low output spells disaster for the government in the election.</p><p>低产出下的高通胀导致政府在选举中惨败。</p></li><li><p>married</p><p>已婚的</p><p>a married couple</p><p>一对夫妻</p><p>We’ve been happily married for five years.</p><p>我们已结婚 5 年，生活幸福。</p><p>Please state whether you are single, cohabiting, married, separated, divorced or widowed.</p><p>请说明你是单身、同居、已婚、分居、离异还是丧偶。</p><p>Smith was married with two children.</p><p>史密斯已婚，有两个孩子。</p><p>So how are you enjoying married life?</p><p>那你的婚后生活怎么样？</p><p>She had an affair with a married man.</p><p>她和一个有妇之夫有婚外情。</p><p>The survey reveals that two-thirds of married women earn less than their husbands.</p><p>调查显示 2&#x2F;3 的已婚妇女收入比丈夫低。</p><p>So how long have you been married to Nicky?</p><p>你和尼基结婚多久了？</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 04</title>
    <link href="/2024/03/25/Vocabulary-04/"/>
    <url>/2024/03/25/Vocabulary-04/</url>
    
    <content type="html"><![CDATA[<ol><li><p>tights&#x2F;taɪts&#x2F;</p><p>紧身裤，连裤袜</p><p>She bought a new pair of tights.</p><p>她买了一双新的连裤袜。</p><p>Oh no, I’ve got a ladder&#x2F;hole in my tights.</p><p>啊，糟了，我的连裤袜上有一处抽丝／一个洞。</p></li><li><p>success</p><p>The success of almost any project depends largely on its manager.</p><p>几乎所有项目的成功很大程度上都取决于管理者的能力。</p><p>I’ve been trying to persuade her to take on more people, but so far without success.</p><p>我一直在劝她再雇些人，不过到目前为止都没成功。</p><p>I’m not having much success in communicating with him at the moment.</p><p>目前我还没有联系上他。</p><p>The success rate for this operation is very low.</p><p>这种手术的成功率非常低。</p><p>Both films have been a big box-office success.</p><p>两部电影都获得了巨大的票房成功。</p></li><li><p>ladder</p><p>梯子</p><p>She was up a ladder, cleaning the window.</p><p>她站在梯子上擦窗子。</p><p>（职位晋升的）阶梯；（发展的）阶段</p><p>Once he started at Paramount in 1967, he moved rapidly up the corporate ladder.</p><p>1967 年他开始在派拉蒙电影公司工作，此后他在公司里升得很快。</p><p>（紧身裤袜或长筒袜的）抽丝，滑丝</p><p>（紧身衣、袜子）抽丝；被刮破</p><p>Damn! That’s the second pair of tights I’ve laddered today!</p><p>真该死！我今天换上的第二双长筒袜也刮破了。</p></li><li><p>corporate</p><p>公司的</p><p>corporate finance</p><p>公司财务</p><p>corporate executives</p><p>公司主管</p><p>全体的，集体的；共同的</p><p>All adults take corporate responsibility for the upbringing of the tribe’s children.</p><p>部落里所有成年人集体承担抚养孩子的责任。</p></li><li><p>upbringing&#x2F;ˈʌpˌbrɪŋ.ɪŋ&#x2F;</p><p>抚养，养育；教育，教养</p><p>Is it right to say all the crimes he committed were simply the result of his upbringing?</p><p>把他犯下的所有罪行都归罪于他所受到的教育，这样说对吗？</p></li><li><p>bring someone up</p><p>She was brought up by her grandmother.</p><p>她是她祖母养大的。</p><p>They brought her up (as&#x2F;to be) a Catholic.</p><p>他们把她从小培养成为天主教徒。</p><p>David was brought up to respect authority.</p><p>戴维从小就被教育要尊重权威。</p></li><li><p>bring something up</p><p>开始谈论；提出（话题）</p><p>She’s always bringing up her health problems.<br>她老是提她的健康问题。</p></li><li><p>catholic&#x2F;ˈkæθ.əl.ɪk&#x2F;</p><p>广泛的；包罗万象的</p><p>As a young person he had more catholic tastes than he does now.</p><p>他年轻的时候兴趣比现在要广泛得多。</p><p>天主教（徒）</p><p>Is he (a) Catholic?</p><p>他是天主教徒吗？</p><p>a Catholic school&#x2F;church</p><p>天主教学校／教堂</p></li><li><p>Catholicism&#x2F;kəˈθɑː.lə.sɪ.zəm&#x2F;</p><p>天主教</p><p>Catholicism is a global religion.</p><p>天主教是世界性的宗教。</p><p>She was raised as a Methodist and converted to Catholicism.</p><p>她小时候是循道宗信徒，后来改信天主教。</p></li><li><p>prevalence</p><p>流行，盛行；普遍，广泛</p><p>the prevalence of smoking among teenagers&#x2F;ˈtiːnˌeɪ.dʒɚ&#x2F;</p><p>青少年吸烟的普遍性</p><p>The prevalence of the disease is higher in some families.</p><p>在一些家庭中，该病的发病率较高。</p></li><li><p>prevalent</p><p>流行的，盛行的，普遍的</p><p>These diseases are more prevalent among young children.</p><p>这些疾病在幼儿中更普遍。</p><p>Trees are dying in areas where acid rain is most prevalent.</p><p>在酸雨非常严重的地区，树木正面临枯死。</p></li><li><p>teenager</p><p>（13 岁至 19 岁的）青少年</p><p>The magazine is aimed at teenagers and young adults.</p><p>这份杂志的读者对象是青少年和二十来岁的年轻人。</p></li><li><p>smoking</p><p>Smoking is not permi<strong>tt</strong>ed anywhere in this theatre.</p><p>The nicotine patches are designed to help people give up&#x2F;quit&#x2F;stop smoking.</p><p>尼古丁贴片旨在帮助人们戒烟。</p><p>20 years ago, a lot of restaurants didn’t even have no-non-smoking areas.</p><p>The connection between smoking and heart disease is well known.</p></li><li><p>convert</p><p>（使）改变，（使）转变&#x2F;kənˈvɝːt&#x2F;</p><p>Could we convert the small bedroom into a second bathroom?</p><p>我们能把这间小卧室改建成第二间浴室吗？</p><p>What’s the formula for converting pounds into kilograms?</p><p>把磅换算成公斤的公式是什么？</p><p>改变信仰（或态度）；归附，皈依</p><p>He converted to Catholicism when he got married.</p><p>他婚后皈依了天主教。</p><p>I used to hate exercise, but my sister has converted me (to it).</p><p>我以前不喜欢锻炼，但我姐姐改变了我。</p><p>I was sceptical about the changes but a year later, I’m completely converted.</p><p>我原本对这些变化持怀疑态度，但一年之后我彻底转变了观点。</p><p>改变信仰（或习惯、生活方式）的人&#x2F;ˈkɑːn.vɝːt&#x2F;</p><p>a Christian&#x2F;Buddhist&#x2F;ˈbʊd.ɪst&#x2F; convert</p><p>皈依基督教／佛教者</p><p>a convert to vegetarianism&#x2F;wholemeal bread</p><p>改食素食者／全麦面包者</p></li><li><p>achieve</p><p>（尤指经过努力）完成；达到；实现</p><p>The government’s training policy, he claimed, was achieving its objectives.</p><p>他称政府制定的培训方针即将达到预期目标。</p><p>She finally achieved her ambition to visit South America.</p><p>她终于实现了去南美洲旅游的梦想。</p><p>I’ve been working all day, but I feel as if I’ve achieved nothing.</p><p>我干了整整一天，但觉得好像什么都没有做成。</p></li><li><p>attain</p><p>实现；获得；赢得</p><p>He has attained the highest grade in his music exams.</p><p>他在音乐考试中得了最高分。</p><p>We need to identify the best ways of attaining our objectives&#x2F;goals.</p><p>我们需要确定达到目标的最佳办法。</p><p>India attained independence in 1947, after decades of struggle.</p><p>经过几十年的斗争，印度于 1947 年获得独立。</p></li><li><p>accomplish</p><p>完成；实现；达到；做到</p><p>The students accomplished the task in less than ten minutes.</p><p>学生们不到 10 分钟就完成了任务。</p><p>She accomplished such a lot during her visit.</p><p>她在访问期间取得了丰硕的成果。</p><p>I feel as if I’ve accomplished nothing since I left my job.</p><p>我觉得辞掉工作以后就一直在虚度光阴。</p></li><li><p>ambition</p><p>His ambition is ultimately to run his own business.</p><p>他的抱负是最终能够经营自己的公司。</p><p>He has already achieved his main ambition in life - to become wealthy.</p><p>他已经实现了他人生最大的志向——发财致富。</p><p>political ambitions</p><p>政治抱负</p><p>She doubts whether she’ll ever be able to fulfil her ambition.</p><p>究竟是否能够实现自己的理想，她没有把握。</p><p>I’ve always had a burning ambition to be a film director.</p><p>我一直有一个远大的志向，那就是做电影导演。</p><p>After his heart attack, he abandoned his ambition to become prime minister.</p><p>他心脏病发作以后，就放弃了要当首相的勃勃雄心。</p></li><li><p>aspiration</p><p>志向，抱负；渴望达到的目标</p><p>I’ve never had any political aspirations.</p><p>我从来就没什么政治抱负。</p><p>It’s a story about the lives and aspirations of poor Irish immigrants.</p><p>这个故事讲述了穷苦的爱尔兰移民的生活与抱负。</p></li><li><p>identify</p><p>认出，识别</p><p>Even the smallest baby can identify its mother by her voice.</p><p>就连年龄最小的婴儿也能根据声音分辨出自己的妈妈。</p><p>The gunman in Wednesday’s attack has been identified as Lee Giggs, an unemployed truck driver.</p><p>周三袭击事件中的枪手已被确认为李‧吉格斯，一个失业的卡车司机。</p><p>The police officer identified himself (&#x3D; gave his name or proved who he was) and asked for our help.</p><p>警官亮明身份并请求我们帮助。</p><p>确定；发现</p><p>The research will be used to identify training needs.</p><p>该研究将用来确定培训的需求。</p><p>You need to identify your priorities.</p><p>你需要确定自己优先要做的事情。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 03</title>
    <link href="/2024/03/25/Vocabulary-03/"/>
    <url>/2024/03/25/Vocabulary-03/</url>
    
    <content type="html"><![CDATA[<ol><li><p>transport</p><p>noun&#x2F;ˈtræn.spɔːrt&#x2F;</p><p>运输，运送，输送</p><p>the transport of live animals</p><p>活体动物的运输</p><p>The company will arrange transport from the airport.</p><p>公司将负责从机场开始的交通安排。</p><p>交通工具<br>the Department of Transport</p><p>交通部</p><p>investment in public transport</p><p>对公共交通的投资</p><p>Do you have your own transport (&#x3D; vehicle)?</p><p>你自己有车吗？</p><p>Bicycles are a cheap and efficient form&#x2F;means of transport.</p><p>自行车是一种便宜而高效的交通工具。</p><p>verb [ T ]&#x2F;trænˈspɔːrt&#x2F;</p><p>运输，运送，输送</p><p>The pipeline was constructed to transport oil across Alaska to ports on the coast.</p><p>建设这条输油管道是为了使石油能够穿越阿拉斯加输送到沿海各港口。</p><p>Such heavy items are expensive to transport (by plane).</p><p>这样重的物品（用飞机）运输很贵。</p></li><li><p>company&#x2F;ˈkʌm.pə.ni&#x2F;</p><p>He works for a software company.</p><p>It was a long trip and I was grateful for his company.</p><p>旅途漫漫，我感谢有他作伴。</p><p>I enjoy my own company (&#x3D; I like being alone).</p><p>我喜欢独处。</p><p>I travelled in the company of (&#x3D; with) two teachers as far as Istanbul.</p><p>我和两位老师结伴而行，一直到了伊斯坦布尔。</p><p>Margot came to stay for a week as company for my mother while I was away.</p><p>在我离家期间，玛戈到我家来住了 1 个星期，给我母亲作伴。</p><p>You’ll like Rosie - she’s good company.</p><p>你会喜欢罗茜的——她是个好伙伴。</p><p>I’ll keep you company till the train comes.</p><p>火车到来之前我会一直陪着你。</p></li><li><p>arrange&#x2F;əˈreɪndʒ&#x2F;</p><p>to plan, prepare for, or organize something</p><p>I’m trying to arrange my work so that I can have a couple of days off next week.</p><p>我正设法把工作安排好，以便下周能够休息两天。</p><p>The meeting has been arranged for Wednesday.</p><p>会议已经安排在了周三。<br>I’ve already arranged with him to meet at the cinema.</p><p>我已和他约好了在电影院见面。</p><p>She’s arranged for her son to have swimming lessons.</p><p>她已经安排她儿子去上游泳课了。</p><p>[ + that ] I’d deliberately arranged that they should arrive at the same time.</p><p>我特意安排好让他们同时到达。</p><p>to put a group of objects in a particular order</p><p>She arranged her birthday cards along the shelf.</p><p>她把生日贺卡在架子上摆成一排。</p><p>Who arranged these flowers so beautifully?</p><p>这花插得真漂亮，谁的手艺？</p><p>His books are neatly arranged in alphabetical order.</p><p>他的书都按照字母顺序排得整整齐齐。</p></li><li><p>Alaska&#x2F;əˈlæs.kə&#x2F;</p><p>a state in the northwestern US</p><p>阿拉斯加</p></li><li><p>coast&#x2F;koʊst&#x2F;</p><p>Rimini is a thriving resort on the east coast of Italy.</p><p>里米尼是意大利东海岸一个繁华的度假胜地。</p><p>The accident happened three miles off the coast.</p><p>事故发生在距离海岸 3 英里的海域。</p><p>We spent a week by&#x2F;on the coast.</p><p>我们在海滨度过了一个星期。</p></li><li><p>port</p><p>a naval&#x2F;fishing&#x2F;container port</p><p>军港／渔港／集装箱港</p><p>We had a good view of all the ships coming into&#x2F;leaving port.</p><p>所有进／出港的轮船我们都看得很清楚。</p></li><li><p>naval&#x2F;ˈneɪ.vəl&#x2F;</p><p>a naval officer</p><p>海军军官</p><p>naval forces</p><p>海军</p><p>a naval museum&#x2F;battle</p><p>海军博物馆／海战</p></li><li><p>airport&#x2F;ˈer.pɔːrt&#x2F;</p><p>an international airport</p><p>国际机场</p><p>a military airport</p><p>军用机场</p><p>Gatwick Airport</p><p>盖特威克机场</p><p>an airport terminal&#x2F;runway</p><p>机场候机大楼／跑道</p></li><li><p>manual</p><p>the manual sorting of letters</p><p>手工分拣信件</p><p>She tried to cure the pain in my knee by putting manual pressure on the joint.</p><p>她尝试用手按压我的膝关节来治疗我的膝盖痛。</p><p>He still works on an old manual typewriter.</p><p>他还在用一台老式手动打字机。</p><p>unskilled manual labour</p><p>无需技能的体力劳动</p><p>750 manual workers will lose their jobs as a result of company cutbacks.</p><p>750 名体力劳动者将因公司裁员而失业。</p><p>Computer-controlled robots are taking over manual jobs in many industries.</p><p>在许多行业中，体力工作正逐步由电脑控制的机器人代劳。</p><p>a DIY manual</p><p>“自己动手”指南</p><p>The computer comes with a 600-page instruction manual.</p><p>电脑附有一本 600 页的使用指南。</p></li><li><p>try</p><p>试图，想要；设法，努力</p><p>Keep trying and you’ll find a job eventually.</p><p>不断努力，你最终会找到工作的。</p><p>If I don’t get into the academy this year, I’ll try again next year.</p><p>如果今年进不了这所专科学校，我明年还会努力的。</p><p>I’ve tried really hard but I can’t convince him to come.</p><p>尽管我很努力地劝他，但他就是不来。</p><p>I’m trying my best, but I just can’t do it.</p><p>我在尽最大努力，可就是做不来。</p><p>试；试用；尝试；试验</p><p>I tried that recipe you gave me last night.</p><p>We don’t sell newspapers - have you tried the coffee shop on the corner?</p><p>Try using a different shampoo&#x2F;ʃæmˈpuː&#x2F;.</p><p>试着用一下另一种洗发香波。</p><p>I’d like to try parachuting.</p><p>我想我可能会尝试一下跳伞。</p><p>I forgot my door-keys - we’d better try the window (&#x3D; test it to see if it is open).</p><p>审理，审讯，审判</p><p>They are being tried for murder.</p><p>他们因谋杀正在被审讯。</p><p>They might still have tickets left - why don’t you give it a try?</p><p>他们可能还有剩余的票——你为什么不试试呢？</p><p>This will be her third try at jumping the bar.</p><p>这将是她第三次尝试跳过横杆。</p><p>You could ask him if he’s willing - it’s worth a try.</p><p>你可以问他是否愿意——这值得一试。</p></li><li><p>cure</p><p>治愈，治好</p><p>At one time doctors couldn’t cure TB.</p><p>医生曾经无法治愈肺结核.</p><p>解决（问题）</p><p>The president and his advisors meet this week to discuss how to cure inflation.</p><p>总统这星期要跟顾问见面讨论如何解决通货膨胀问题。</p><p>药物；治疗方法</p><p>There’s still no cure for cancer.</p><p>还没有能治愈癌症的方法。</p><p>The disease has no known cure.</p><p>这种病还找不到一种有效的治疗方法。</p><p>解决方法</p><p>The best cure for boredom is hard work!</p><p>消除无聊最有效的方法是努力工作！</p></li><li><p>boredom | tedium</p><p>乏味；无聊；单调乏味</p><p>They started quarrelling out of sheer boredom.</p><p>他们开始吵架完全是出于无聊。</p><p>Soldiers often say that the worst thing about fighting is not the moments of terror, but all the hours of tedium in between.</p><p>士兵们常说，打仗最糟糕的不是感到恐惧的时刻，而是打仗间歇漫长而无聊的时光。</p></li><li><p>sheer</p><p>完全的，彻底的</p><p>The suggestion is sheer nonsense.</p><p>这个建议纯粹是胡言乱语。</p><p>His success was due to sheer willpower&#x2F;determination.</p><p>他的成功全靠自己的意志力／决心。</p><p>It was sheer coincidence that we met.</p><p>我们的相遇纯属巧合。</p><p>陡峭的</p><p>a sheer mountain side</p><p>陡峭的山坡</p><p>（织物等）极薄的，透明的</p><p>sheer nylon tights</p><p>透明尼龙连裤袜</p><p>She wore a dress of the sheerest silk.</p><p>她穿了一条薄如蝉翼的丝绸连衣裙。</p></li><li><p>coincidence</p><p>巧合，碰巧的事</p><p>You chose exactly the same wallpaper as us - what a coincidence!</p><p>你选的壁纸跟我们的一模一样——真巧！</p><p>Is it just a coincidence that the wife of the man who ran the competition won first prize?</p><p>赢得头等奖的人是竞赛组织者的老婆，这难道仅仅是巧合吗？</p><p>偶然的机遇，运气</p><p>Just by coincidence, I met my old schoolmate again 50 years later.</p><p>纯粹是碰巧了，我在 50 年后又遇到了我的老同学。</p><p>[ + that ] It was pure&#x2F;sheer coincidence that I remembered his phone number.</p><p>我记住他的电话号码纯属偶然。</p></li><li><p>willpower&#x2F;ˈwɪl.paʊ.ɚ&#x2F; | determination</p><p>意志力；毅力</p><p>It took a lot of willpower to stay calm.</p><p>要有很强的意志力才能保持平静。</p><p>I don’t have the willpower to diet.</p><p>我没有节食的毅力。</p></li><li><p>nonsense&#x2F;ˈnɑːn.sens&#x2F;</p><p>This report is nonsense and nothing but a waste of paper.</p><p>这份报告一派胡言，纯粹是浪费纸张。</p><p>The accusations are (absolute&#x2F;complete&#x2F;utter) nonsense.</p><p>这些指控纯属子虚乌有。</p><p>Don’t talk nonsense! She’s far too ill to return to work!</p><p>别胡说！她病得太重了，根本没法回去上班！</p><p>You mustn’t upset your sister with any more nonsense about ghosts.</p><p>不准你再讲那些鬼啊怪啊的胡言乱语来吓唬你妹妹。</p></li><li><p>suggestion&#x2F;səˈdʒes.tʃən&#x2F;</p><p>I don’t know what to wear tonight - do you have any suggestions?</p><p>我不知道今晚该穿什么——你有什么建议吗？</p><p>She made some very helpful suggestions but her boss rejected them all.</p><p>她提了些很有帮助的建议，但被她的老板全部否定了。</p><p>They didn’t like my suggestion that we should all share the cost.</p><p>他们不喜欢我提出的费用分摊的建议。</p></li><li><p>hint</p><p>暗示，提示，示意</p><p>He’s dropped (&#x3D; given) several hints to the boss that he’ll quit if he doesn’t get a promotion.</p><p>他已经向老板暗示了好几次，如果不获得升职他就会辞职。</p><p>Did she give you any hints about where she was going?</p><p>她有没有向你暗示过她要去哪里呢？</p><p>You can’t take (&#x3D; understand) a hint, can you? Just go away and leave me alone!</p><p>你就是听不懂暗示，对不对？滚开，不要烦我！</p><p>建议</p><p>Could you give us a hint about how to do this exercise, please?</p><p>你能不能给我们一些关于如何做这个练习的建议？</p><p>This recipe book is full of handy (&#x3D; useful) hints.</p><p>这本烹饪书中有很多有用的建议。</p><p>暗示</p><p>Mum’s hinted (that) she might pay for my trip to Mexico.</p><p>妈妈暗示她或许可以资助我的墨西哥之行。</p><p>He’s hinted at the possibility of moving to Canada.</p><p>他暗示过有可能移居加拿大。</p></li><li><p>implication</p><p>暗指，暗示</p><p>From what she said, the implication was that they were splitting up.</p><p>她的话中暗示他们将要分手。</p><p>She accused the party and, by implication, its leader too.</p><p>她指责了该政党，也含蓄地指责了该党的领袖。</p><p>可能的影响；可能的后果</p><p>The company is cutting back its spending and I wonder what the implications will be for our department.</p><p>公司正在削减开支，真不知道这将会对我们部门产生什么影响。</p><p>What are the implications of the new law?</p><p>这部新法意味着什么呢？</p></li><li><p>cutback</p><p>（为省钱而进行的）削减，裁减，减少</p><p>The closure of the Manchester printing factory is the company’s biggest single cutback so far.</p><p>关闭曼彻斯特印刷厂是该公司到目前为止规模最大的一次性裁员。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 02</title>
    <link href="/2024/03/25/Vocabulary-02/"/>
    <url>/2024/03/25/Vocabulary-02/</url>
    
    <content type="html"><![CDATA[<ol><li><p>tutor&#x2F;ˈtuː.t̬ɚ&#x2F;</p><p>家庭教师，私人教师</p><p>His parents got him a tutor to help with his maths.</p><p>他的父母请了一位私人教师来辅导他的数学。</p><p>During my illness I was taught by a series of <strong>home tutors</strong>.</p><p>生病期间有一系列的<strong>家庭教师</strong>给我作辅导。</p></li><li><p>accuse</p><p>He’s been accused of robbery&#x2F;murder.</p><p>他被指控犯有抢劫／谋杀罪。</p><p>Are you accusing me of lying?</p><p>你是在指责我撒谎吗？</p><p>The surgeon was accused of negligence&#x2F;ˈneɡ.lə.dʒəns&#x2F;.</p><p>这名外科医生被控玩忽职守。</p></li><li><p>robbery</p><p>The gang admi<strong>tt</strong>ed they had commi<strong>tt</strong>ed four recent bank robberies.</p><p>这个犯罪团伙承认最近发生的 4 起银行抢劫案是他们干的。</p><p>He was charged with robbery and assault.</p><p>他被控抢劫及袭击他人。</p></li><li><p>gang</p><p>Fights among rival gangs account for most murders in the city.</p><p>这座城市中，绝大多数凶杀案件都是敌对团伙之间的斗殴引起的。</p></li><li><p>assault</p><p>He was charged with sexual assault.</p><p>他被指控性侵犯。</p><p>The number of indecent assaults has increased alarmingly over the past year.</p><p>在过去的一年中，强暴猥亵案件数量的增长令人震惊。</p><p>an assault on a police officer</p><p>袭击警察</p><p>They launched an assault on the capital yesterday.</p><p>昨天他们对首都发起了进攻。</p><p>A woman and a man have been convicted of assaulting a police officer.</p><p>一名女子和一名男子被判袭警罪名成立。</p><p>He had attempted to sexually assault the woman.</p><p>他试图对该妇女进行性侵犯。</p></li><li><p>indecent&#x2F;ɪnˈdiː.sənt&#x2F;</p><p>下流的，有伤风化的;（尤指）猥亵的</p><p>an indecent act&#x2F;photograph</p><p>有伤风化的行为／照片</p><p>She accused him of making indecent suggestions to her.</p><p>她指控他曾向自己作过下流暗示。</p></li><li><p>convict</p><p>He has twice been convicted of robbery&#x2F;arson.</p><p>他两次被判犯有抢劫罪／纵火罪。</p><p>an escaped convict&#x2F;ˈkɑːn.vɪkt&#x2F;</p><p>逃犯</p></li><li><p>difficult</p><p>a difficult problem&#x2F;choice&#x2F;task&#x2F;language</p><p>难题／艰难的选择／艰巨的任务／难学的语言</p><p>It will be very difficult to prove that they are guilty.</p><p>证明他们有罪将非常困难。</p><p>Many things make it difficult for women to reach the top in US business.</p><p>有很多因素使女性难以进入美国商界的上层。</p><p>It is extremely difficult being a single parent.</p><p>单亲家长生活非常艰辛。</p><p>The manager is difficult to deal with.</p><p>His wife is a very difficult woman.</p></li><li><p>sexually</p><p>She’s fun to be with, but I don’t find her sexually attractive.</p><p>和她在一起很有趣，但在性方面她对我没有吸引力。</p></li><li><p>feature v&#x2F;n</p><p>特色，特征，特点</p><p>The town’s main features are its beautiful mosque&#x2F;mɑːsk&#x2F; and ancient marketplace.</p><p>漂亮的清真寺和古老的集市是该镇的主要特色。</p><p>Our latest model of phone has several new features.</p><p>我们最新款的电话机型有几个新特点。</p><p>A unique feature of these rock shelters was that they were dry.</p><p>这些可供栖身的岩洞的一个独特之处在于它们是干燥的。</p><p>（建筑物的）外部特征;地形</p><p>a geographical feature</p><p>地理特征</p><p>This tour includes the area’s best-known natural features, including the Gullfoss waterfall.</p><p>本次旅行的线路包括了该地区最知名的自然景观，其中就有居德瀑布。</p><p>以…为特色；给…以显著的地位</p><p>The movie features James Dean as a disaffected&#x2F;ˌdɪs.əˈfek.tɪd&#x2F; teenager.</p><p>这部电影由詹姆斯‧迪安饰演一个心怀不满的少年。</p><p>This week’s broadcast features a report on victims of domestic violence.</p><p>本周广播节目里有一则关于家庭暴力受害者的特别报道。</p><p>It’s an Australian company whose logo features a red kangaroo.</p><p>这是一家澳大利亚公司，其标志是一只红色袋鼠。</p></li><li><p>compulsory 强制性的</p><p>Swimming was compulsory at my school.</p><p>在我们学校，游泳是必修课。</p><p>The law made wearing seat belts in cars compulsory.</p><p>坐车系安全带是法律强制规定的。</p></li><li><p>charge</p><p>How much do you charge for a <strong>haircut and blow-dry</strong>?</p><p><strong>剪发和吹风</strong>要收多少钱？<br>The bank charged commission to change my traveller’s cheques.</p><p>银行兑现我的旅行支票收取了手续费。</p><p>They charge you $20 just to get in the nightclub.</p><p>进夜总会的门他们就收你 20 美元。</p><p>The local museum doesn’t charge for admission.</p><p>当地博物馆不收门票费。</p><p>Charge the bill to my account, please.</p><p>请把账单记在我账上。</p><p>She’s been charged with murder.</p><p>她被控谋杀。</p><p>She is charged with murdering her husband.</p><p>她被指控谋害了自己的丈夫。</p><p>The bull lowered its horns and charged.</p><p>公牛俯下牛角发动进攻。</p><p>The violence began when the police charged (at) a crowd of demonstrators.</p><p>当警察冲向一群示威者时，暴力冲突开始了。</p><p>She drove the car round the block to charge (up) its batteries.</p><p>为了给电池充电她开车围着街区转。</p><p>It’s not working - I don’t think the battery is charging.</p><p>Is there a charge for children or do they go free?</p><p>小孩要收费还是免费？</p><p>There’s an admission charge of £5.</p><p>要收 5 英镑的入场费。</p><p>They fixed my watch free of charge.</p><p>他们免费修好了我的手表。</p><p>The 19-year-old will be appearing in court on Thursday where she will face criminal charges.</p><p>这位 19 岁的少女将于周四出庭，她将面临刑事指控。</p><p>He has been arrested on a charge of murder.</p><p>他因被控谋杀而遭逮捕。</p><p>Who will be in charge of the department when Sophie leaves?</p><p>索菲离开后，谁来管理这个部门？</p><p>I left Jack in charge of the suitcases while I went to get the tickets.</p><p>我去买票时让杰克看着箱子。</p><p>His boss asked him to take charge of the office for a few days while she was away.</p><p>老板让他在她离开的这段时间负责办公室工作。</p></li><li><p>pick someone&#x2F;something up</p><p>If she starts to cry, pick her up and give her a cuddle.</p><p>如果她哭了的话，把她抱起来搂一搂。</p><p>I picked up the kids’ clothes that were lying on the floor.</p><p>我把地板上孩子们的衣服捡了起来。</p><p>I went to pick up the phone&#x2F;receiver, but it had stopped ringing.</p><p>我去接电话，但已经不响了。</p><p>to collect, or to go and get, someone or something</p><p>When you’re in town could you pick up the books I ordered?</p><p>你进城时能帮我取一下我订购的书吗？</p><p>Whose turn is it to pick the children up after school?</p><p>该谁去接孩子放学了？<br>The crew of the sinking tanker were picked up by helicopter.</p><p>即将沉没的油轮上的船员被直升机救了上来。</p><p>to learn a new skill or language by practising it rather than being taught it</p><p>Don’t bother with the computer manual - you’ll pick it up as you go along.</p><p>别费神看计算机手册了——练练就会了。</p><p>When you live in a country you soon pick up the language.</p><p>如果你住在某个国家的话，很快就能学会该国的语言。</p><p>The nurse had picked up the information from a conversation she overheard.</p><p>护士是从偶然听到的谈话中得知这一消息的。</p><p>to start something again after an interruption</p><p>The author picks the same theme up again on page ten.</p><p>作者在第 10 页又谈到同一主题。</p><p>Let’s pick up where we left off yesterday.</p><p>我们接着昨天的话题谈下去吧。</p><p>to answer the phone</p><p>I tried his home number but he didn’t pick up.</p><p>我拨打他家里电话，但他没接。</p></li><li><p>cuddle&#x2F;ˈkʌd.əl&#x2F; verb [ I or T ]</p><p>They sat in the back row of the cinema kissing and cuddling.</p><p>他们坐在影院后排，接吻搂抱。</p></li><li><p>receiver&#x2F;rɪˈsiː.vɚ&#x2F; noun [ C ]</p><p>She picked up the receiver and dialled his number.</p><p>她拿起电话拨了他的号码。</p></li><li><p>hang up</p><p>He started shouting so I hung up (on him).</p><p>他开始大喊大叫，我就挂断了电话。</p><p>Let me speak to Melanie before you hang up.</p><p>在你挂电话之前让我和梅拉妮说几句话。</p></li><li><p>sexual&#x2F;ˈsek.sjʊəl&#x2F;</p><p>Most people remember their first sexual experience.</p><p>大多数人都记得他们的第一次性经历。</p><p>a sexual relationship</p><p>性关系</p><p>sexual assault&#x2F;harassment</p><p>性侵犯／性骚扰</p><p>sexual intercourse (&#x3D; the act of having sex)</p><p>性交</p><p>sexual orientation&#x2F;preference</p><p>性倾向</p><p>She campaigned tirelessly for sexual equality.</p><p>Sexual equality will not be achieved until there is more provision for childcare.</p><p>只有提供更多的幼儿保育服务，才会实现男女平等。</p><p>Some steps have been taken towards ending sexual discrimination.</p><p>已经采取了一些措施来消除性别歧视。</p></li><li><p>experience&#x2F;ɪkˈspɪr.i.əns&#x2F;</p><p>Do you have any experience of working with kids?</p><p>你有照看孩子的工作经验吗？</p><p>The best way to learn is by experience.</p><p>最好的学习方式是在实践中学习。</p><p>I know from experience that Tony never keeps his promises.</p><p>经验告诉我，托尼从不会信守诺言。</p><p>I don’t think she has the experience for the job.</p><p>我认为做这种工作她经验不足。</p><p>In my experience, people generally smile back if you smile at them.</p><p>据我的经验，如果你对别人微笑，他们一般也会对你微笑的。</p><p>The experience of pain varies from one person to another.</p><p>对疼痛的感觉因人而异。</p><p>I had a pretty unpleasant experience at the dentist’s.</p><p>我看牙医有一次很不愉快的经历。</p><p>It was interesting hearing about his experiences as a policeman.</p><p>听他讲当警察时的那些经历很有意思。</p><p>I did meet him once and it was an experience I shall never forget.</p><p>我的确跟他见过一面，那是我永生难忘的一段经历。</p><p>We experienced a lot of difficulty in selling our house.</p><p>我们卖房子几经周折。</p><p>New companies often experience a loss in their first few years.</p><p>新公司在刚起步的几年中经常亏损。</p><p>It was the worst pain I’d ever experienced.</p><p>那是我一辈子经受过的最剧烈的疼痛。</p></li><li><p>vary&#x2F;ˈver.i&#x2F; verb [ I or T ]</p><p>Salary scales vary between states&#x2F;from state to state.</p><p>工资高低各州／州与州都不同。</p><p>The samples varied in quality but were generally acceptable.</p><p>这些样品质量有差异，但是大体上可以接受。</p><p>We have tried several different approaches, with varying degrees of success.</p><p>我们尝试过不同的方法，成功率也不同。</p><p>My taste in classical music varies greatly&#x2F;widely, but I usually prefer Mozart or Brahms.</p><p>我对各种古典音乐的喜好程度很不相同，但我通常比较喜欢莫扎特或勃拉姆斯的音乐。</p><p>Some people give a regular monthly donation while others vary the amount they give.</p><p>有些人每月捐赠固定数目的钱款，而有些人每月捐赠的数额多少不一。</p></li><li><p>generally&#x2F;ˈdʒen.ə r.əl.i&#x2F;</p><p>大体上，总体上</p><p>Your health is generally good, but you do have a few minor problems.</p><p>总的来说你身体状况不错，但有些小毛病。</p><p>He wants more money to be given to the arts generally.</p><p>他希望各艺术门类都能得到更多的资金。</p><p>I shall now develop my previous point more generally.</p><p>现在我将就上一点展开更加全面的论述。</p><p>通常，一般地，大多数情况下</p><p>The baby generally wakes up three times during the night.</p><p>通常这个婴儿会在夜间醒 3 次。</p><p>Well, generally speaking, it’s quicker on public transport.</p><p>这个嘛，大多数情况下，乘坐公共交通工具要快得多。</p><p>普遍地，广泛地</p><p>It was generally believed at the time that both men were guilty.</p><p>当时普遍认为这两名男子都有罪。</p><p>The proposal has received a generally favourable reaction.</p><p>人们对这项提议的反应是普遍赞成。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Generics, Inheritance, and Subtypes</title>
    <link href="/2024/03/18/Generics-Inheritance-and-Subtypes/"/>
    <url>/2024/03/18/Generics-Inheritance-and-Subtypes/</url>
    
    <content type="html"><![CDATA[<p>As you already know, it is possible to assign an object of one type to an object of another type provided that the types are compatible. For example, you can assign an Integer to an Object, since Object is one of Integer’s supertypes:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">someObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">someInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>);<br>someObject = someInteger;   <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><p>在面向对象的术语中，这称为“是”关系。由于 Integer 是 Object 的一种，因此允许赋值。但 Integer 也是 Number 的一种，因此以下代码也是有效的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">someMethod</span><span class="hljs-params">(Number n)</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><br>someMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>));   <span class="hljs-comment">// OK</span><br>someMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">10.1</span>));   <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><p>The same is also true with generics. You can perform a generic type invocation, passing Number as its type argument, and any subsequent invocation of add will be allowed if the argument is compatible with Number:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Box&lt;Number&gt; box = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;Number&gt;();<br>box.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>));   <span class="hljs-comment">// OK</span><br>box.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">10.1</span>));  <span class="hljs-comment">// OK</span><br></code></pre></td></tr></table></figure><p>Now consider the following method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">boxTest</span><span class="hljs-params">(Box&lt;Number&gt; n)</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><p>What type of argument does it accept? By looking at its signature, you can see that it accepts a single argument whose type is <code>Box&lt;Number&gt;</code>. But what does that mean? Are you allowed to pass in <code>Box&lt;Integer&gt;</code> or <code>Box&lt;Double&gt;</code>, as you might expect? The answer is “no”, because <code>Box&lt;Integer&gt;</code> and <code>Box&lt;Double&gt;</code> are not subtypes of <code>Box&lt;Number&gt;</code>.</p><p><img src="https://docs.oracle.com/javase/tutorial/figures/java/generics-subtypeRelationship.gif" alt="Generics, Inheritance, and Subtypes"></p><blockquote><p>Given two concrete types A and B (for example, Number and Integer), <code>MyClass&lt;A&gt;</code> has no relationship to <code>MyClass&lt;B&gt;</code>, regardless of whether or not A and B are related. The common parent of <code>MyClass&lt;A&gt;</code> and <code>MyClass&lt;B&gt;</code> is Object.</p></blockquote><h2 id="Generic-Classes-and-Subtyping"><a href="#Generic-Classes-and-Subtyping" class="headerlink" title="Generic Classes and Subtyping"></a>Generic Classes and Subtyping</h2><p>You can subtype a generic class or interface by extending or implementing it. The relationship between the type parameters of one class or interface and the type parameters of another are determined by the extends and implements clauses.</p><p>Using the Collections classes as an example, <code>ArrayList&lt;E&gt;</code> implements <code>List&lt;E&gt;</code>, and <code>List&lt;E&gt;</code> extends <code>Collection&lt;E&gt;</code>. So <code>ArrayList&lt;String&gt;</code> is a subtype of <code>List&lt;String&gt;</code>, which is a subtype of <code>Collection&lt;String&gt;</code>. So long as you do not vary the type argument, the subtyping relationship is preserved between the types.</p><p><img src="https://docs.oracle.com/javase/tutorial/figures/java/generics-sampleHierarchy.gif" alt="A sample Collections hierarchy"></p><p>Now imagine we want to define our own list interface, PayloadList, that associates an optional value of generic type <code>P</code> with each element. Its declaration might look like:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">PayloadList</span>&lt;E,P&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">List</span>&lt;E&gt; &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPayload</span><span class="hljs-params">(<span class="hljs-type">int</span> index, P val)</span>;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>The following parameterizations of PayloadList are subtypes of <code>List&lt;String&gt;</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">PayloadList&lt;String,String&gt;<br>PayloadList&lt;String,Integer&gt;<br>PayloadList&lt;String,Exception&gt;<br></code></pre></td></tr></table></figure><p><img src="https://docs.oracle.com/javase/tutorial/figures/java/generics-payloadListHierarchy.gif" alt="A sample PayloadList hierarchy"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Generics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bounded Type Parameters</title>
    <link href="/2024/03/18/Bounded-Type-Parameters/"/>
    <url>/2024/03/18/Bounded-Type-Parameters/</url>
    
    <content type="html"><![CDATA[<p>There may be times when you want to restrict the types that can be used as type arguments in a parameterized type. For example, a method that operates on numbers might only want to accept instances of Number or its subclasses. This is what bounded type parameters are for.</p><p>To declare a bounded type parameter, list the type parameter’s name, followed by the extends keyword, followed by its upper bound. Note that, in this context, extends is used in a general sense to mean either “extends” (as in classes) or “implements” (as in interfaces).</p><h2 id="Multiple-Bounds"><a href="#Multiple-Bounds" class="headerlink" title="Multiple Bounds"></a>Multiple Bounds</h2><p>类型参数可以具有多个边界：</p><p><code>&lt;T extends B1 &amp; B2 &amp; B3&gt;</code></p><p>A type variable with multiple bounds is a subtype of all the types listed in the bound. If one of the bounds is a class, it must be specified first. For example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Class A &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">C</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &amp; B &amp; C&gt; &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="Generic-Methods-and-Bounded-Type-Parameters"><a href="#Generic-Methods-and-Bounded-Type-Parameters" class="headerlink" title="Generic Methods and Bounded Type Parameters"></a>Generic Methods and Bounded Type Parameters</h2><p>Bounded type parameters are key to the implementation of generic algorithms. Consider the following method that counts the number of elements in an array T[] that are greater than a specified element elem.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">int</span> <span class="hljs-title function_">countGreaterThan</span><span class="hljs-params">(T[] anArray, T elem)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (T e : anArray)<br>        <span class="hljs-keyword">if</span> (e &gt; elem)  <span class="hljs-comment">// compiler error</span><br>            ++count;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>The implementation of the method is straightforward, but it does not compile because the greater than operator (&gt;) applies only to primitive types such as short, int, double, long, float, byte, and char. You cannot use the &gt; operator to compare objects. To fix the problem, use a type parameter bounded by the <code>Comparable&lt;T&gt;</code> interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(T o)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>The resulting code will be:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;&gt; <span class="hljs-type">int</span> <span class="hljs-title function_">countGreaterThan</span><span class="hljs-params">(T[] anArray, T elem)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (T e : anArray)<br>        <span class="hljs-keyword">if</span> (e.compareTo(elem) &gt; <span class="hljs-number">0</span>)<br>            ++count;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Generics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Generic Methods</title>
    <link href="/2024/03/18/Generic-Methods/"/>
    <url>/2024/03/18/Generic-Methods/</url>
    
    <content type="html"><![CDATA[<p>Generic methods are methods that introduce their own type parameters. This is similar to declaring a generic type, but the type parameter’s scope is limited to the method where it is declared. Static and non-static generic methods are allowed, as well as generic class constructors.</p><p>The syntax for a generic method includes a list of type parameters, inside angle brackets, which appears before the method’s return type. For static generic methods, the type parameter section must appear before the method’s return type.</p><p>The Util class includes a generic method, compare, which compares two <code>Pair</code> objects:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Util</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K, V&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Pair&lt;K, V&gt; p1, Pair&lt;K, V&gt; p2)</span> &#123;<br>        <span class="hljs-keyword">return</span> p1.getKey().equals(p2.getKey()) &amp;&amp;<br>               p1.getValue().equals(p2.getValue());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;K, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> K key;<br>    <span class="hljs-keyword">private</span> V value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(K key)</span> &#123; <span class="hljs-built_in">this</span>.key = key; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(V value)</span> &#123; <span class="hljs-built_in">this</span>.value = value; &#125;<br>    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>   &#123; <span class="hljs-keyword">return</span> key; &#125;<br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> value; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>The complete syntax for invoking this method would be:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Pair&lt;Integer, String&gt; p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;apple&quot;</span>);<br>Pair&lt;Integer, String&gt; p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;pear&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">same</span> <span class="hljs-operator">=</span> Util.&lt;Integer, String&gt;compare(p1, p2);<br></code></pre></td></tr></table></figure><p>The type has been explicitly provided, as shown in bold. Generally, this can be left out and the compiler will infer the type that is needed:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Pair&lt;Integer, String&gt; p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;apple&quot;</span>);<br>Pair&lt;Integer, String&gt; p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;pear&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">same</span> <span class="hljs-operator">=</span> Util.compare(p1, p2);<br></code></pre></td></tr></table></figure><p>This feature, known as <strong>type inference（类型推断）</strong>, allows you to invoke a generic method as an ordinary method, without specifying a type between angle brackets.</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Generics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Generic Types</title>
    <link href="/2024/03/18/Generic-Types/"/>
    <url>/2024/03/18/Generic-Types/</url>
    
    <content type="html"><![CDATA[<p>A generic type is a generic class or interface that is parameterized over types. The following Box class will be modified to demonstrate the concept.</p><h2 id="A-Simple-Box-Class"><a href="#A-Simple-Box-Class" class="headerlink" title="A Simple Box Class"></a>A Simple Box Class</h2><p>Begin by examining a non-generic Box class that operates on objects of any type. It needs only to provide two methods: set, which adds an object to the box, and get, which retrieves it:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123;<br>    <span class="hljs-keyword">private</span> Object object;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(Object object)</span> &#123; <span class="hljs-built_in">this</span>.object = object; &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> object; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Since its methods accept or return an Object, you are free to pass in whatever you want, provided that it is not one of the primitive types. There is no way to verify, at compile time, how the class is used. One part of the code may place an Integer in the box and expect to get Integers out of it, while another part of the code may mistakenly pass in a String, resulting in a runtime error.</p><h2 id="A-Generic-Version-of-the-Box-Class"><a href="#A-Generic-Version-of-the-Box-Class" class="headerlink" title="A Generic Version of the Box Class"></a>A Generic Version of the Box Class</h2><p>泛型类按以下格式定义：</p><p><code>class name&lt;T1, T2, ..., Tn&gt; &#123; /* ... */ &#125;</code></p><p>The type parameter section, delimited by angle brackets (&lt;&gt;), follows the class name. It specifies the type parameters (also called type variables) T1, T2, …, and Tn.</p><p>将泛型参数应用于 <code>Box</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Generic version of the Box class.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; the type of the value being boxed</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123;<br>    <span class="hljs-comment">// T stands for &quot;Type&quot;</span><br>    <span class="hljs-keyword">private</span> T t;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T t)</span> &#123; <span class="hljs-built_in">this</span>.t = t; &#125;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> t; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>As you can see, all occurrences of Object are replaced by T. A type variable can be any <strong>non-primitive</strong> type you specify: any class type, any interface type, any array type, or even another type variable.</p><p>同样的技术可用于创建通用接口。</p><h2 id="Type-Parameter-Naming-Conventions"><a href="#Type-Parameter-Naming-Conventions" class="headerlink" title="Type Parameter Naming Conventions"></a>Type Parameter Naming Conventions</h2><p>按照约定，类型参数名称是单个大写字母。</p><p>最常用的类型参数名称是：</p><ul><li>E - Element (used extensively by the Java CollectionsFramework)</li><li>E - Element</li><li>K - Key</li><li>N - Number</li><li>T - Type</li><li>V - Value</li></ul><h2 id="Invoking-and-Instantiating-a-Generic-Type"><a href="#Invoking-and-Instantiating-a-Generic-Type" class="headerlink" title="Invoking and Instantiating a Generic Type"></a>Invoking and Instantiating a Generic Type</h2><p>要从代码中引用泛型 <code>Box</code> 类，必须执行泛型类型调用，它将 <code>T</code> 替换为一些具体值，例如 <code>Integer</code> ：</p><p><code>Box&lt;Integer&gt; integerBox;</code></p><p>可以将泛型类型调用视为与普通方法调用类似，但不是将参数传递给方法，而是将类型参数（在本例中为 Integer ）传递给 Box 类本身。</p><p>Type Parameter and Type Argument Terminology: Many developers use the terms “type parameter” and “type argument” interchangeably, but these terms are not the same. When coding, one provides type arguments in order to create a parameterized type. Therefore, the <code>T</code> in <code>Foo&lt;T&gt;</code> is a type parameter and the <code>String</code> in <code>Foo&lt;String&gt; f</code> is a type argument.</p><p>Like any other variable declaration, this code does not actually create a new Box object. It simply declares that integerBox will hold a reference to a “Box of Integer”, which is how <code>Box&lt;Integer&gt;</code> is read.</p><p>An invocation of a generic type is generally known as a parameterized type.</p><p>To instantiate this class, use the new keyword, as usual, but place <code>&lt;Integer&gt;</code> between the class name and the parenthesis:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Box&lt;Integer&gt; integerBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;Integer&gt;();<br></code></pre></td></tr></table></figure><h2 id="The-Diamond"><a href="#The-Diamond" class="headerlink" title="The Diamond"></a>The Diamond</h2><p>In Java SE 7 and later, you can replace the type arguments required to invoke the constructor of a generic class with an empty set of type arguments (&lt;&gt;) as long as the compiler can determine, or infer, the type arguments from the context. This pair of angle brackets, &lt;&gt;, is informally called the diamond. For example, you can create an instance of <code>Box&lt;Integer&gt;</code> with the following statement:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Box&lt;Integer&gt; integerBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h2 id="Multiple-Type-Parameters"><a href="#Multiple-Type-Parameters" class="headerlink" title="Multiple Type Parameters"></a>Multiple Type Parameters</h2><p>如前所述，泛型类可以有多个类型参数（type parameters）。例如，通用 <code>OrderedPair</code> 类，它实现通用 <code>Pair</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Pair</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderedPair</span>&lt;K, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Pair</span>&lt;K, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> K key;<br>    <span class="hljs-keyword">private</span> V value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderedPair</span><span class="hljs-params">(K key, V value)</span> &#123;<br>      <span class="hljs-built_in">this</span>.key = key;<br>      <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> key; &#125;<br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> value; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下语句创建 <code>OrderedPair</code> 类的两个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Pair&lt;String, Integer&gt; p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedPair</span>&lt;&gt;(<span class="hljs-string">&quot;Even&quot;</span>, <span class="hljs-number">8</span>);<br>Pair&lt;String, String&gt;  p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedPair</span>&lt;&gt;(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br></code></pre></td></tr></table></figure><p>代码 <code>new OrderedPair&lt;String, Integer&gt;</code> 将 <code>K</code> 实例化为 <code>String</code> ，将 <code>V</code> 实例化为 <code>Integer</code> 。因此，<code>OrderedPair</code> 构造函数的参数类型分别为 <code>String</code> 和 <code>Integer</code> 。</p><p>要创建通用接口，遵循与创建通用类相同的约定。</p><h2 id="Parameterized-Types"><a href="#Parameterized-Types" class="headerlink" title="Parameterized Types"></a>Parameterized Types</h2><p>You can also substitute a type parameter (that is, <code>K</code> or <code>V</code>) with a parameterized type (that is, <code>List&lt;String&gt;</code>). For example, using the <code>OrderedPair&lt;K, V&gt;</code> example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">OrderedPair&lt;String, Box&lt;Integer&gt;&gt; p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedPair</span>&lt;&gt;(<span class="hljs-string">&quot;primes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;Integer&gt;(...));<br></code></pre></td></tr></table></figure><h2 id="Raw-Types"><a href="#Raw-Types" class="headerlink" title="Raw Types"></a>Raw Types</h2><p>A raw type is the name of a generic class or interface without any type arguments. For example, given the generic Box class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T t)</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>To create a parameterized type of <code>Box&lt;T&gt;</code>, you supply an actual type argument for the formal type parameter <code>T</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Box&lt;Integer&gt; intBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p>If the actual type argument is omitted, you create a raw type of <code>Box&lt;T&gt;</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Box</span> <span class="hljs-variable">rawBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>();<br></code></pre></td></tr></table></figure><p>Therefore, Box is the raw type of the generic type <code>Box&lt;T&gt;</code>. However, a non-generic class or interface type is not a raw type.</p><p>Raw types show up in legacy code because lots of API classes (such as the Collections classes) were not generic prior to JDK 5.0. When using raw types, you essentially get pre-generics behavior — a <code>Box</code> gives you Objects. For backward compatibility, assigning a parameterized type to its raw type is allowed:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Box&lt;String&gt; stringBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br><span class="hljs-type">Box</span> <span class="hljs-variable">rawBox</span> <span class="hljs-operator">=</span> stringBox;<br></code></pre></td></tr></table></figure><p>But if you assign a raw type to a parameterized type, you get a warning:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Box</span> <span class="hljs-variable">rawBox</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>();           <span class="hljs-comment">// rawBox is a raw type of Box&lt;T&gt;</span><br>Box&lt;Integer&gt; intBox = rawBox;     <span class="hljs-comment">// warning: unchecked conversion</span><br></code></pre></td></tr></table></figure><p>You also get a warning if you use a raw type to invoke generic methods defined in the corresponding generic type:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Box&lt;String&gt; stringBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br><span class="hljs-type">Box</span> <span class="hljs-variable">rawBox</span> <span class="hljs-operator">=</span> stringBox;<br>rawBox.set(<span class="hljs-number">8</span>);  <span class="hljs-comment">// warning: unchecked invocation to set(T)</span><br></code></pre></td></tr></table></figure><p>The warning shows that raw types bypass generic type checks, deferring the catch of unsafe code to runtime. Therefore, you should avoid using raw types.</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Generics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Why Use Generics?</title>
    <link href="/2024/03/18/Why-Use-Generics/"/>
    <url>/2024/03/18/Why-Use-Generics/</url>
    
    <content type="html"><![CDATA[<p>简而言之，泛型使类型（类和接口）能够在定义类、接口和方法时成为参数。与方法声明中使用的更熟悉的形式参数非常相似，类型参数提供了一种通过不同输入重复使用相同代码的方法。区别在于形式参数的输入是值，而类型参数的输入是类型。</p><p>使用泛型的代码比非泛型代码有很多好处：</p><ul><li><p>编译时更强的类型检查。</p><p>Java 编译器对泛型代码应用强类型检查，如果代码违反类型安全，则会发出错误。修复编译时错误比修复运行时错误更容易，后者很难发现。</p></li><li><p>消除类型转换</p><p>以下没有泛型的代码片段需要强制转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (String) list.get(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>当重写为使用泛型时，代码不需要转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);   <span class="hljs-comment">// no cast</span><br></code></pre></td></tr></table></figure></li><li><p>使程序员能够实现通用算法。</p><p>通过使用泛型，程序员可以实现适用于不同类型集合的泛型算法，可以自定义，并且类型安全且更易于阅读。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Generics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Annotations</title>
    <link href="/2024/03/18/Java-Annotations/"/>
    <url>/2024/03/18/Java-Annotations/</url>
    
    <content type="html"><![CDATA[<p>Annotations, a form of metadata, provide data about a program that is not part of the program itself. Annotations have no direct effect on the operation of the code they annotate.</p><p>Annotations have a number of uses, among them:</p><ul><li>Information for the compiler — Annotations can be used by the compiler to detect errors or suppress warnings.</li><li>Compile-time and deployment-time processing — Software tools can process annotation information to generate code, XML files, and so forth.</li><li>Runtime processing — Some annotations are available to be examined at runtime.</li></ul><h2 id="Annotations-Basics"><a href="#Annotations-Basics" class="headerlink" title="Annotations Basics"></a>Annotations Basics</h2><h3 id="The-Format-of-an-Annotation"><a href="#The-Format-of-an-Annotation" class="headerlink" title="The Format of an Annotation"></a>The Format of an Annotation</h3><p>最简单的注解形式如下所示：</p><p><code>@Entity</code></p><p>at 符号字符 ( @ ) 向编译器指示后面的内容是注解。</p><p>注解可以包含元素，这些元素可以命名或未命名，并且这些元素有值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Author(</span><br><span class="hljs-meta">   name = &quot;Benjamin Franklin&quot;,</span><br><span class="hljs-meta">   date = &quot;3/27/2003&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">@注解(value = <span class="hljs-string">&quot;unchecked&quot;</span>)<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">myMethod</span><span class="hljs-params">()</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>如果只有一个名为 value 的元素，则可以省略该名称，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">@注解(<span class="hljs-string">&quot;unchecked&quot;</span>)<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">myMethod</span><span class="hljs-params">()</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>如果注解没有元素，则可以省略括号，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">mySuperMethod</span><span class="hljs-params">()</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>也可以在同一个声明上使用多个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Author(name = &quot;Jane Doe&quot;)</span><br><span class="hljs-meta">@EBook</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>如果声明的注解是相同的类型，则这称为重复注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Author(name = &quot;Jane Doe&quot;)</span><br><span class="hljs-meta">@Author(name = &quot;John Smith&quot;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><blockquote><p>从 Java SE 8 版本开始支持可重复注解（Repeating Annotations）。</p></blockquote><p>注解类型可以是 Java SE API 的 java.lang 或 java.lang.annotation 包中定义的类型之一。在前面的示例中， Override 和 注解 是预定义的 Java 注解。也可以定义自己的注解类型。</p><h3 id="Where-Annotations-Can-Be-Used"><a href="#Where-Annotations-Can-Be-Used" class="headerlink" title="Where Annotations Can Be Used"></a>Where Annotations Can Be Used</h3><p>注解可以应用于声明：类、字段、方法和其他程序元素的声明。当在声明中使用时，按照惯例，每个注解通常出现在自己的行上。</p><p>从 Java SE 8 版本开始，注解也可以应用于类型的使用。</p><ul><li><p>Class instance creation expression:</p><p><code>new @Interned MyObject();</code></p></li><li><p>Type cast:</p><p><code>myString = (@NonNull String) str;</code></p></li><li><p>implements clause:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnmodifiableList</span>&lt;T&gt; implements<br><span class="hljs-meta">@Readonly</span> List&lt;<span class="hljs-meta">@Readonly</span> T&gt; &#123; ... &#125;<br></code></pre></td></tr></table></figure></li><li><p>Thrown exception declaration:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">monitorTemperature</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span><br>      <span class="hljs-meta">@Critical</span> TemperatureException &#123; ... &#125;<br></code></pre></td></tr></table></figure></li></ul><p>这种形式的注解称为类型注解。</p><h2 id="Declaring-an-Annotation-Type"><a href="#Declaring-an-Annotation-Type" class="headerlink" title="Declaring an Annotation Type"></a>Declaring an Annotation Type</h2><p>许多注解取代了代码中的注释。</p><p>Suppose that a software group traditionally starts the body of every class with comments providing important information:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generation3List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Generation2List</span> &#123;<br><br>   <span class="hljs-comment">// Author: John Doe</span><br>   <span class="hljs-comment">// Date: 3/17/2002</span><br>   <span class="hljs-comment">// Current revision: 6</span><br>   <span class="hljs-comment">// Last modified: 4/12/2004</span><br>   <span class="hljs-comment">// By: Jane Doe</span><br>   <span class="hljs-comment">// Reviewers: Alice, Bill, Cindy</span><br><br>   <span class="hljs-comment">// class code goes here</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>To add this same metadata with an annotation, you must first define the annotation type.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@interface</span> ClassPreamble &#123;<br>   String <span class="hljs-title function_">author</span><span class="hljs-params">()</span>;<br>   String <span class="hljs-title function_">date</span><span class="hljs-params">()</span>;<br>   <span class="hljs-type">int</span> <span class="hljs-title function_">currentRevision</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>;<br>   String <span class="hljs-title function_">lastModified</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;N/A&quot;</span>;<br>   String <span class="hljs-title function_">lastModifiedBy</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;N/A&quot;</span>;<br>   <span class="hljs-comment">// Note use of array</span><br>   String[] reviewers();<br>&#125;<br></code></pre></td></tr></table></figure><p>The body of the previous annotation definition contains annotation type element declarations, which look a lot like methods. Note that they can define optional default values.</p><p>After the annotation type is defined, you can use annotations of that type, with the values filled in, like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ClassPreamble</span> (<br>   author = <span class="hljs-string">&quot;John Doe&quot;</span>,<br>   date = <span class="hljs-string">&quot;3/17/2002&quot;</span>,<br>   currentRevision = <span class="hljs-number">6</span>,<br>   lastModified = <span class="hljs-string">&quot;4/12/2004&quot;</span>,<br>   lastModifiedBy = <span class="hljs-string">&quot;Jane Doe&quot;</span>,<br>   <span class="hljs-comment">// Note array notation</span><br>   reviewers = &#123;<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Cindy&quot;</span>&#125;<br>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generation3List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Generation2List</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Predefined-Annotation-Types"><a href="#Predefined-Annotation-Types" class="headerlink" title="Predefined Annotation Types"></a>Predefined Annotation Types</h2><p>Java SE API 中预定义了一组注解类型。一些注解类型由 Java 编译器使用，一些注解类型适用于其他注解。</p><h3 id="Annotation-Types-Used-by-the-Java-Language"><a href="#Annotation-Types-Used-by-the-Java-Language" class="headerlink" title="Annotation Types Used by the Java Language"></a>Annotation Types Used by the Java Language</h3><p>java.lang 中定义的预定义注解类型是 <code>@Deprecated</code> 、 <code>@Override</code> 和 <code>@注解</code> 。</p><p><code>@Deprecated</code> 注解表示标记的元素已被弃用，不应再使用。每当程序使用带有 <code>@Deprecated</code> 注解的方法、类或字段时，编译器都会生成警告。当某个元素被弃用时，还应该使用 Javadoc @deprecated 标记对其进行记录，如以下示例所示。在 Javadoc 注释和注解中使用 at 符号 ( @ ) 并非巧合：它们在概念上是相关的。另请注意，Javadoc 标记以小写 d 开头，注解以大写 D 开头。</p><p><code>@Override</code> 注解通知编译器该元素将覆盖超类中声明的元素。</p><p>虽然重写方法时不需要使用此注解，但它有助于防止错误。如果标有 <code>@Override</code> 的方法无法正确重写其超类之一中的方法，编译器会生成错误。</p><p><code>@SuppressWarnings</code> 注解告诉编译器抑制否则会生成的特定警告。在以下示例中，使用了不推荐（<code>@Deprecated</code>）使用的方法，编译器通常会生成警告。然而，在这种情况下，注解会导致警告被抑制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// use a deprecated method and tell</span><br><span class="hljs-comment">// compiler not to generate a warning</span><br><span class="hljs-meta">@SuppressWarnings(&quot;deprecation&quot;)</span><br> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useDeprecatedMethod</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-comment">// deprecation warning</span><br>     <span class="hljs-comment">// - suppressed</span><br>     objectOne.deprecatedMethod();<br> &#125;<br></code></pre></td></tr></table></figure><p>每个编译器警告都属于一个类别。 Java 语言规范列出了两个类别： deprecation 和 unchecked 。当与泛型出现之前编写的遗留代码交互时，可能会出现 unchecked 警告。要抑制多个类别的警告，使用以下语法：</p><p><code>@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;deprecation&quot;&#125;)</code></p><p><code>@SafeVarargs</code> 注解应用于方法或构造函数时，断言代码不会对其 varargs 参数执行潜在的不安全操作。使用此注解类型时，将抑制与 varargs 使用相关的未经检查的警告。</p><p>Java SE 8 中引入的 @FunctionalInterface @FunctionalInterface 注解表明类型声明旨在成为 Java 语言规范所定义的函数式接口。</p><h3 id="Annotations-That-Apply-to-Other-Annotations"><a href="#Annotations-That-Apply-to-Other-Annotations" class="headerlink" title="Annotations That Apply to Other Annotations"></a>Annotations That Apply to Other Annotations</h3><p>应用于其它注解的注解被称为元注解（meta-annotations）。java.lang.annotation 中定义了多种元注解类型。</p><p><code>@Retention</code> 注解指定了标记的注解如何存储（保留的生命周期）：</p><ul><li><p><code>RetentionPolicy.SOURCE</code> – 标记的注解仅保留在源代码级别，并被编译器忽略。</p></li><li><p><code>RetentionPolicy.CLASS</code> – 标记的注解在编译时由编译器保留，但被 Java 虚拟机 (JVM) 忽略。</p></li><li><p><code>RetentionPolicy.RUNTIME</code> – 标记的注解由 JVM 保留，以便运行时环境可以通过反射机制使用。</p></li></ul><p><code>@Documented</code> 注解指示每当使用指定注解时，应使用 Javadoc 工具记录这些元素。</p><p><code>@Target</code> 注解标记了另一个注解，以限制该注解可以应用于哪种 Java 元素。目标注解指定以下元素类型之一作为其值：</p><ul><li><code>ElementType.ANNOTATION_TYPE</code> can be applied to an annotation type.</li><li><code>ElementType.CONSTRUCTOR</code> can be applied to a constructor.</li><li><code>ElementType.FIELD</code> can be applied to a field or property.</li><li><code>ElementType.LOCAL_VARIABLE</code> can be applied to a local variable.</li><li><code>ElementType.METHOD</code> can be applied to a method-level annotation.</li><li><code>ElementType.PACKAGE</code> can be applied to a package declaration.</li><li><code>ElementType.PARAMETER</code> can be applied to the parameters of a method.</li><li><code>ElementType.TYPE</code> can be applied to any element of a class.</li></ul><p><code>@Inherited</code> 注解表示该注解类型可以从超类继承。 （默认情况下并非如此。）</p><p><code>@Repeatable</code> 注解是 Java SE 8 中引入的，表示标记的注解可以多次应用于同一声明或类型使用。</p><h2 id="Repeating-Annotations"><a href="#Repeating-Annotations" class="headerlink" title="Repeating Annotations"></a>Repeating Annotations</h2><p>例如，正在编写代码来使用计时器服务，该服务能够在给定时间或按特定计划运行方法，类似于 UNIX cron 服务。现在，想要设置一个计时器来在每月的最后一天和每个星期五晚上 11:00 运行方法 doPeriodicCleanup 。要设置计时器运行，请创建 <code>@Schedule</code> 注解并将其应用到 doPeriodicCleanup 方法两次。第一次使用指定该月的最后一天，第二次指定星期五晚上 11 点，如以下代码示例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Schedule(dayOfMonth=&quot;last&quot;)</span><br><span class="hljs-meta">@Schedule(dayOfWeek=&quot;Fri&quot;, hour=&quot;23&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPeriodicCleanup</span><span class="hljs-params">()</span> &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>出于兼容性原因，重复注解存储在 Java 编译器自动生成的容器注解中。为了让编译器执行此操作，代码中需要两个声明。</p><h3 id="Step-1-Declare-a-Repeatable-Annotation-Type"><a href="#Step-1-Declare-a-Repeatable-Annotation-Type" class="headerlink" title="Step 1: Declare a Repeatable Annotation Type"></a>Step 1: Declare a Repeatable Annotation Type</h3><p>注解类型必须使用 <code>@Repeatable</code> 元注解进行标记。以下示例定义了自定义 <code>@Schedule</code> 可重复注解类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Repeatable;<br><br><span class="hljs-meta">@Repeatable(Schedules.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Schedule &#123;<br>  String <span class="hljs-title function_">dayOfMonth</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;first&quot;</span>;<br>  String <span class="hljs-title function_">dayOfWeek</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;Mon&quot;</span>;<br>  <span class="hljs-type">int</span> <span class="hljs-title function_">hour</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">12</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>括号中的 <code>@Repeatable</code> 元注解的值是 Java 编译器生成的用于存储重复注解的容器注解的类型。在此示例中，包含注解类型（containing annotation type）为 <code>Schedules</code> ，因此重复的 <code>@Schedule</code> 注解存储在 <code>@Schedules</code> 注释中。</p><p>将相同的注解应用于声明而不首先声明它是可重复的会导致编译时错误。</p><h3 id="Step-2-Declare-the-Containing-Annotation-Type"><a href="#Step-2-Declare-the-Containing-Annotation-Type" class="headerlink" title="Step 2: Declare the Containing Annotation Type"></a>Step 2: Declare the Containing Annotation Type</h3><p>包含注解类型必须具有数组类型的 value 元素。数组类型的元素类型必须是可重复的注解类型。包含注解类型的 Schedules 声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Schedules &#123;<br>    Schedule[] value();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Annotations</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vocabulary 01</title>
    <link href="/2024/03/12/Vocabulary-01/"/>
    <url>/2024/03/12/Vocabulary-01/</url>
    
    <content type="html"><![CDATA[<ol><li><p>short-sighted &#x2F;ˌʃɔːrtˈsaɪ.t̬ɪd&#x2F;</p><p>近视的</p><p>She has to wear glasses because she’s very short-sighted.</p><p>My brother has good eyesight whereas I am a little shortsighted.</p><p>目光短浅的，没有远见的</p><p>It’s very short-sighted of the government not to invest in technological research.</p></li><li><p>condemn</p><p>（通常指出于道义而）谴责，指责</p><p>The terrorist action has been condemned as an act of barbarism and cowardice.</p><p>人们谴责这一恐怖行径是野蛮和懦弱的行为。</p><p>The film was condemned for its sexism.</p><p>这部影片被指责带有性别歧视。</p></li><li><p>barbarism&#x2F;ˈbɑːr.bɚ.ɪ.zəm&#x2F;</p><p>extremely cruel and unpleasant behaviour</p><p>He witnessed some appalling acts of barbarism during the war.</p><p>他亲眼目睹了战争期间发生的一些骇人听闻的野蛮行为。</p></li><li><p>cowardice&#x2F;ˈkaʊ.ɚ.dɪs&#x2F;</p><p>Cowardice prevented me from doing what I knew I should do.</p><p>懦弱使我无法做我知道自己应该做的事情。</p><p>You can accuse me of cowardice, but I still wouldn’t fight in a war.</p><p>你可以指责我懦弱，但我仍然不会去打仗。</p></li><li><p>sexism&#x2F;ˈsek.sɪ.zəm&#x2F;</p><p>The university has been accused of sexism because it has so few women professors.</p><p>这所大学被指控存在性别歧视，因为女教授极少。</p></li><li><p>cruel</p><p>Don’t tease him about his weight - it’s cruel.</p><p>别拿他的体重开玩笑——这样太刻薄了。</p><p>Children can be very cruel to each other.</p><p>小孩相互之间会很残忍。</p><p>His death was a cruel blow.</p><p>他的死是个无情的打击。</p></li><li><p>intentionally | purposely | deliberately | on purpose</p><p>I didn’t ignore her intentionally - I just didn’t recognize her.</p><p>我没有故意无视她——我只是没认出她。</p><p>She was being intentionally unpleasant.</p><p>她是故意耍态度的。</p><p>The trial has been purposely delayed.</p><p>审判被有意延期了。</p><p>I purposely avoid making train journeys during the rush hour.</p><p>我有意避开在高峰时间乘火车。</p><p>I’m sure he says these things deliberately to annoy me.</p><p>我敢肯定他是故意说这些来气我的。</p><p>I didn’t do it on purpose - it was an accident.</p><p>我不是故意这样做的，是个意外。</p></li><li><p>behaviour</p><p>the way that someone behaves</p><p>Her behaviour is often appalling.</p><p>她的行为举止常常糟糕之极。<br>He was notorious for his violent and threatening behaviour.</p><p>他因暴力和威胁行为而声名狼藉。</p><p>（在某种环境或条件下的）特定行为</p><p>His research involved the study of instinctive behaviour in birds.</p><p>他的研究是关于鸟类本能行为的。</p><p>These behaviours can be observed among many children who have lost a parent or other loved one.</p><p>这类行为可能出现在失去了父母或亲人的儿童身上。</p></li><li><p>purpose</p><p><strong>意图，目的，原因</strong></p><p>The purpose of the research is to try to find out more about the causes of the disease.</p><p>研究的目的是试图进一步探寻引起这种疾病的原因。</p><p>His only purpose in life seems to be to enjoy himself.</p><p>Her main&#x2F;primary purpose in suing the newspaper for libel was to clear her name.</p><p>她控告这家报纸诽谤的主要目的是澄清她的清白。</p><p>I came to Brighton for&#x2F;with the express purpose of seeing you.</p><p>She had the operation entirely for cosmetic purposes.</p><p>她做这次手术纯粹是为了美容。</p><p>a multi-purpose kitchen knife</p><p>I can see no useful purpose in continuing this conversation.</p><p>我看不到继续这次谈话有任何益处。</p><p>All my efforts were to no purpose (&#x3D; failed).</p><p>我所有的努力都付诸东流了。</p><p>He gave her a sum of money which she used to good purpose (&#x3D; well).</p><p>他给她的那笔钱她都用在了该用的地方。</p><p><strong>决心，意志</strong></p><p>I’ve always admired her for her strength of purpose.</p><p>我一直佩服她意志坚定。</p><p>Parenthood would give him a sense of purpose.</p><p>身为人父会让他变得有意志。</p><p>on purpose</p><p>I didn’t do it on purpose - it was an accident.</p><p>我不是故意这样做的，是个意外。</p></li><li><p>parenthood&#x2F;ˈper.ənt.hʊd&#x2F;</p><p>The prospect of parenthood filled her with horror.</p><p>将为人母使她内心充满了恐惧。</p></li><li><p>involve&#x2F;ɪnˈvɑːlv&#x2F;</p><p>Research involving the use of biological warfare agents will be used for defensive purposes.</p><p>The operation involves putting a small tube into your heart.</p><p>The second accident involved two cars and a lorry.<br>第二起事故涉及到两辆小汽车和一辆大卡车。</p><p>I prefer teaching methods that actively involve students in learning.</p><p>我更喜欢能让学生主动参与学习的教学法。</p><p>She’s been involved with animal rights for many years.</p><p>她多年来一直参与保护动物权益的活动。</p></li><li><p>lorry | truck</p><p>an articulated&#x2F;ɑːrˈtɪk.jə.leɪ.t̬ɪd&#x2F; lorry</p><p>铰链式卡车</p><p>a long-distance lorry driver</p><p>长途货车司机</p><p>The road was completely blocked by an overturned truck.</p><p>道路完全被翻倒的卡车堵住了。</p></li><li><p>completely | totally | wholly | entirely</p><p>I agree with you completely.</p><p>She’s completely mad.</p><p>He’d completely changed - I didn’t recognize him.</p><p>他彻底变样了——我当时没认出来。</p><p>The company is run almost entirely by middle-aged men.</p><p>管理这个公司的几乎都是中年男性。</p></li><li><p>overturn</p><p>The car skidded&#x2F;skɪd&#x2F; off the road, hit a tree and overturned.</p><p>汽车滑出道路，撞到树上后翻了。</p><p>The intruder had overturned some of the furniture in the house.</p><p>入室窃贼翻动了屋子里的一些家具。</p><p>The Court of Appeal overturned the earlier decision.</p><p>上诉法庭推翻了早先作出的裁决。</p></li><li><p>middle-aged</p><p>They’re a middle-aged couple, with grown-up children.</p><p>他们是一对中年夫妇，孩子们都已成年。</p></li><li><p>instinctive</p><p>an instinctive reaction</p><p>本能反应</p></li><li><p>extremely | exceedingly | super</p><p>They played extremely well.</p><p>他们演奏得非常精彩。</p><p>She’s extremely beautiful.</p></li><li><p>prevent</p><p>to stop something from happening or someone from doing something</p><p>Label your suitcases to prevent confusion.</p><p>在你的手提箱上贴上标签以防弄混。</p><p>His disability prevents him (from) driving.</p></li><li><p>disability&#x2F;ˌdɪs.əˈbɪl.ə.t̬i&#x2F;</p><p>a physical&#x2F;learning disability</p><p>身体残疾／学习障碍</p><p>She is deaf, but refuses to let her disability prevent her from doing what she wants to do.</p><p>Trying to change attitudes to disability is an uphill struggle.</p><p>改变对待残疾的态度是一项艰巨的工作。</p></li><li><p>uphill&#x2F;ˌʌpˈhɪl&#x2F; | downhill&#x2F;ˌdaʊnˈhɪl&#x2F;</p><p>an uphill climb</p><p>向上的攀爬</p><p>running uphill</p><p>往山上跑</p><p>It’ll be an uphill struggle to get the new proposals accepted.</p><p>要让新的提案获得通过会很艰难。</p><p>It’s so much easier running downhill!</p><p>跑下山去容易多了！</p><p>The route is all downhill from here to the finishing line.</p><p>这条路线从这里到终点都是下坡。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vocabulary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 年目标</title>
    <link href="/2024/03/11/2024-%E5%B9%B4%E7%9B%AE%E6%A0%87/"/>
    <url>/2024/03/11/2024-%E5%B9%B4%E7%9B%AE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<ul><li>把工作做好，提高编程技术</li><li>体重到 80 kg，变胖或者变壮一点</li><li>阅读 3~5 本书籍</li><li>尽量多打打网球，希望 1~2 周能打一次</li><li>精进英语，尤其是口语和听力</li><li>坚持写博客文章</li><li>尽量早睡早起</li><li>有时间多去南京的景点玩玩</li></ul>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Schedule</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript for…in Loop</title>
    <link href="/2024/03/06/JavaScript-for%E2%80%A6in-Loop/"/>
    <url>/2024/03/06/JavaScript-for%E2%80%A6in-Loop/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-JavaScript-for…in-loop"><a href="#Introduction-to-JavaScript-for…in-loop" class="headerlink" title="Introduction to JavaScript for…in loop"></a>Introduction to JavaScript for…in loop</h2><p>for…in 循环遍历由对象字符串作为键的可枚举属性。注意，属性可以通过字符串（string）或符号（symbol）作为键。</p><p>当属性的内部可枚举（enumerable）标志设置为 true 时，该属性是可枚举的。</p><p>当通过简单赋值或属性初始值设定项创建属性时，可枚举标志默认为 true：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">object.<span class="hljs-property">propertyName</span> = value;<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">propertyName</span>: value,<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>for…in 循环的语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> propertyName <span class="hljs-keyword">in</span> object) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>for…in 允许访问对象的每个可迭代属性和值，而无需知道属性的具体名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Doe&#x27;</span>,<br>  <span class="hljs-attr">ssn</span>: <span class="hljs-string">&#x27;299-24-2351&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> person) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prop + <span class="hljs-string">&#x27;:&#x27;</span> + person[prop])<br>&#125;<br><span class="hljs-attr">firstName</span>: <span class="hljs-title class_">John</span><br><span class="hljs-attr">lastName</span>: <span class="hljs-title class_">Doe</span><br><span class="hljs-attr">ssn</span>: <span class="hljs-number">299</span> - <span class="hljs-number">24</span> - <span class="hljs-number">2351</span><br></code></pre></td></tr></table></figure><h2 id="The-for-in-loop-Inheritance"><a href="#The-for-in-loop-Inheritance" class="headerlink" title="The for...in loop &amp; Inheritance"></a>The <code>for...in</code> loop &amp; Inheritance</h2><p>When you loop over the properties of an object that inherits from another object, the <code>for...in</code> statement goes up in the prototype chain and enumerates inherited properties.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> decoration = &#123;<br>  <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">var</span> circle = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(decoration)<br>circle.<span class="hljs-property">radius</span> = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> circle) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prop)<br>&#125;<br>radius<br>color<br></code></pre></td></tr></table></figure><p>The <code>circle</code> object has its own prototype that references the <code>decoration</code> object. Therefore, the <code>for...in</code> loop displays the properties of the <code>circle</code> object and its prototype.</p><p>如果只想枚举对象自己的属性，可以使用 hasOwnProperty() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> circle) &#123;<br>  <span class="hljs-keyword">if</span> (circle.<span class="hljs-title function_">hasOwnProperty</span>(prop)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prop)<br>  &#125;<br>&#125;<br>radius<br></code></pre></td></tr></table></figure><h2 id="The-for…in-loop-and-Array"><a href="#The-for…in-loop-and-Array" class="headerlink" title="The for…in loop and Array"></a>The for…in loop and Array</h2><p>最好不要使用 for…in 来迭代数组，特别是当数组元素的顺序很重要时。</p><p>下面的例子可以完美地工作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> items = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br><span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> item <span class="hljs-keyword">in</span> items) &#123;<br>  total += items[item]<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total) <span class="hljs-comment">// 60</span><br></code></pre></td></tr></table></figure><p>但是，有人可能会在其库中设置内置数组类型的属性，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">foo</span> = <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>因此，for…in 将无法正常工作。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// somewhere else</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">foo</span> = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">const</span> items = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>];<br><span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> items) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123; prop, <span class="hljs-attr">value</span>: items[prop] &#125;);<br>  total += items[prop];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(total);<br>&#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">10</span> &#125;<br>&#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">20</span> &#125;<br>&#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">30</span> &#125;<br>&#123; <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">100</span> &#125;<br><span class="hljs-number">160</span><br></code></pre></td></tr></table></figure><p>另一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = []<br><span class="hljs-comment">// set the third element to 3, other elements are `undefined`</span><br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i])<br>&#125;<br><span class="hljs-comment">// 输出显示了数组的三个元素，这是正确的：</span><br><span class="hljs-literal">undefined</span><br><span class="hljs-literal">undefined</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>但是，for…in 循环忽略前两个元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[key])<br>&#125;<br><span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript for...in</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Object Properties</title>
    <link href="/2024/03/06/JavaScript-Object-Properties/"/>
    <url>/2024/03/06/JavaScript-Object-Properties/</url>
    
    <content type="html"><![CDATA[<h2 id="Object-Property-types"><a href="#Object-Property-types" class="headerlink" title="Object Property types"></a>Object Property types</h2><p>JavaScript specifies the characteristics of properties of objects via internal <strong>attributes</strong> surrounded by the two pairs of square brackets, e.g., <code>[[Enumerable]]</code>.</p><p>对象有两种类型的属性：数据属性（data properties）和访问器属性（accessor properties）。</p><h3 id="Data-properties"><a href="#Data-properties" class="headerlink" title="Data properties"></a>Data properties</h3><p>A data property contains a single location for a data value. A data property has four attributes(PropertyDescriptor):</p><ul><li><p>[[Configurarable]] – determines whether a property can be redefined or removed via delete operator.</p><p><strong>可配置性（Configurable）</strong>：指示属性是否可删除和是否可修改属性的特性。如果为 <code>true</code>，则属性可以被删除，属性的特性（包括 <code>writable</code>、<code>enumerable</code> 和 <code>configurable</code>）可以修改；如果为 <code>false</code>，则属性不可被删除，属性的特性不可被修改。</p></li><li><p>[[Enumerable]] – indicates if a property can be returned in the for…in loop.</p></li><li><p>[[Writable]] – specifies that the value of a property can be changed.</p></li><li><p>[[Value]] – contains the actual value of a property.</p></li></ul><p>默认情况下，直接在对象上定义的所有属性的 [[Configurable]] 、 [[Enumerable]] 和 [[Writable]] 属性设置为 true。 [[Value]] 属性的默认值为 undefined。</p><p>例如，以下创建一个具有两个属性 firstName 和 lastName 的 person 对象，并将 configurable、enumerable 和 writable attributes 设置为 true，并将它们的值分别设置为 “John” 和 “Doe”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Doe&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>To change any attribute of a property, use the <code>Object.defineProperty()</code> method.</p><p>Object.defineProperty() 方法接受三个参数：</p><ul><li>An object.</li><li>A property name of the object.</li><li>A property descriptor object that has four properties: <code>configurable</code>, <code>enumerable</code>, <code>writable</code>, and <code>value</code>.</li></ul><p>如果使用 Object.defineProperty() 方法定义对象的属性，除非另有指定，否则 [[Configurable]]、[[Enumerable]] 和 [[Writable]] 的默认值将设置为 false。</p><p>以下示例创建一个具有 Age 属性的 person 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;&#125;<br>person.<span class="hljs-property">age</span> = <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>由于 [[Configurable]] 属性的默认值设置为 true，因此可以通过删除运算符将其删除：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">delete</span> person.<span class="hljs-property">age</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>以下示例创建一个 person 对象并使用 Object.defineProperty() 方法向其添加 ssn 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">let</span> person = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&#x27;ssn&#x27;</span>, &#123;<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;012-38-9119&#x27;</span><br>&#125;);<br><span class="hljs-keyword">delete</span> person.<span class="hljs-property">ssn</span>;<br><span class="hljs-title class_">TypeError</span>: <span class="hljs-title class_">Cannot</span> <span class="hljs-keyword">delete</span> property <span class="hljs-string">&#x27;ssn&#x27;</span> <span class="hljs-keyword">of</span> #&lt;<span class="hljs-title class_">Object</span>&gt;<br></code></pre></td></tr></table></figure><p>在此示例中，configurable 属性设置为 false。因此，删除 ssn 属性会导致错误。</p><p>此外，一旦将属性定义为 non-configurable，就无法将其更改为 configurable。</p><p>默认情况下，对象上定义的所有属性的 enumerable 属性都是 true。这意味着可以使用 for…in 循环迭代所有对象属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;&#125;<br>person.<span class="hljs-property">age</span> = <span class="hljs-number">25</span><br>person.<span class="hljs-property">ssn</span> = <span class="hljs-string">&#x27;012-38-9119&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> property <span class="hljs-keyword">in</span> person) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(property)<br>&#125;<br>age<br>ssn<br></code></pre></td></tr></table></figure><p>以下通过将 enumerable 属性设置为 false 使 ssn 属性不可枚举。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;&#125;<br>person.<span class="hljs-property">age</span> = <span class="hljs-number">25</span><br>person.<span class="hljs-property">ssn</span> = <span class="hljs-string">&#x27;012-38-9119&#x27;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&#x27;ssn&#x27;</span>, &#123;<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>&#125;)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> prop <span class="hljs-keyword">in</span> person) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prop)<br>&#125;<br>age<br></code></pre></td></tr></table></figure><h3 id="Accessor-properties"><a href="#Accessor-properties" class="headerlink" title="Accessor properties"></a>Accessor properties</h3><p>访问器属性是使用 getter 和 setter 函数定义的属性，它们并不存储数据值，而是在读取或设置属性时调用相关的函数。</p><p>Similar to data properties, accessor properties also have <code>[[Configurable]]</code> and <code>[[Enumerable]]</code> attributes.</p><p><strong>但访问器属性具有 [[Get]] 和 [[Set]]，而不是 [[Value]] 和 [[Writable]]。</strong></p><p>当从访问器属性读取数据时，会自动调用 [[Get]] 函数以返回值。 [[Get]] 函数的默认返回值是 undefined。</p><p>如果将值分配给访问器属性，则会自动调用 [[Set]] 函数。</p><p>要定义访问器属性，<strong>必须</strong>使用 Object.defineProperty() 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Doe&#x27;</span>,<br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&#x27;fullName&#x27;</span>, &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>  &#125;,<br>  <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">let</span> parts = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-keyword">if</span> (parts.<span class="hljs-property">length</span> == <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = parts[<span class="hljs-number">0</span>]<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = parts[<span class="hljs-number">1</span>]<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;Invalid name format&#x27;</span><br>    &#125;<br>  &#125;,<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">fullName</span>) <span class="hljs-comment">// &#x27;John Doe&#x27;</span><br></code></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li>首先，定义包含两个属性的 person 对象：firstName 和 lastName。</li><li>然后，将 fullName 属性作为访问器属性添加到 person 对象。</li></ul><p>在 fullname 访问器属性中：</p><ul><li>[[Get]] 返回由 firstName、空格和 lastName 连接而成的全名。</li><li>[[Set]] 方法按空格分割参数，并分配名称相应部分的 firstName 和 lastName 属性。</li><li>如果 fullName 的格式不正确，即名字、空格和姓氏，则会抛出错误。</li></ul><h2 id="Define-multiple-properties-Object-defineProperties"><a href="#Define-multiple-properties-Object-defineProperties" class="headerlink" title="Define multiple properties: Object.defineProperties()"></a>Define multiple properties: Object.defineProperties()</h2><p>在 ES5 中，可以使用 Object.defineProperties() 方法在单个语句中定义多个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> product = &#123;&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(product, &#123;<br>  <span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Smartphone&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">price</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">799</span>,<br>  &#125;,<br>  <span class="hljs-attr">tax</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">0.1</span>,<br>  &#125;,<br>  <span class="hljs-attr">netPrice</span>: &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> * (<span class="hljs-number">1</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">tax</span>)<br>    &#125;,<br>  &#125;,<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>  <span class="hljs-string">&#x27;The net price of a &#x27;</span> +<br>    product.<span class="hljs-property">name</span> +<br>    <span class="hljs-string">&#x27; is &#x27;</span> +<br>    product.<span class="hljs-property">netPrice</span>.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>) +<br>    <span class="hljs-string">&#x27; USD&#x27;</span><br>)<br><span class="hljs-comment">// The net price of a Smartphone is 878.90 USD</span><br></code></pre></td></tr></table></figure><p>在此示例中，我们为 product 对象定义了三个数据属性：name、price 和 tax 以及一个访问器属性 netPrice。</p><h2 id="JavaScript-object-property-descriptor"><a href="#JavaScript-object-property-descriptor" class="headerlink" title="JavaScript object property descriptor"></a>JavaScript object property descriptor</h2><p>Object.getOwnPropertyDescriptor() 方法允许获取属性的描述符对象。 Object.getOwnPropertyDescriptor() 方法采用两个参数：</p><ol><li>An object</li><li>A property of the object</li></ol><p>It returns a descriptor object that describes a property. The descriptor object has four properties: configurable, enumerable, writable, and value.</p><p>以下示例获取上一示例中 product 对象的 name 和 netPrice 属性的描述符对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(product, <span class="hljs-string">&#x27;name&#x27;</span>)<br><span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span><br><span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br><span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Smartphone&#x27;</span><br><span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(product, <span class="hljs-string">&#x27;netPrice&#x27;</span>)<br><span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span><br><span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span><br><span class="hljs-attr">get</span>: ƒ()<br><span class="hljs-attr">set</span>: <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript Object</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript this Keyword</title>
    <link href="/2024/03/06/JavaScript-this-Keyword/"/>
    <url>/2024/03/06/JavaScript-this-Keyword/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，可以在全局和函数上下文中使用 this 关键字。此外，this 关键字的行为在严格模式和非严格模式之间变化。</p><h2 id="What-is-this-keyword"><a href="#What-is-this-keyword" class="headerlink" title="What is this keyword"></a>What is this keyword</h2><p>this 在不同的上下文中引用不同的对象。</p><p>假设有一个对象 counter，它有一个方法 next()。当调用 next() 方法时，就可以访问 this 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> counter = &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">next</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> ++<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span><br>  &#125;,<br>&#125;<br><br>counter.<span class="hljs-title function_">next</span>()<br></code></pre></td></tr></table></figure><p>在 next() 函数中， this 引用 counter 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">counter.<span class="hljs-title function_">next</span>()<br></code></pre></td></tr></table></figure><p>next() 是一个函数，它是 counter 对象的属性。因此，在 next() 函数内部， this 引用了 counter 对象。</p><h2 id="Global-context"><a href="#Global-context" class="headerlink" title="Global context"></a>Global context</h2><p>在全局上下文中，this 引用全局对象，即 Web 浏览器上的 window 或 Node.js 上的 global。</p><p>此行为在严格模式和非严格模式下都是一致的。这是网络浏览器上的输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>如果在全局上下文中为该对象分配属性，JavaScript 会将该属性添加到全局对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;Red&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">color</span>) <span class="hljs-comment">// &#x27;Red&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Function-context"><a href="#Function-context" class="headerlink" title="Function context"></a>Function context</h2><p>在 JavaScript 中，可以通过以下方式调用函数：</p><ul><li>Function invocation</li><li>Method invocation</li><li>Constructor invocation</li><li>Indirect invocation</li></ul><p>每个函数调用都定义其自己的上下文。因此， this 的行为有所不同。</p><h3 id="Simple-function-invocation"><a href="#Simple-function-invocation" class="headerlink" title="Simple function invocation"></a>Simple function invocation</h3><p>在非严格模式下，函数调用时 this 引用全局对象，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-variable language_">window</span>) <span class="hljs-comment">// true</span><br>&#125;<br><br><span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>当调用 show() 函数时， this 引用全局对象，该对象在 Web 浏览器中是 window ，在 Node.js 中是 global 。</p><p>调用 show() 函数与以下内容相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>在严格模式下，JavaScript 将函数内的 this 设置为 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// true</span><br>&#125;<br><span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><p>注意，严格模式自 ECMAScript 5.1 起就可用。严格模式适用于函数和嵌套函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-string">&#x27;use strict&#x27;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// true</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">display</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === <span class="hljs-literal">undefined</span>) <span class="hljs-comment">// true</span><br>  &#125;<br>  <span class="hljs-title function_">display</span>()<br>&#125;<br><span class="hljs-title function_">show</span>()<br></code></pre></td></tr></table></figure><h3 id="Method-invocation"><a href="#Method-invocation" class="headerlink" title="Method invocation"></a>Method invocation</h3><p>当调用对象的方法时，JavaScript 将 this 设置为拥有该方法的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> car = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Honda&#x27;</span>,<br>  <span class="hljs-attr">getBrand</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span><br>  &#125;,<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(car.<span class="hljs-title function_">getBrand</span>()) <span class="hljs-comment">// Honda</span><br></code></pre></td></tr></table></figure><p>在此示例中，getBrand() 方法中的 this 对象引用了 car 对象。</p><p>由于方法是对象的属性值，因此可以将其存储在变量中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> brand = car.<span class="hljs-property">getBrand</span><br></code></pre></td></tr></table></figure><p>然后通过变量调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">brand</span>()) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>你会得到 undefined 而不是“Honda”，因为当你调用一个方法而不指定其对象时，JavaScript 在非严格模式下将其设置为全局对象，在严格模式下将其设置为 undefined。</p><p>要解决此问题，可以使用 Function.prototype 对象的 bind() 方法。 bind() 方法创建一个新函数，该函数的 this 关键字设置为指定值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> brand = car.<span class="hljs-property">getBrand</span>.<span class="hljs-title function_">bind</span>(car)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">brand</span>()) <span class="hljs-comment">// Honda</span><br></code></pre></td></tr></table></figure><p>在此示例中，当调用 brand() 方法时，this 关键字将绑定到 <code>car</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> car = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Honda&#x27;</span>,<br>  <span class="hljs-attr">getBrand</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span><br>  &#125;,<br>&#125;<br><span class="hljs-keyword">let</span> bike = &#123;<br>  <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Harley Davidson&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">let</span> brand = car.<span class="hljs-property">getBrand</span>.<span class="hljs-title function_">bind</span>(bike)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">brand</span>()) <span class="hljs-comment">// Harley Davidson</span><br></code></pre></td></tr></table></figure><p>在此示例中，bind() 方法将 this 设置为 <code>bike</code> 对象，因此，可以在控制台上看到 <code>bike</code> 对象的品牌属性的值。</p><h3 id="Constructor-invocation"><a href="#Constructor-invocation" class="headerlink" title="Constructor invocation"></a>Constructor invocation</h3><p>当使用 new 关键字创建函数对象的实例时，将该函数用作构造函数。</p><p>以下示例声明一个 Car 函数，然后将其作为构造函数调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params">brand</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand<br>&#125;<br><span class="hljs-title class_">Car</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getBrand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span><br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&#x27;Honda&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(car.<span class="hljs-title function_">getBrand</span>())<br></code></pre></td></tr></table></figure><p>表达式 new Car(‘Honda’) 是 Car 函数的构造函数调用。</p><p>JavaScript 创建一个新对象并将 <code>this</code> 设置为新创建的对象。这种模式在只有一个潜在问题时效果很好。</p><p>现在，可以将 Car() 作为函数或构造函数调用。如果省略 new 关键字，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> bmw = <span class="hljs-title class_">Car</span>(<span class="hljs-string">&#x27;BMW&#x27;</span>) <span class="hljs-comment">// 返回 undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bmw.<span class="hljs-property">brand</span>)<br><span class="hljs-comment">// =&gt; TypeError: Cannot read property &#x27;brand&#x27; of undefined</span><br></code></pre></td></tr></table></figure><p>为了确保始终使用构造函数调用来调用 Car() 函数，请在 Car() 函数的开头添加一个检查，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params">brand</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Car</span>)) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Must use the new operator to call the function&#x27;</span>)<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand<br>&#125;<br></code></pre></td></tr></table></figure><p>ES6 引入了一个名为 new.target 的元属性，它允许检测函数是作为简单调用还是作为构造函数来调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params">brand</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Must use the new operator to call the function&#x27;</span>)<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Indirect-Invocation"><a href="#Indirect-Invocation" class="headerlink" title="Indirect Invocation"></a>Indirect Invocation</h3><p>在 JavaScript 中，函数是一等公民。换句话说，函数是对象，是 Function 类型的实例。</p><p>Function 类型有两个方法： call() 和 apply() 。这些方法允许在调用函数时设置 this 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getBrand</span>(<span class="hljs-params">prefix</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prefix + <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span>);<br>&#125;<br><span class="hljs-keyword">let</span> honda = &#123;<br>    <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Honda&#x27;</span><br>&#125;;<br><span class="hljs-keyword">let</span> audi = &#123;<br>    <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;Audi&#x27;</span><br>&#125;;<br>getBrand.<span class="hljs-title function_">call</span>(honda, <span class="hljs-string">&quot;It&#x27;s a &quot;</span>);<br>getBrand.<span class="hljs-title function_">call</span>(audi, <span class="hljs-string">&quot;It&#x27;s an &quot;</span>);<br><span class="hljs-title class_">It</span><span class="hljs-string">&#x27;s a Honda</span><br><span class="hljs-string">It&#x27;</span>s an <span class="hljs-title class_">Audi</span><br></code></pre></td></tr></table></figure><p>apply() 方法与 call() 方法类似，只是它的第二个参数是参数数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">getBrand.<span class="hljs-title function_">apply</span>(honda, [<span class="hljs-string">&quot;It&#x27;s a &quot;</span>]) <span class="hljs-comment">// &quot;It&#x27;s a Honda&quot;</span><br>getBrand.<span class="hljs-title function_">apply</span>(audi, [<span class="hljs-string">&quot;It&#x27;s an &quot;</span>]) <span class="hljs-comment">// &quot;It&#x27;s a Audi&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Arrow-function"><a href="#Arrow-function" class="headerlink" title="Arrow function"></a>Arrow function</h2><p>ES6 引入了一个新概念，称为箭头函数。在箭头函数中，JavaScript 按词法设置 this。</p><p>这意味着箭头函数不会创建自己的执行上下文，而是从定义箭头函数的外部函数继承 this 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">getThis</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">this</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getThis</span>() === <span class="hljs-variable language_">window</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>在此示例中， this 值设置为全局对象，即 Web 浏览器中的 window。</p><p>由于箭头函数不会创建自己的执行上下文，因此使用箭头函数定义方法会导致问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">120</span><br>&#125;<br><span class="hljs-title class_">Car</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSpeed</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span><br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(car.<span class="hljs-title function_">getSpeed</span>()) <span class="hljs-comment">// 👉 undefined</span><br></code></pre></td></tr></table></figure><p>在 getSpeed() 方法中， this 值引用全局对象，而不是 Car 对象，但全局对象没有名为 speed 的属性。因此，getSpeed() 方法中的 this.speed 返回 undefined。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript this</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prototypal Inheritance</title>
    <link href="/2024/03/06/Prototypal-Inheritance/"/>
    <url>/2024/03/06/Prototypal-Inheritance/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-JavaScript-prototypal-inheritance"><a href="#Introduction-to-JavaScript-prototypal-inheritance" class="headerlink" title="Introduction to JavaScript prototypal inheritance"></a>Introduction to JavaScript prototypal inheritance</h2><p>在 OOP 编程范式中，类是创建对象的蓝图。如果希望新类重用现有类的功能，可以创建一个扩展现有类的新类。这称为经典继承。</p><p>JavaScript 不使用经典继承。相反，它使用原型继承。</p><p>在原型继承中，一个对象通过原型链接从另一个对象“继承”属性。</p><h2 id="JavaScript-prototypal-inheritance-and-proto"><a href="#JavaScript-prototypal-inheritance-and-proto" class="headerlink" title="JavaScript prototypal inheritance and __proto__"></a>JavaScript prototypal inheritance and <code>__proto__</code></h2><p>下面定义了一个 person 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>  <span class="hljs-attr">greet</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hi, I&#x27;m &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>在此示例中，person 对象有一个属性和一个方法：</p><ul><li><p>name 是存储人名的属性。</p></li><li><p>greet 是一个以字符串形式返回问候语的方法。</p></li></ul><p>默认情况下，JavaScript 引擎提供内置的 Object() 函数和可由 Object.prototype 引用的匿名对象：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype.svg" alt="JavaScript Prototype"></p><p>这意味着 person 对象可以调用 Object.prototype 引用的匿名对象中定义的任何方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-title function_">toString</span>());<br>[object <span class="hljs-title class_">Object</span>]<br></code></pre></td></tr></table></figure><p>[object Object] 是对象的默认字符串表示形式。</p><p>当通过 person 调用 toString() 方法时，JavaScript 引擎无法在 person 对象上找到它。因此，它沿着原型链寻找 Object.prototype 对象中的方法。</p><p>要访问 person 对象的原型，可以使用 <code>__proto__ </code> 属性，如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">__proto__</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意，永远不应该在生产代码中使用 <strong>proto</strong> 属性。</p></blockquote><p>下面显示了 <code>person.__proto__</code> 和 Object.prototype 引用了同一个对象：</p><p>下面定义了具有 teach() 方法的 teacher 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> teacher = &#123;<br>  <span class="hljs-attr">teach</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">subject</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I can teach &#x27;</span> + subject<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>与 person 对象一样，<code>teacher.__proto__</code> 引用了 Object.prototype，如下图所示：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JavaScript-prototypal-inheritance-inherits-from-Object.svg" alt="img"></p><p>如果想让 teacher 对象访问 person 对象的所有方法和属性，可以将 teacher 对象的原型设置为 person 对象，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">teacher.<span class="hljs-property">__proto__</span> = person<br></code></pre></td></tr></table></figure><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JavaScript-prototypal-inheritance-example.svg" alt="img"></p><p>现在，teacher 对象可以通过原型链从 person 对象访问 name 属性和 greet() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(teacher.<span class="hljs-property">name</span>) <span class="hljs-comment">// John Doe</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(teacher.<span class="hljs-title function_">greet</span>()) <span class="hljs-comment">// Hi, I&#x27;m John Doe</span><br></code></pre></td></tr></table></figure><p>当在 teacher 对象上调用 greet() 方法时，JavaScript 引擎首先在 teacher 对象中找到它。</p><p>由于 JavaScript 引擎无法在 teacher 对象中找到该方法，因此它沿着原型链在 person 对象中搜索该方法。因为 JavaScript 引擎可以在 person 对象中找到 greet() 方法，所以它会执行该方法。</p><p>在 JavaScript 中，我们说 teacher 对象继承了 person 对象的方法和属性。这种继承称为原型继承（<strong>prototypal inheritance</strong>）。</p><h2 id="A-standard-way-to-implement-prototypal-inheritance-in-ES5"><a href="#A-standard-way-to-implement-prototypal-inheritance-in-ES5" class="headerlink" title="A standard way to implement prototypal inheritance in ES5"></a>A standard way to implement prototypal inheritance in ES5</h2><p>ES5 通过使用 Object.create() 方法提供了一种处理原型继承的标准方法。</p><blockquote><p>注意，现在应该使用较新的 ES6 类和 extends 关键字来实现继承。简单多了。</p></blockquote><p>Object.create() 方法创建一个新对象并使用现有对象作为新对象的原型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(proto, [propertiesObject])<br></code></pre></td></tr></table></figure><p>Object.create() 方法接受两个参数：</p><ul><li>第一个参数 (proto) 是用作新对象的原型对象。</li><li>第二个参数 (propertiesObject)（如果提供）是一个可选对象，用于为新对象定义其他属性。</li></ul><p>假设有一个 person 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>  <span class="hljs-attr">greet</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hi, I&#x27;m &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>以下代码使用 person 对象作为原型对象创建一个空的 teacher 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> teacher = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person)<br></code></pre></td></tr></table></figure><p>之后，可以为 teacher 对象定义属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">teacher.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Jane Doe&#x27;</span><br>teacher.<span class="hljs-property">teach</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">subject</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I can teach &#x27;</span> + subject<br>&#125;<br></code></pre></td></tr></table></figure><p>或者可以在一条语句中执行所有这些步骤，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> teacher = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person, &#123;<br>  <span class="hljs-attr">name</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span> &#125;,<br>  <span class="hljs-attr">teach</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">subject</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I can teach &#x27;</span> + subject<br>    &#125;,<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>ES5 还引入了 Object.getPrototypeOf() 方法，该方法返回对象的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(teacher) === person) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript Prototype</tag>
      
      <tag>JavaScript Inheritance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Constructor/Prototype Pattern</title>
    <link href="/2024/03/06/JavaScript-Constructor-Prototype-Pattern/"/>
    <url>/2024/03/06/JavaScript-Constructor-Prototype-Pattern/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-the-JavaScript-Constructor-Prototype-pattern"><a href="#Introduction-to-the-JavaScript-Constructor-Prototype-pattern" class="headerlink" title="Introduction to the JavaScript Constructor &#x2F; Prototype pattern"></a>Introduction to the JavaScript Constructor &#x2F; Prototype pattern</h2><p>构造函数和原型模式的组合是 ES5 中定义自定义类型的最常见方法。在这个模式中：</p><ul><li>构造函数模式定义对象属性。</li><li>原型模式定义了对象方法。</li></ul><p>通过使用此模式，自定义类型的所有对象都共享原型中定义的方法。此外，每个对象都有自己的属性。</p><p>这种构造函数&#x2F;原型模式吸收了构造函数和原型模式的最佳部分。</p><h2 id="JavaScript-Constructor-Prototype-example"><a href="#JavaScript-Constructor-Prototype-example" class="headerlink" title="JavaScript Constructor &#x2F; Prototype example"></a>JavaScript Constructor &#x2F; Prototype example</h2><p>假设要定义一个名为 Person 的自定义类型，它具有：</p><ul><li>两个属性 firstName 和 lastName。</li><li>一个方法 getFullName()。</li></ul><p>首先，使用构造函数初始化属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(firstName, lastName)<br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br>&#125;<br></code></pre></td></tr></table></figure><p>在幕后，JavaScript 引擎定义了一个用圆圈表示的 Person 函数和一个用正方形表示的匿名对象。</p><p>Person 函数具有引用匿名对象的原型属性。匿名对象有一个引用 Person 函数的构造函数属性：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-Person-prototype.svg" alt="JS prototype- Person prototype"></p><p>其次，在 Person 函数的原型对象中定义 getFullName() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getFullName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>&#125;<br></code></pre></td></tr></table></figure><p>JavaScript 在 Person.prototype 对象上定义了 getFullName() 方法，如下所示：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-constructor-pattern.svg" alt="img"></p><p>第三，创建 Person 类型的多个实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>)<br><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-title function_">getFullName</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-title function_">getFullName</span>())<br><span class="hljs-comment">// 输出</span><br>;(<span class="hljs-string">&#x27;John Doe&#x27;</span>)<br>;(<span class="hljs-string">&#x27;Jane Doe&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Javascript 创建两个对象 p1 和 p2。这些对象通过 [[Prototype]] 链接到 Person.prototype 对象：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JavaScript-constructor-prototype-pattern-example.svg" alt="img"></p><p>每个对象都有自己的属性 firstName 和 lastName。但是，它们共享相同的 getFullName() 方法。</p><p>当对 p1 或 p2 对象调用 getFullName() 方法时，JavaScript 引擎会搜索这些对象的方法。因为 JavaScript 引擎在那里找不到该方法，所以它遵循原型链接并在 Person.prototype 对象中搜索该方法。</p><h2 id="Classes-in-ES6"><a href="#Classes-in-ES6" class="headerlink" title="Classes in ES6"></a>Classes in ES6</h2><p>ES6 引入了 class 关键字，使构造函数&#x2F;原型模式更易于使用。例如，以下使用 class 关键字定义相同的 Person 类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br>  &#125;<br>  <span class="hljs-title function_">getFullName</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>)<br><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-title function_">getFullName</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-title function_">getFullName</span>())<br></code></pre></td></tr></table></figure><p>在此语法中，类将属性初始化移至构造函数方法。它还将 getFullName() 方法定义在与构造函数相同的位置。</p><p>类语法看起来更干净、更简洁。然而，它是构造函数&#x2F;原型模式的语法糖，并具有一些增强功能。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript Prototype</tag>
      
      <tag>JavaScript Constructor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Prototype</title>
    <link href="/2024/03/06/JavaScript-Prototype/"/>
    <url>/2024/03/06/JavaScript-Prototype/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-JavaScript-prototype"><a href="#Introduction-to-JavaScript-prototype" class="headerlink" title="Introduction to JavaScript prototype"></a>Introduction to JavaScript prototype</h2><p>在 JavaScript 中，对象可以通过原型继承彼此的功能。每个对象都有自己的属性，称为 <code>prototype</code>。</p><p>因为原型本身也是另一个对象，所以原型有自己的原型。这创建了一个称为原型链（prototype chain）的东西。当原型的自身原型为空时，原型链结束。</p><p>假设有一个对象 person，其属性名为 name：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>当在控制台中检查 person 对象时，会发现 person 对象有一个名为 prototype 的属性，用 [[Prototype]] 表示：</p><img src="/2024/03/06/JavaScript-Prototype/JavaScript-Prototype.png" class=""><p>原型本身是一个具有自己属性的对象：</p><img src="/2024/03/06/JavaScript-Prototype/JavaScript-Prototype-object.png" class=""><p>当访问对象的属性时，如果该对象具有该属性，它将返回该属性值。</p><p>但是，如果访问对象中不存在的属性，JavaScript 引擎将在该对象的原型中搜索。</p><p>如果 JavaScript 引擎在对象的原型对象中找不到该属性，它将在原型的原型中搜索，直到找到该属性或到达原型链的末尾。</p><h2 id="JavaScript-prototype-illustration"><a href="#JavaScript-prototype-illustration" class="headerlink" title="JavaScript prototype illustration"></a>JavaScript prototype illustration</h2><p>JavaScript 具有内置的 Object() 函数。如果将 Object 函数传递给 typeof 运算符，则它会返回“function”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// &#x27;function&#x27;</span><br></code></pre></td></tr></table></figure><p>此外，JavaScript 提供了一个匿名对象，可以通过 Object() 函数的原型属性来引用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br></code></pre></td></tr></table></figure><img src="/2024/03/06/JavaScript-Prototype/JavaScript-Prototype-Object.prototype.png" class=""><p>Object.prototype 对象具有一些有用的属性和方法，例如 toString() 和 valueOf()。</p><p>Object.prototype 还有一个重要的属性：constructor，它引用 Object() 函数。</p><p>以下语句确认 Object.prototype.constructor 属性引用了 Object 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>首先，定义一个名为 Person 的构造函数，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br></code></pre></td></tr></table></figure><p>在此示例中，Person() 函数接受一个 name 参数并将其分配给 this 对象的 name 属性。</p><p>JavaScript 在幕后创建了一个新函数 Person() 和一个匿名对象：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-Person-type.svg" alt="JS prototype- Person type"></p><p>与 Object() 函数一样，Person() 函数有一个名为 prototype 的属性，该属性引用匿名对象。匿名对象具有引用 Person() 函数的构造函数属性。</p><p>![img](D:\2024 年\blogs\Web Dev\JavaScript\ECMAScript\04-Objects\assets\JavaScript-Prototype-Person-function.png)</p><p><strong>此外，JavaScript 通过 [[Prototype]] 将 Person.prototype 对象链接到 Object.prototype 对象，这称为原型链接。</strong></p><p>原型链接在下图中用[[Prototype]]表示：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-Person-prototype.svg" alt="JS prototype- Person prototype"></p><h2 id="Defining-methods-in-the-JavaScript-prototype-object"><a href="#Defining-methods-in-the-JavaScript-prototype-object" class="headerlink" title="Defining methods in the JavaScript prototype object"></a>Defining methods in the JavaScript prototype object</h2><p>下面在 Person.prototype 对象中定义了一个名为 greet()的新方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">greet</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hi, I&#x27;m &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;!&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这种情况下，JavaScript 引擎将 greet()方法添加到 Person.prototype 对象中：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-method.svg" alt="img"></p><p>以下创建了 Person 的一个新实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在内部，JavaScript 引擎创建一个名为 p1 的新对象，并通过原型链接将 p1 对象链接到 Person.prototype 对象：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-Person-object.svg" alt="img"></p><p>p1、Person.prototype 和 Object.protoype 之间的链接称为原型链。</p><p>以下代码调用 p1 对象上的 greet()方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> greeting = p1.<span class="hljs-title function_">greet</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(greeting)<br></code></pre></td></tr></table></figure><p>因为 p1 没有 greet()方法，所以 JavaScript 遵循原型链接并在 Person.prototype 对象上找到它。</p><p>由于 JavaScript 可以在 Person.prototype 对象上找到 greet() 方法，因此它执行 greet() 方法并返回结果：</p><p>下面调用 p1 对象的 toString() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s = p1.<span class="hljs-title function_">toString</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s)<br></code></pre></td></tr></table></figure><p>在这种情况下，JavaScript 引擎会沿着原型链在 Person.prototype 中查找 toString() 方法。</p><p>由于 Person.prototype 没有 toString() 方法，因此 JavaScript 引擎会向上查找原型链并在 Object.prototype 对象中搜索 toString() 方法。</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-calling-a-method.svg" alt="img"></p><p>如果调用 Person.prototype 和 Object.prototype 对象上不存在的方法，JavaScript 引擎将遵循原型链，如果找不到该方法，则会抛出错误。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">p1.<span class="hljs-title function_">fly</span>()<br></code></pre></td></tr></table></figure><p>由于 fly() 方法不存在于原型链中的任何对象上，因此 JavaScript 引擎会发出以下错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">TypeError</span>: p1.<span class="hljs-property">fly</span> is not a <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><p>下面创建了 name 属性为“Jane”的 Person 的另一个实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jane&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-two-person-objects.svg" alt="JS prototype-two person objects"></p><p>p2 对象具有与 p1 对象相同的属性和方法。</p><p>总之，当你在原型对象上定义一个方法时，这个方法被所有实例共享。</p><h2 id="Defining-methods-in-an-individual-object"><a href="#Defining-methods-in-an-individual-object" class="headerlink" title="Defining methods in an individual object"></a>Defining methods in an individual object</h2><p>下面定义了 p2 对象上的 draw() 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">p2.<span class="hljs-property">draw</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;I can draw.&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>JavaScript 引擎将 draw() 方法添加到 p2 对象，而不是 Person.prototype 对象：</p><p><img src="https://www.javascripttutorial.net/wp-content/uploads/2022/01/JS-prototype-object-with-method.svg" alt="JS prototype - object with method"></p><p>这意味着只可以在 p2 对象上调用 draw() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">p2.<span class="hljs-title function_">draw</span>()<br></code></pre></td></tr></table></figure><p>但是你不能在 p1 对象上调用 draw() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">p1.<span class="hljs-title function_">draw</span>()<br><span class="hljs-title class_">TypeError</span>: p1.<span class="hljs-property">draw</span> is not a <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><p>当在对象中定义方法时，该方法仅对该对象可用。默认情况下它不能与其他对象共享。</p><h2 id="Getting-prototype-linkage"><a href="#Getting-prototype-linkage" class="headerlink" title="Getting prototype linkage"></a>Getting prototype linkage</h2><p><code>__proto__</code> 发音为 dunder proto。 <code>__proto__</code> 是 Object.prototype 对象的访问器属性。它公开了访问它的对象的内部原型链接（[[Prototype]]）。</p><p><code>__proto__ </code> 已在 ES6 中标准化，以确保与 Web 浏览器的兼容性。但是，将来可能会弃用它，转而使用 Object.getPrototypeOf()。因此，永远不应该在生产代码中使用 <code>__proto__</code>。</p><p><code>p1.__proto__</code> 公开引用 Person.prototype 对象的 [[Prototype]]。</p><p>同样，<code>p2.__proto__</code> 也引用与 <code>p1.__proto__</code> 相同的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">__proto__</span> === p2.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>如前所述，应该使用 Object.getPrototypeOf() 方法而不是 <code>__proto__</code>。 Object.getPrototypeOf() 方法返回指定对象的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(p1)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>获取原型链接的另一种流行方法是当 Object.getPrototypeOf() 方法无法通过构造函数属性使用时，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">p1.<span class="hljs-property">constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><p>p1.constructor 返回 Person，因此 p1.constructor.prototype 返回原型对象。</p><h2 id="Shadowing"><a href="#Shadowing" class="headerlink" title="Shadowing"></a>Shadowing</h2><p>观察以下方法调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-title function_">greet</span>())<br></code></pre></td></tr></table></figure><p>p1 对象没有定义 greet() 方法，因此 JavaScript 会沿着原型链查找它。在这种情况下，它可以在 Person.prototype 对象中找到该方法。</p><p>让我们向对象 p1 添加一个与 Person.prototype 对象中的方法同名的新方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">p1.<span class="hljs-property">greet</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>并调用 greet() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-title function_">greet</span>())<br></code></pre></td></tr></table></figure><p>因为 p1 对象有 greet() 方法，JavaScript 只是立即执行它，而无需在原型链中查找它。</p><p>这是 shadowing 的一个例子。 p1 对象的 greet() 方法隐藏了 p1 对象引用的原型对象的 greet() 方法。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript Prototype</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Constructor Function</title>
    <link href="/2024/03/06/JavaScript-Constructor-Function/"/>
    <url>/2024/03/06/JavaScript-Constructor-Function/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-JavaScript-constructor-functions"><a href="#Introduction-to-JavaScript-constructor-functions" class="headerlink" title="Introduction to JavaScript constructor functions"></a>Introduction to JavaScript constructor functions</h2><p>可以使用构造函数来定义自定义类型，并使用 new 运算符从该类型创建多个对象。</p><p>从技术上讲，任何函数（除了箭头函数，它没有自己的 <code>this</code>）都可以用作构造器。即可以通过 <code>new</code> 来运行，它会执行上面的算法。“首字母大写”是一个共同的约定，以明确表示一个函数将被使用 <code>new</code> 来运行。</p><p>构造函数是具有以下约定的常规函数：</p><ul><li>构造函数的名称以大写字母开头，如 Person、Document 等。</li><li>构造函数只能使用 new 运算符调用。</li></ul><p>注意，ES6 引入了 class 关键字，允许定义自定义类型。<strong>类只是构造函数的语法糖，具有一些增强功能。</strong></p><p>以下示例定义了一个名为 Person 的构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br>&#125;<br></code></pre></td></tr></table></figure><p>要创建 Person 的新实例，使用 new 运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>)<br></code></pre></td></tr></table></figure><p>基本上，new 运算符执行以下操作：</p><ul><li>创建一个新的空对象 {} 并将其分配给 this。</li><li>函数体执行。通常它会修改 <code>this</code>，为其添加新的属性，将参数“John”和“Doe”分配给对象的 firstName 和 lastName 属性。</li><li>返回 this 值。</li></ul><p>它在功能上等同于以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-comment">// this = &#123;&#125;;</span><br>  <span class="hljs-comment">// add properties to this</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br>  <span class="hljs-comment">// return this;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>顺便说一下，如果没有参数，可以省略 <code>new</code> 后的括号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() <span class="hljs-comment">// &lt;-- 没有参数</span><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">let</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>()<br></code></pre></td></tr></table></figure><p>这里省略括号不被认为是一种“好风格”，但是规范允许使用该语法。</p><h2 id="Adding-methods-to-JavaScript-constructor-functions"><a href="#Adding-methods-to-JavaScript-constructor-functions" class="headerlink" title="Adding methods to JavaScript constructor functions"></a>Adding methods to JavaScript constructor functions</h2><p>对象可能具有操作其数据的方法。要向通过构造函数创建的对象添加方法，可以使用 this 关键字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">getFullName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，可以创建一个新的 Person 对象并调用 getFullName() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-title function_">getFullName</span>()) <span class="hljs-comment">// John Doe</span><br></code></pre></td></tr></table></figure><p>构造函数的问题在于，当创建 Person 的多个实例时， this.getFullName() 会在每个实例中重复（不共享），这样内存效率不高。</p><p>要解决此问题，可以使用原型，以便自定义类型的所有实例都可以共享相同的方法。</p><h2 id="Returning-from-constructor-functions"><a href="#Returning-from-constructor-functions" class="headerlink" title="Returning from constructor functions"></a>Returning from constructor functions</h2><p>通常，构造函数隐式返回设置为新创建对象的 this 。但如果它有 return 语句，则规则如下：</p><ul><li>如果使用对象调用 return，构造函数将返回该对象而不是 this。</li><li>如果使用对象以外的值调用 return，则该值将被忽略。</li></ul><p>换句话说，带有对象的 <code>return</code> 返回该对象，在所有其他情况下返回 <code>this</code>。</p><h2 id="Calling-a-constructor-function-without-the-new-keyword"><a href="#Calling-a-constructor-function-without-the-new-keyword" class="headerlink" title="Calling a constructor function without the new keyword"></a>Calling a constructor function without the <code>new</code> keyword</h2><p>从技术上讲，可以像常规函数一样调用构造函数，而无需使用 new 关键字，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在这种情况下，Person 只是像常规函数一样执行。因此，Person 函数中的 this 并不绑定到 person 变量，而是绑定到全局对象。</p><p>如果尝试访问 firstName 或 lastName 属性，将收到错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">firstName</span>);<br><span class="hljs-title class_">TypeError</span>: <span class="hljs-title class_">Cannot</span> read property <span class="hljs-string">&#x27;firstName&#x27;</span> <span class="hljs-keyword">of</span> <span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><p>同样，无法访问 getFullName() 方法，因为它绑定到全局对象。</p><p>为了防止在没有 new 关键字的情况下调用构造函数，ES6 引入了 new.target 属性。</p><p>如果使用 new 关键字调用构造函数，则 new.target 返回该函数的引用。否则，它返回 undefined。</p><p>下面向 Person 函数添加一条语句，以将 new.target 显示到控制台：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>)<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">getFullName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下返回 undefined，因为 Person 构造函数的调用方式与常规函数类似：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>但是，以下代码返回对 Person 函数的引用，因为它被称为 new 关键字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>) <span class="hljs-comment">// [Function: Person]</span><br></code></pre></td></tr></table></figure><p>通过使用 new.target，可以强制构造函数的调用者使用 new 关键字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Cannot be called without the new keyword&#x27;</span>)<br>  &#125;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br>&#125;<br></code></pre></td></tr></table></figure><p>或者，如果构造函数的用户不使用 new 关键字，则可以通过创建新的 Person 对象来使语法更加灵活：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">firstName, lastName</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(firstName, lastName)<br>  &#125;<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = firstName<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = lastName<br>&#125;<br><br><span class="hljs-keyword">let</span> person = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">firstName</span>)<br></code></pre></td></tr></table></figure><p>这种模式经常用于 JavaScript 库和框架中，以使语法更加灵活。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript Function</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Arrow Functions</title>
    <link href="/2024/03/06/JavaScript-Arrow-Functions/"/>
    <url>/2024/03/06/JavaScript-Arrow-Functions/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-JavaScript-arrow-functions"><a href="#Introduction-to-JavaScript-arrow-functions" class="headerlink" title="Introduction to JavaScript arrow functions"></a>Introduction to JavaScript arrow functions</h2><p>ES6 箭头函数提供了一种替代方法来编写比函数表达式更短的语法。</p><p>以下示例定义一个返回两个数字之和的函数表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)) <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><p>以下示例等效于上面的 add() 函数表达式，但使用箭头函数代替：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; x + y<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)) <span class="hljs-comment">// 30;</span><br></code></pre></td></tr></table></figure><p>在此示例中，箭头函数有一个表达式 x + y，因此它返回该表达式的结果。</p><p>但是，如果使用块语法 {}，则需要指定 return 关键字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> x + y<br>&#125;<br></code></pre></td></tr></table></figure><p>typeof 运算符返回指示箭头函数类型为 function。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> add) <span class="hljs-comment">// function</span><br></code></pre></td></tr></table></figure><p>箭头函数也是 Function 类型的实例，如下例所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(add <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript-arrow-functions-with-multiple-parameters"><a href="#JavaScript-arrow-functions-with-multiple-parameters" class="headerlink" title="JavaScript arrow functions with multiple parameters"></a>JavaScript arrow functions with multiple parameters</h3><p>如果箭头函数有两个或多个参数，则使用以下语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">(p1, p2, ..., pn) =&gt; expression;<br></code></pre></td></tr></table></figure><p>例如，要按降序对数字数组进行排序，可以使用数组对象的 sort() 方法，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>]<br>numbers.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> b - a<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(numbers) <span class="hljs-comment">// [6,4,2]</span><br></code></pre></td></tr></table></figure><p>使用箭头函数语法，代码更加简洁：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>]<br>numbers.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(numbers) <span class="hljs-comment">// [6,4,2]</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript-arrow-functions-with-a-single-parameter"><a href="#JavaScript-arrow-functions-with-a-single-parameter" class="headerlink" title="JavaScript arrow functions with a single parameter"></a>JavaScript arrow functions with a single parameter</h3><p>如果箭头函数采用单个参数，则使用以下语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">;<span class="hljs-function">(<span class="hljs-params">p1</span>) =&gt;</span> &#123;<br>  statements<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，可以省略括号，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">;<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> &#123;<br>  statements<br>&#125;<br></code></pre></td></tr></table></figure><p>以下示例使用箭头函数作为 map() 方法的参数，该方法将字符串数组转换为字符串长度数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> names = [<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Mac&#x27;</span>, <span class="hljs-string">&#x27;Peter&#x27;</span>]<br><span class="hljs-keyword">let</span> lengths = names.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> name.<span class="hljs-property">length</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lengths) <span class="hljs-comment">// [ 4, 3, 5 ]</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript-arrow-functions-with-no-parameter"><a href="#JavaScript-arrow-functions-with-no-parameter" class="headerlink" title="JavaScript arrow functions with no parameter"></a>JavaScript arrow functions with no parameter</h3><p>如果箭头函数没有参数，则必须需要使用括号，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">;<span class="hljs-function">() =&gt;</span> &#123;<br>  statements<br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">logDoc</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">document</span>)<br><span class="hljs-title function_">logDoc</span>()<br></code></pre></td></tr></table></figure><h2 id="Statements-expressions-in-the-arrow-function-body"><a href="#Statements-expressions-in-the-arrow-function-body" class="headerlink" title="Statements &amp; expressions in the arrow function body"></a>Statements &amp; expressions in the arrow function body</h2><p>在 JavaScript 中，表达式的计算结果为如下例所示的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">10</span> + <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>语句执行特定任务，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (x === y) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;x equals y&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果在箭头函数体中使用一个表达式，则不需要使用 {}。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">square</span> = (<span class="hljs-params">x</span>) =&gt; x * x<br></code></pre></td></tr></table></figure><p>但是，如果使用一条语句，则必须将其括在一对大括号内，如下例所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">except</span> = (<span class="hljs-params">msg</span>) =&gt; &#123;<br>  <span class="hljs-keyword">throw</span> msg<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JavaScript-arrow-functions-and-object-literal"><a href="#JavaScript-arrow-functions-and-object-literal" class="headerlink" title="JavaScript arrow functions and object literal"></a>JavaScript arrow functions and object literal</h2><p>考虑以下示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> setColor = <span class="hljs-keyword">function</span> (<span class="hljs-params">color</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: color &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> backgroundColor = <span class="hljs-title function_">setColor</span>(<span class="hljs-string">&#x27;Red&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(backgroundColor.<span class="hljs-property">value</span>) <span class="hljs-comment">// &quot;Red&quot;</span><br></code></pre></td></tr></table></figure><p>setColor() 函数表达式返回一个对象，该对象的 value 属性设置为 color 参数。</p><p>如果使用以下语法从箭头函数返回对象字面量，将不会起作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">;<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> &#123;<br>  <span class="hljs-attr">object</span>: literal<br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">setColor</span> = (<span class="hljs-params">color</span>) =&gt; &#123;<br>  <span class="hljs-attr">value</span>: color<br>&#125;<br></code></pre></td></tr></table></figure><p>由于块和对象字面量都使用大括号，因此 JavaScript 引擎无法区分块和对象。</p><p>要解决此问题，需要将对象字面量括在括号中，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">setColor</span> = (<span class="hljs-params">color</span>) =&gt; (&#123; <span class="hljs-attr">value</span>: color &#125;)<br></code></pre></td></tr></table></figure><h2 id="Arrow-function-vs-regular-function"><a href="#Arrow-function-vs-regular-function" class="headerlink" title="Arrow function vs. regular function"></a>Arrow function vs. regular function</h2><p>箭头函数和常规函数之间有两个主要区别。</p><ul><li>首先，在箭头函数中，this、arguments、super、new.target 是词法的。这意味着箭头函数使用封闭词法范围（enclosing lexical scope）中的这些变量。</li><li>其次，箭头函数不能用作函数构造器。如果使用 new 关键字从箭头函数创建新对象，将收到错误。</li></ul><h3 id="JavaScript-arrow-functions-and-this-value"><a href="#JavaScript-arrow-functions-and-this-value" class="headerlink" title="JavaScript arrow functions and this value"></a>JavaScript arrow functions and <code>this</code> value</h3><p>在 JavaScript 中，一个新函数定义了自己的 this 值。然而，箭头函数的情况并非如此。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">0</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">speedUp</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">speed</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = speed<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>) <span class="hljs-comment">// undefined</span><br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>()<br>car.<span class="hljs-title function_">speedUp</span>(<span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><p>在 setTimeout()函数的匿名函数中，this.speed 是 undefined。原因是匿名函数的 this 遮盖了 speedUp() 方法的 this，因为匿名函数中的 this 指向全局对象。</p><p>要解决此问题，可以将 this 值分配给一个不在匿名函数内部隐藏的变量，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">0</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">speedUp</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">speed</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = speed<br>    <span class="hljs-keyword">let</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(self.<span class="hljs-property">speed</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>()<br>car.<span class="hljs-title function_">speedUp</span>(<span class="hljs-number">50</span>) <span class="hljs-comment">// 50;</span><br></code></pre></td></tr></table></figure><p>与匿名函数不同，箭头函数捕获封闭上下文（enclosing context）的 this 值，而不是创建自己的 this 上下文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = <span class="hljs-number">0</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">speedUp</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">speed</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span> = speed<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">speed</span>), <span class="hljs-number">1000</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> car = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>()<br>car.<span class="hljs-title function_">speedUp</span>(<span class="hljs-number">50</span>) <span class="hljs-comment">// 50;</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript-arrow-functions-and-the-arguments-object"><a href="#JavaScript-arrow-functions-and-the-arguments-object" class="headerlink" title="JavaScript arrow functions and the arguments object"></a>JavaScript arrow functions and the arguments object</h3><p>箭头函数没有 arguments 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> x + <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]<br>&#125;<br><br><span class="hljs-keyword">let</span> display = <span class="hljs-title function_">show</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">display</span>(<span class="hljs-number">5</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">// 15</span><br></code></pre></td></tr></table></figure><p>showMe() 函数内的箭头函数引用 arguments 对象。然而，这个 arguments 对象属于 show()函数，而不是箭头函数。</p><p>此外，箭头函数没有 new.target 关键字。</p><h3 id="JavaScript-arrow-functions-and-the-prototype-property"><a href="#JavaScript-arrow-functions-and-the-prototype-property" class="headerlink" title="JavaScript arrow functions and the prototype property"></a>JavaScript arrow functions and the prototype property</h3><p>当使用 function 关键字定义函数时，该函数有一个称为原型的属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">message</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dump.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;prototype&#x27;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>然而，箭头函数没有原型属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">dump</span> = (<span class="hljs-params">message</span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dump.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;prototype&#x27;</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>使用箭头函数进行回调和闭包是一种很好的做法，因为箭头函数的语法更清晰。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES 6</tag>
      
      <tag>JavaScript Function</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript for...of Loop</title>
    <link href="/2024/03/06/JavaScript-for-of-Loop/"/>
    <url>/2024/03/06/JavaScript-for-of-Loop/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-the-JavaScript-for…of-loop"><a href="#Introduction-to-the-JavaScript-for…of-loop" class="headerlink" title="Introduction to the JavaScript for…of loop"></a>Introduction to the JavaScript for…of loop</h2><p>ES6 引入了一个新的语句 for…of 来迭代可迭代对象：</p><ul><li>Built-in Array, String, Map, Set, …</li><li>Array-like objects such as arguments or NodeList</li><li>User-defined objects that implement the iterator protocol.</li></ul><p>for…of 的语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (variable <span class="hljs-keyword">of</span> iterable) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JavaScript-for-of-loop-examples"><a href="#JavaScript-for-of-loop-examples" class="headerlink" title="JavaScript for of loop examples"></a>JavaScript for of loop examples</h2><h3 id="Iterating-over-arrays"><a href="#Iterating-over-arrays" class="headerlink" title="Iterating over arrays"></a>Iterating over arrays</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> scores = [<span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">70</span>]<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> score <span class="hljs-keyword">of</span> scores) &#123;<br>  score = score + <span class="hljs-number">5</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(score)<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不更改循环内的变量，则应使用 const 关键字而不是 let 关键字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> scores = [<span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">70</span>]<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> score <span class="hljs-keyword">of</span> scores) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(score)<br>&#125;<br></code></pre></td></tr></table></figure><p>要访问循环内数组元素的索引，可以将 for…of 语句与数组的 entries() 方法结合使用。</p><p>array.entries() 方法在每次迭代中返回一对 [index, element]。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;Red&#x27;</span>, <span class="hljs-string">&#x27;Green&#x27;</span>, <span class="hljs-string">&#x27;Blue&#x27;</span>]<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [index, color] <span class="hljs-keyword">of</span> colors.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;color&#125;</span> is at index <span class="hljs-subst">$&#123;index&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在此示例中，使用了数组解构将 entries() 方法的结果分配给每次迭代中的 index 和 color 变量。</p><h3 id="In-place-object-destructuring-with-for…of"><a href="#In-place-object-destructuring-with-for…of" class="headerlink" title="In-place object destructuring with for…of"></a>In-place object destructuring with for…of</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ratings = [<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">3</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">4</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;David&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">5</span> &#125;,<br>  &#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">2</span> &#125;,<br>]<br><br><span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> &#123; score &#125; <span class="hljs-keyword">of</span> ratings) &#123;<br>  sum += score<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Total scores: <span class="hljs-subst">$&#123;sum&#125;</span>`</span>) <span class="hljs-comment">// 14</span><br></code></pre></td></tr></table></figure><ul><li>The <code>ratings</code> is an array of objects. Each object has two properties user and score.</li><li>The <code>for...of</code> iterate over the <code>ratings</code> array and calculate the total scores of all objects.</li><li>The expression const {score} of ratings uses object destructing to assign the score property of the current iterated element to the score variable.</li></ul><h3 id="Iterating-over-strings"><a href="#Iterating-over-strings" class="headerlink" title="Iterating over strings"></a>Iterating over strings</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> c <span class="hljs-keyword">of</span> str) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Iterating-over-Map-objects"><a href="#Iterating-over-Map-objects" class="headerlink" title="Iterating over Map objects"></a>Iterating over Map objects</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> colors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><br>colors.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;#ff0000&#x27;</span>)<br>colors.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;#00ff00&#x27;</span>)<br>colors.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;#0000ff&#x27;</span>)<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> color <span class="hljs-keyword">of</span> colors) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(color)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">;[<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;#ff0000&#x27;</span>][(<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;#00ff00&#x27;</span>)][(<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;#0000ff&#x27;</span>)]<br></code></pre></td></tr></table></figure><h3 id="Iterating-over-set-objects"><a href="#Iterating-over-set-objects" class="headerlink" title="Iterating over set objects"></a>Iterating over set objects</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> num <span class="hljs-keyword">of</span> nums) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for-of-vs-for-in"><a href="#for-of-vs-for-in" class="headerlink" title="for...of vs. for...in"></a><code>for...of</code> vs. <code>for...in</code></h2><p>JavaScript 中的 <code>for...in</code> 循环会迭代对象的所有可枚举属性，包括对象自身的属性以及其原型链上的属性。这意味着 <code>for...in</code> 循环会遍历对象自身的属性，同时也会遍历其原型链上可枚举的属性。如果想要避免遍历原型链上的属性，可以使用 <code>Object.hasOwnProperty()</code> 方法来过滤出对象自身的属性。</p><p>for…in 迭代对象的所有可枚举属性。它不会迭代 Array、Map 或 Set 等集合。</p><p>与 for…in 循环不同，for…of 迭代一个集合，而不是一个对象。事实上，for…of 会迭代任何具有 [Symbol.iterator] 属性的集合的元素。</p><p>数组是一种特殊的对象，它的属性名是数字索引，而属性值则是数组中的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> scores = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br>scores.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;Hi&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;for...in:&#x27;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> score <span class="hljs-keyword">in</span> scores) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(score)<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;for...of:&#x27;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> score <span class="hljs-keyword">of</span> scores) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(score)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>...<span class="hljs-attr">in</span>:<br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>message<br><span class="hljs-keyword">for</span>...<span class="hljs-attr">of</span>:<br><span class="hljs-number">10</span><br><span class="hljs-number">20</span><br><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>在此示例中，for…in 语句迭代 scores 数组的属性，而 for…of 则迭代数组的元素。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES 6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Spread Operator</title>
    <link href="/2024/03/06/JavaScript-Spread-Operator/"/>
    <url>/2024/03/06/JavaScript-Spread-Operator/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-the-JavaScript-spread-operator"><a href="#Introduction-to-the-JavaScript-spread-operator" class="headerlink" title="Introduction to the JavaScript spread operator"></a>Introduction to the JavaScript spread operator</h2><p>ES6 提供了一个新的运算符，称为展开运算符，它由三个点 (…) 组成。展开运算符扩展可迭代对象（例如数组、映射或集合）的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> odd = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> combined = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, ...odd]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(combined) <span class="hljs-comment">// [ 2, 4, 6, 1, 3, 5 ]</span><br></code></pre></td></tr></table></figure><p>位于奇数数组前面的三个点 (…) 是展开运算符。展开运算符 (…) 解包（unpack）奇数数组的元素。</p><blockquote><p>ES6 还具有三个点 (…)，这是一个 rest parameter，它将函数的所有剩余参数收集到一个数组中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a, b, ...args</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args)<br>&#125;<br><br><span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// [ 3, 4, 5 ]</span><br></code></pre></td></tr></table></figure><p>因此，三个点 (…) 同时表示 spread operator 和 rest parameter。</p><p>主要区别：</p><ul><li>spread operator 解包 <strong>可迭代对象（iterable object）</strong>的元素。</li><li>rest parameter 将元素打包到数组中。</li></ul><p>rest parameter 必须是函数的最后一个参数。然而，扩展运算符可以在任何地方：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> odd = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> combined = [...odd, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(combined) <span class="hljs-comment">// [ 1, 3, 5, 2, 4, 6 ]</span><br><br><span class="hljs-keyword">const</span> odd = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">const</span> combined = [<span class="hljs-number">2</span>, ...odd, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(combined) <span class="hljs-comment">// [2, 1, 3, 5, 4, 6]</span><br></code></pre></td></tr></table></figure><blockquote><p>ES2018 将 spead operator 扩展到对象，这称为 object spread。</p></blockquote><h2 id="JavaScript-spread-operator-and-apply-method"><a href="#JavaScript-spread-operator-and-apply-method" class="headerlink" title="JavaScript spread operator and apply() method"></a>JavaScript spread operator and apply() method</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a - b<br>&#125;<br></code></pre></td></tr></table></figure><p>在 ES5 中，要将两个数字的数组传递给 compare() 函数，通常使用 apply() 方法，因为 apply() 方法的参数传递是以数组的形式并自动解包的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> result = compare.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><p>但是，通过使用扩展运算符，可以将两个数字的数组传递给 compare()函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">compare</span>(...[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><p>展开运算符展开数组的元素。</p><h2 id="A-better-way-to-use-the-Array’s-push-method-example"><a href="#A-better-way-to-use-the-Array’s-push-method-example" class="headerlink" title="A better way to use the Array’s push() method example"></a>A better way to use the Array’s push() method example</h2><p>数组对象的 push() 方法向数组添加一个或多个元素。如果要将数组传递给 push() 方法，则需要使用 apply() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> rivers = [<span class="hljs-string">&#x27;Nile&#x27;</span>, <span class="hljs-string">&#x27;Ganges&#x27;</span>, <span class="hljs-string">&#x27;Yangte&#x27;</span>]<br><span class="hljs-keyword">let</span> moreRivers = [<span class="hljs-string">&#x27;Danube&#x27;</span>, <span class="hljs-string">&#x27;Amazon&#x27;</span>]<br><br>;[].<span class="hljs-property">push</span>.<span class="hljs-title function_">apply</span>(rivers, moreRivers)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rivers) <span class="hljs-comment">// [ &#x27;Nile&#x27;, &#x27;Ganges&#x27;, &#x27;Yangte&#x27;, &#x27;Danube&#x27;, &#x27;Amazon&#x27; ]</span><br></code></pre></td></tr></table></figure><p>使用扩展运算符来提高代码的可读性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">rivers.<span class="hljs-title function_">push</span>(...moreRivers)<br></code></pre></td></tr></table></figure><h2 id="JavaScript-spread-operator-and-array-manipulation"><a href="#JavaScript-spread-operator-and-array-manipulation" class="headerlink" title="JavaScript spread operator and array manipulation"></a>JavaScript spread operator and array manipulation</h2><h3 id="Constructing-array-literal"><a href="#Constructing-array-literal" class="headerlink" title="Constructing array literal"></a>Constructing array literal</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> initialChars = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>]<br><span class="hljs-keyword">let</span> chars = [...initialChars, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chars) <span class="hljs-comment">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="Concatenating-arrays"><a href="#Concatenating-arrays" class="headerlink" title="Concatenating arrays"></a>Concatenating arrays</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><span class="hljs-keyword">let</span> moreNumbers = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">let</span> allNumbers = [...numbers, ...moreNumbers]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(allNumbers) <span class="hljs-comment">// [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><h3 id="Copying-an-array"><a href="#Copying-an-array" class="headerlink" title="Copying an array"></a>Copying an array</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> scores = [<span class="hljs-number">80</span>, <span class="hljs-number">70</span>, <span class="hljs-number">90</span>]<br><span class="hljs-keyword">let</span> copiedScores = [...scores]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(copiedScores) <span class="hljs-comment">// [80, 70, 90]</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript-spread-operator-and-strings"><a href="#JavaScript-spread-operator-and-strings" class="headerlink" title="JavaScript spread operator and strings"></a>JavaScript spread operator and strings</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> chars = [<span class="hljs-string">&#x27;A&#x27;</span>, ...<span class="hljs-string">&#x27;BC&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(chars) <span class="hljs-comment">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES 6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Default Parameters</title>
    <link href="/2024/03/06/JavaScript-Default-Parameters/"/>
    <url>/2024/03/06/JavaScript-Default-Parameters/</url>
    
    <content type="html"><![CDATA[<h2 id="Setting-JavaScript-default-parameters-for-a-function"><a href="#Setting-JavaScript-default-parameters-for-a-function" class="headerlink" title="Setting JavaScript default parameters for a function"></a>Setting JavaScript default parameters for a function</h2><p>在 JavaScript 中，参数的默认值是 <code>undefined</code>。这意味着，如果不将参数传递给函数，则其参数的默认值将是 undefined。</p><p>假设要为 message 参数指定默认值 ‘Hi’。</p><p>实现此目的的典型方法是使用三元运算符测试参数值并分配默认值（如果未定义）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">message</span>) &#123;<br>  message = <span class="hljs-keyword">typeof</span> message !== <span class="hljs-string">&#x27;undefined&#x27;</span> ? message : <span class="hljs-string">&#x27;Hi&#x27;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message)<br>&#125;<br><span class="hljs-title function_">say</span>() <span class="hljs-comment">// &#x27;Hi&#x27;</span><br></code></pre></td></tr></table></figure><p>ES6 提供了一种更简单的方法来设置函数参数的默认值，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">param1=default1, param2=default2,..</span>) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的语法中，可以使用赋值运算符 (&#x3D;) 和参数名称后面的默认值来设置该参数的默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">message = <span class="hljs-string">&#x27;Hi&#x27;</span></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message)<br>&#125;<br><br><span class="hljs-title function_">say</span>() <span class="hljs-comment">// &#x27;Hi&#x27;</span><br><span class="hljs-title function_">say</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// &#x27;Hi&#x27;</span><br><span class="hljs-title function_">say</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// &#x27;Hello&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Using-functions"><a href="#Using-functions" class="headerlink" title="Using functions"></a>Using functions</h3><p>可以使用函数的返回值作为参数的默认值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title function_">taxRate</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-number">0.1</span><br><span class="hljs-keyword">let</span> getPrice = <span class="hljs-keyword">function</span> (<span class="hljs-params">price, tax = price * taxRate()</span>) &#123;<br>  <span class="hljs-keyword">return</span> price + tax<br>&#125;<br><br><span class="hljs-keyword">let</span> fullPrice = <span class="hljs-title function_">getPrice</span>(<span class="hljs-number">100</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fullPrice) <span class="hljs-comment">// 110</span><br></code></pre></td></tr></table></figure><h3 id="The-arguments-object"><a href="#The-arguments-object" class="headerlink" title="The arguments object"></a>The arguments object</h3><p>函数内 arguments 对象的值是传递给函数的实际参数的数量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y = <span class="hljs-number">1</span>, z = <span class="hljs-number">2</span></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>)<br>  <span class="hljs-keyword">return</span> x + y + z<br>&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>) <span class="hljs-comment">// 2</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES 6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Rest Parameters</title>
    <link href="/2024/03/06/JavaScript-Rest-Parameters/"/>
    <url>/2024/03/06/JavaScript-Rest-Parameters/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-JavaScript-rest-parameters"><a href="#Introduction-to-JavaScript-rest-parameters" class="headerlink" title="Introduction to JavaScript rest parameters"></a>Introduction to JavaScript rest parameters</h2><p>ES6 提供了一种新的参数，称为 rest parameter，其前缀为三个点 (…)。rest parameter 允许将不定数量的参数表示为数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a, b, ...args</span>) &#123;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后一个参数 (args) 以三个点 (…) 为前缀。它称为 rest parameter。</p><p>传递给函数的所有实参都将映射到参数列表。在上面的语法中，第一个参数映射到 a，第二个参数映射到 b，第三个、第四个等将作为数组存储在 rest parameter args 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>)<br></code></pre></td></tr></table></figure><p>args 数组存储以下值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">;[<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>]<br></code></pre></td></tr></table></figure><p>如果仅传递前两个参数，则 rest parameter 将为空数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>注意，rest parameter 必须出现在参数列表的末尾。以下代码将导致错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a,...rest, b</span>) &#123;<br> <span class="hljs-comment">// error</span><br>&#125;<br><span class="hljs-title class_">SyntaxError</span>: <span class="hljs-title class_">Rest</span> parameter must be last formal parameter<br></code></pre></td></tr></table></figure><h2 id="More-JavaScript-rest-parameters-examples"><a href="#More-JavaScript-rest-parameters-examples" class="headerlink" title="More JavaScript rest parameters examples"></a>More JavaScript rest parameters examples</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...args</span>) &#123;<br>  <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> a <span class="hljs-keyword">of</span> args) &#123;<br>    total += a<br>  &#125;<br>  <span class="hljs-keyword">return</span> total<br>&#125;<br><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><p>在此示例中，args 在数组中。因此，可以使用 for..of 循环来迭代其元素并对它们求和。</p><p>假设 sum() 函数的调用者可以传递各种数据类型的参数，例如数字、字符串和布尔值，并且只想计算数字的总和：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">...args</span>) &#123;<br>  <span class="hljs-keyword">return</span> args<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> e === <span class="hljs-string">&#x27;number&#x27;</span><br>    &#125;)<br>    .<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, curr</span>) &#123;<br>      <span class="hljs-keyword">return</span> prev + curr<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>以下脚本使用新的 sum() 函数仅对数字参数求和：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">sum</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;Hi&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-number">20</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result) <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><p>如果没有 rest parameter，必须使用函数的 arguments 对象。</p><p>但是，arguments 对象本身并不是 Array 类型的实例。因此，不能直接使用 filter() 方法。在 ES5 中，必须使用 Array.prototype.filter.call()，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">filter</span><br>    .<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> e === <span class="hljs-string">&#x27;number&#x27;</span><br>    &#125;)<br>    .<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, curr</span>) &#123;<br>      <span class="hljs-keyword">return</span> prev + curr<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>rest 参数使代码更加优雅。假设需要根据特定类型（例如数字、字符串、布尔值和 null）过滤参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">filterBy</span>(<span class="hljs-params">type, ...args</span>) &#123;<br>  <span class="hljs-keyword">return</span> args.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> e === type<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JavaScript-rest-parameters-and-arrow-function"><a href="#JavaScript-rest-parameters-and-arrow-function" class="headerlink" title="JavaScript rest parameters and arrow function"></a>JavaScript rest parameters and arrow function</h2><p>箭头函数没有 arguments 对象。因此，如果要向箭头函数传递一些参数，则必须使用 rest parameter。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">combine</span> = (<span class="hljs-params">...args</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> args.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">prev, curr</span>) &#123;<br>    <span class="hljs-keyword">return</span> prev + <span class="hljs-string">&#x27; &#x27;</span> + curr<br>  &#125;)<br>&#125;<br><span class="hljs-comment">// const combine = (...args) =&gt; args.reduce((prev, curr) =&gt; `$&#123;prev&#125; $&#123;curr&#125;`)</span><br><br><span class="hljs-keyword">let</span> message = <span class="hljs-title function_">combine</span>(<span class="hljs-string">&#x27;JavaScript&#x27;</span>, <span class="hljs-string">&#x27;Rest&#x27;</span>, <span class="hljs-string">&#x27;Parameters&#x27;</span>) <span class="hljs-comment">// =&gt;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message) <span class="hljs-comment">// JavaScript Rest Parameters</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript-rest-parameter-in-a-dynamic-function"><a href="#JavaScript-rest-parameter-in-a-dynamic-function" class="headerlink" title="JavaScript rest parameter in a dynamic function"></a>JavaScript rest parameter in a dynamic function</h2><p>JavaScript 可以通过 Function 构造函数创建动态函数。并且可以在动态函数中使用 rest parameter。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> showNumbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;...numbers&#x27;</span>, <span class="hljs-string">&#x27;console.log(numbers)&#x27;</span>)<br><span class="hljs-title function_">showNumbers</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// [ 1, 2, 3 ]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES 6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Destructuring</title>
    <link href="/2024/03/06/ES6-Destructuring/"/>
    <url>/2024/03/06/ES6-Destructuring/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>ES6 提供了一个称为解构赋值的新功能，将对象的属性或数组的元素解构为单独的变量。</p><h2 id="ES-5-old-school-style"><a href="#ES-5-old-school-style" class="headerlink" title="ES 5 old-school style"></a>ES 5 old-school style</h2><p>在 ES 5 及以前，要想将数组的元素或对象的属性赋值给单独的变量需要使用以下语法：</p><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> scores = [<span class="hljs-number">70</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>]<br><span class="hljs-keyword">let</span> x = scores[<span class="hljs-number">0</span>],<br>  y = scores[<span class="hljs-number">1</span>],<br>  z = scores[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;stein&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> name = user.<span class="hljs-property">name</span><br><span class="hljs-keyword">let</span> age = user.<span class="hljs-property">age</span><br></code></pre></td></tr></table></figure><h2 id="Array-Destructuring"><a href="#Array-Destructuring" class="headerlink" title="Array Destructuring"></a>Array Destructuring</h2><p>从 ES 6 开始，可以使用如下的语法进行数组解构赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> scores = [<span class="hljs-number">70</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>]<br><span class="hljs-keyword">let</span> [x, y, z] = scores<br></code></pre></td></tr></table></figure><p>如果 <code>scores</code> 数组只有两个值，那么变量 <code>z</code> 将会被赋值为 <code>undefined</code>，如果 <code>scores</code> 数组的元素长度大于 3，那么多余的元素将会被丢弃。</p><h3 id="Array-Destructuring-Assignment-and-Rest-syntax"><a href="#Array-Destructuring-Assignment-and-Rest-syntax" class="headerlink" title="Array Destructuring Assignment and Rest syntax"></a>Array Destructuring Assignment and Rest syntax</h3><p>可以使用 rest parameter (…) 将数组的所有剩余元素全部添加到一个新的数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> scores = [<span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">100</span>]<br><span class="hljs-keyword">let</span> [x, y, ...rest] = scores<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest) <span class="hljs-comment">// [ 80, 90, 100 ]</span><br></code></pre></td></tr></table></figure><h3 id="Setting-default-values"><a href="#Setting-default-values" class="headerlink" title="Setting default values"></a>Setting default values</h3><p>如果不想给变量设置为 <code>undefined</code>，那么可以使用如下语法为解构数组对应的变量设置默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> scores = [<span class="hljs-number">60</span>, <span class="hljs-number">70</span>]<br><span class="hljs-keyword">let</span> [x, y, z = <span class="hljs-number">80</span>] = scores<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(z) <span class="hljs-comment">// 80</span><br></code></pre></td></tr></table></figure><h3 id="Nested-array-destructuring"><a href="#Nested-array-destructuring" class="headerlink" title="Nested array destructuring"></a>Nested array destructuring</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nestedArr = [<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>, [<span class="hljs-string">&#x27;Red&#x27;</span>, <span class="hljs-string">&#x27;Green&#x27;</span>, <span class="hljs-string">&#x27;Blue&#x27;</span>]<br><br><span class="hljs-keyword">let</span> [firstName, lastName, [red, green, blue]] = nestedArr<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstName, lastName, red, green, blue) <span class="hljs-comment">// John Doe Red Green Blue</span><br></code></pre></td></tr></table></figure><h2 id="Object-Destructuring"><a href="#Object-Destructuring" class="headerlink" title="Object Destructuring"></a>Object Destructuring</h2><p>ES6 引入了对象解构语法，提供了另一种将对象属性分配给变量的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> user = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Stein&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Albert&#x27;</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">firstName</span>: fName, <span class="hljs-attr">lastName</span>: lName &#125; = user<br></code></pre></td></tr></table></figure><p>firstName 和 lastName 属性分别分配给 fname 和 lname 变量。冒号（:）之前的标识符是对象的属性，冒号之后的标识符是变量。</p><p>如果变量与对象的属性具有相同的名称，则可以使代码更加简洁，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; firstName, lastName &#125; = user<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstName) <span class="hljs-comment">// &#x27;Stein&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lastName) <span class="hljs-comment">// &#x27;Albert&#x27;</span><br></code></pre></td></tr></table></figure><p>当对象的属性不存在时，可以为变量分配默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Doe&#x27;</span>,<br>  <span class="hljs-attr">currentAge</span>: <span class="hljs-number">28</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> &#123; firstName, lastName, middleName = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">currentAge</span>: age = <span class="hljs-number">18</span> &#125; = person<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(middleName) <span class="hljs-comment">// &#x27;&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age) <span class="hljs-comment">// 28</span><br></code></pre></td></tr></table></figure><h3 id="Nested-object-destructuring"><a href="#Nested-object-destructuring" class="headerlink" title="Nested object destructuring"></a>Nested object destructuring</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> employee = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">1001</span>,<br>  <span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Doe&#x27;</span>,<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">let</span> &#123;<br>  <span class="hljs-attr">name</span>: &#123; <span class="hljs-attr">firstName</span>: f, <span class="hljs-attr">lastName</span>: l &#125;,<br>&#125; = employee<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f) <span class="hljs-comment">// John</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(l) <span class="hljs-comment">// Doe</span><br></code></pre></td></tr></table></figure><h3 id="Destructuring-function-arguments"><a href="#Destructuring-function-arguments" class="headerlink" title="Destructuring function arguments"></a>Destructuring function arguments</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">display</span> = (<span class="hljs-params">&#123; firstName, lastName &#125;</span>) =&gt;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;firstName&#125;</span> <span class="hljs-subst">$&#123;lastName&#125;</span>`</span>)<br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Doe&#x27;</span>,<br>&#125;<br><span class="hljs-title function_">display</span>(person)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES 6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Generics</title>
    <link href="/2024/03/05/Java-Generics/"/>
    <url>/2024/03/05/Java-Generics/</url>
    
    <content type="html"><![CDATA[<ol><li><a href="https://stein283036.github.io/2024/03/18/Why-Use-Generics/">Why Use Generics?</a></li><li><a href="https://stein283036.github.io/2024/03/18/Generic-Types/">Generic Types</a></li><li><a href="https://stein283036.github.io/2024/03/18/Generic-Methods/">Generic Methods</a></li><li><a href="https://stein283036.github.io/2024/03/18/Bounded-Type-Parameters/">Bounded Type Parameters</a></li><li><a href="https://stein283036.github.io/2024/03/18/Generics-Inheritance-and-Subtypes/">Generics, Inheritance, and Subtypes</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Generics</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
